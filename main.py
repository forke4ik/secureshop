# main.py

import os
import logging
import asyncio
import threading
import requests
import json
import re
from datetime import datetime, timedelta
from urllib.parse import urljoin

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    BotCommand,
    BotCommandScopeChat,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)
import psycopg
from psycopg.rows import dict_row

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏
from config import (
    BOT_TOKEN,
    DATABASE_URL,
    OWNER_ID_1,
    OWNER_ID_2,
    NOWPAYMENTS_API_KEY,
    NOWPAYMENTS_IPN_SECRET,
    PAYMENT_CURRENCY,  # –ë—É–¥–µ—Ç "UAH"
    CARD_NUMBER,
)
from products_config import SUBSCRIPTIONS, DIGITAL_PRODUCTS, DIGITAL_PRODUCT_MAP
from pay_rules import (
    parse_pay_command,
    get_full_product_info,
    generate_pay_command_from_selection,
    generate_pay_command_from_digital_product,
)

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

bot_running = False
bot_lock = threading.Lock()

OWNER_IDS = [id for id in [OWNER_ID_1, OWNER_ID_2] if id is not None]

# NOWPayments API
NOWPAYMENTS_API_URL = "https://api.nowpayments.io/v1"

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø –°–û–°–¢–û–Ø–ù–ò–Ø ---
# –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î –∏–ª–∏ –∫—ç—à–µ
users_db = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö (–≤—Ä–µ–º–µ–Ω–Ω–æ)
active_conversations = {}  # –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ {client_id: {assigned_owner, user_info, type}}
owner_client_map = {}  # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º {owner_id: client_id}

# --- –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ---
# (–û—Å—Ç–∞–≤–ª–µ–Ω—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
# ... (–≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ main.py)

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
def ensure_user_exists(user):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î."""
    try:
        with psycopg.connect(DATABASE_URL) as conn:
            with conn.cursor(row_factory=dict_row) as cur:
                cur.execute(
                    """
                    INSERT INTO users (id, username, first_name, last_name, language_code, is_bot, created_at)
                    VALUES (%s, %s, %s, %s, %s, %s, %s)
                    ON CONFLICT (id) DO UPDATE SET
                        username = EXCLUDED.username,
                        first_name = EXCLUDED.first_name,
                        last_name = EXCLUDED.last_name,
                        language_code = EXCLUDED.language_code,
                        updated_at = CURRENT_TIMESTAMP
                """,
                    (
                        user.id,
                        user.username,
                        user.first_name,
                        user.last_name,
                        user.language_code,
                        user.is_bot,
                        datetime.now(),
                    ),
                )
                conn.commit()
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")

# --- –§–£–ù–ö–¶–ò–ò NOWPAYMENTS ---
def create_nowpayments_invoice(amount_uah, order_id, product_name):
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–≤–æ–π—Å –≤ NOWPayments.
    """
    logger.info(
        f"–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ NOWPayments: —Å—É–º–º–∞ {amount_uah} {PAYMENT_CURRENCY}, –∑–∞–∫–∞–∑ {order_id}"
    )

    if not NOWPAYMENTS_API_KEY:
        logger.error("NOWPayments API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return {"error": "API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}

    url = f"{NOWPAYMENTS_API_URL}/invoice"

    headers = {
        "x-api-key": NOWPAYMENTS_API_KEY,
        "Content-Type": "application/json",
        "Accept": "application/json",
    }

    payload = {
        "price_amount": amount_uah,
        "price_currency": PAYMENT_CURRENCY,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º UAH
        "order_id": order_id,
        "order_description": f"–û–ø–ª–∞—Ç–∞ –∑–∞ {product_name}",
        "ipn_callback_url": f"https://your-render-app-url.onrender.com/ipn", # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL
        "success_url": "https://t.me/SecureShopBot", # URL —É—Å–ø–µ—Ö–∞
        "cancel_url": "https://t.me/SecureShopBot",   # URL –æ—Ç–º–µ–Ω—ã
    }

    try:
        response = requests.post(url, json=payload, headers=headers, timeout=10)
        logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ NOWPayments: {response.status_code}")
        logger.debug(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ NOWPayments: {response.text}")

        if response.status_code in [200, 201]:
            return response.json()
        else:
            logger.error(
                f"–û—à–∏–±–∫–∞ NOWPayments –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {response.status_code} - {response.text}"
            )
            return {"error": f"–û—à–∏–±–∫–∞ API: {response.status_code}"}
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞ NOWPayments: {e}")
        return {"error": f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}"}

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    logger.info(f"–í—ã–∑–æ–≤ /start –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user = update.effective_user
    ensure_user_exists(user)
    is_owner = user.id in OWNER_IDS

    if is_owner:
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton("üë• –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã", callback_data="chats")],
            [InlineKeyboardButton("üõçÔ∏è –ó–∞–∫–∞–∑—ã", callback_data="orders")],
            [InlineKeyboardButton("‚ùì –í–æ–ø—Ä–æ—Å—ã", callback_data="questions")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        greeting = f"üëã –ü—Ä–∏–≤—ñ—Ç, {user.first_name}!\n–í–∏ —î –≤–ª–∞—Å–Ω–∏–∫–æ–º —Ü—å–æ–≥–æ –±–æ—Ç–∞."
        await update.message.reply_text(greeting, reply_markup=reply_markup)
    else:
        keyboard = [
            [InlineKeyboardButton("üõí –ó–∞–º–æ–≤–∏—Ç–∏", callback_data="order")],
            [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="question")],
            [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")],
            [InlineKeyboardButton("üì¢ –ö–∞–Ω–∞–ª", callback_data="channel")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        greeting = f"üëã –ü—Ä–∏–≤—ñ—Ç, {user.first_name}!\n–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ SecureShop!"
        await update.message.reply_text(greeting, reply_markup=reply_markup)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–∫—É."""
    logger.info(f"–í—ã–∑–æ–≤ /help –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    help_text = (
        "üëã –î–æ–±—Ä–æ–≥–æ –¥–Ω—è! –Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω—É SecureShop.\n\n"
        "üîê –ù–∞—à —Å–µ—Ä–≤—ñ—Å –∫—É–ø—É—î –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤–∞—à –≥–æ—Ç–æ–≤–∏–π –∞–∫–∞—É–Ω—Ç, –∞ –Ω–µ –¥–∞—î –≤–∞–º —Å–≤—ñ–π. "
        "–ú–∏ –¥—É–∂–µ —Å—Ç–∞—Ä–∞—î–º–æ—Å—å –±—É—Ç–∏ –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏, —Ç–æ–º—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –±—É–¥—å-—è–∫—ñ –ø–∏—Ç–∞–Ω–Ω—è "
        "–ø–æ –Ω–∞—à–æ–º—É —Å–µ—Ä–≤—ñ—Å—É –º–æ–∂–Ω–∞ –∑–∞–¥–∞–≤–∞—Ç–∏ —Ü—ñ–ª–æ–¥–æ–±–æ–≤–æ.\n\n"
        "üìå –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/start - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
        "/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞\n"
        "/order - –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n"
        "/question - –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è\n"
        "/channel - –ù–∞—à –≥–æ–ª–æ–≤–Ω–∏–π –∫–∞–Ω–∞–ª\n"
        "/stop - –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –¥—ñ–∞–ª–æ–≥\n\n"
        "–¢–∞–∫–æ–∂ –≤–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É `/pay` –∑ —Å–∞–π—Ç—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."
    )
    await update.message.reply_text(help_text)

async def channel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª."""
    logger.info(f"–í—ã–∑–æ–≤ /channel –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    keyboard = [
        [InlineKeyboardButton("üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ SecureShopUA", url="https://t.me/SecureShopUA")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    message_text = (
        "üì¢ –ù–∞—à –≥–æ–ª–æ–≤–Ω–∏–π –∫–∞–Ω–∞–ª –∑ –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏ —Ç–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞–º–∏:\n"
        "üëâ –¢—É—Ç –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ:\n"
        "- üÜï –ê–∫—Ç—É–∞–ª—å–Ω—ñ —Ç–æ–≤–∞—Ä–∏ —Ç–∞ –ø–æ—Å–ª—É–≥–∏\n"
        "- üî• –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —Ç–∞ –∑–Ω–∏–∂–∫–∏\n"
        "- üéÅ –†–æ–∑—ñ–≥—Ä–∞—à—ñ —Ç–∞ –∞–∫—Ü—ñ—ó\n"
        "- ‚ÑπÔ∏è –í–∞–∂–ª–∏–≤—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—É\n\n"
        "–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å, —â–æ–± –±—É—Ç–∏ –≤ –∫—É—Ä—Å—ñ –≤—Å—ñ—Ö –Ω–æ–≤–∏–Ω! üëá"
    )
    await update.message.reply_text(message_text, reply_markup=reply_markup)

async def order_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞."""
    logger.info(f"–í—ã–∑–æ–≤ /order –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    keyboard = [
        [InlineKeyboardButton("üí≥ –ü—ñ–¥–ø–∏—Å–∫–∏", callback_data="order_subscriptions")],
        [InlineKeyboardButton("üéÆ –¶–∏—Ñ—Ä–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏", callback_data="order_digital")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")],
    ]
    await update.message.reply_text(
        "üì¶ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç–æ–≤–∞—Ä—É:", reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def question_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞."""
    logger.info(f"–í—ã–∑–æ–≤ /question –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user = update.effective_user
    ensure_user_exists(user)
    context.user_data["conversation_type"] = "question"
    await update.message.reply_text(
        "üìù –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. –Ø –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫—É –º–∞–≥–∞–∑–∏–Ω—É.\n"
        "–©–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ü–µ–π –¥—ñ–∞–ª–æ–≥ –ø—ñ–∑–Ω—ñ—à–µ, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop."
    )

async def stop_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥."""
    logger.info(f"–í—ã–∑–æ–≤ /stop –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name

    # –ï—Å–ª–∏ —ç—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü, –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
    if user_id in OWNER_IDS and user_id in owner_client_map:
        client_id = owner_client_map[user_id]
        # client_info = active_conversations.get(client_id, {}).get('user_info')
        if client_id in active_conversations:
            del active_conversations[client_id]
        del owner_client_map[user_id]
        try:
            await context.bot.send_message(
                chat_id=client_id, text="üë§ –ú–∞–≥–∞–∑–∏–Ω –∑–∞–≤–µ—Ä—à–∏–≤ –¥—ñ–∞–ª–æ–≥."
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {client_id}: {e}")
            await update.message.reply_text(
                "–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ (–º–æ–∂–ª–∏–≤–æ, –≤—ñ–Ω –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞), –∞–ª–µ –¥—ñ–∞–ª–æ–≥ –±—É–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑ –≤–∞—à–æ–≥–æ –±–æ–∫—É."
            )
        else:
            await update.message.reply_text(
                f"–î—ñ–∞–ª–æ–≥ –∑ –∫–ª—ñ—î–Ω—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ."
            )
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –∫–ª–∏–µ–Ω—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º –µ–≥–æ –¥–∏–∞–ª–æ–≥
    if user_id in active_conversations:
        owner_id = active_conversations[user_id].get("assigned_owner")
        if owner_id and owner_id in owner_client_map:
            del owner_client_map[owner_id]
        del active_conversations[user_id]
        try:
            if owner_id:
                await context.bot.send_message(
                    chat_id=owner_id, text=f"–ö–ª—ñ—î–Ω—Ç {user_name} –∑–∞–≤–µ—Ä—à–∏–≤ –¥—ñ–∞–ª–æ–≥."
                )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ {owner_id}: {e}")
        await update.message.reply_text("–í–∞—à –¥—ñ–∞–ª–æ–≥ —ñ–∑ –º–∞–≥–∞–∑–∏–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É.")

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK-–ó–ê–ü–†–û–°–û–í ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()
    user = query.from_user
    user_id = user.id
    ensure_user_exists(user)

    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –∑–∞–ø—Ä–æ—Å '{query.data}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    # --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è ---
    if query.data == "order":
        keyboard = [
            [InlineKeyboardButton("üí≥ –ü—ñ–¥–ø–∏—Å–∫–∏", callback_data="order_subscriptions")],
            [InlineKeyboardButton("üéÆ –¶–∏—Ñ—Ä–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏", callback_data="order_digital")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")],
        ]
        await query.message.edit_text(
            "üì¶ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç–æ–≤–∞—Ä—É:", reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data == "question":
        context.user_data["conversation_type"] = "question"
        await query.message.edit_text(
            "üìù –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. –Ø –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫—É –º–∞–≥–∞–∑–∏–Ω—É.\n"
            "–©–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ü–µ–π –¥—ñ–∞–ª–æ–≥ –ø—ñ–∑–Ω—ñ—à–µ, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop."
        )

    elif query.data == "help":
        help_text = (
            "üëã –î–æ–±—Ä–æ–≥–æ –¥–Ω—è! –Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω—É SecureShop.\n\n"
            "üîê –ù–∞—à —Å–µ—Ä–≤—ñ—Å –∫—É–ø—É—î –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤–∞—à –≥–æ—Ç–æ–≤–∏–π –∞–∫–∞—É–Ω—Ç, –∞ –Ω–µ –¥–∞—î –≤–∞–º —Å–≤—ñ–π. "
            "–ú–∏ –¥—É–∂–µ —Å—Ç–∞—Ä–∞—î–º–æ—Å—å –±—É—Ç–∏ –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏, —Ç–æ–º—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –±—É–¥—å-—è–∫—ñ –ø–∏—Ç–∞–Ω–Ω—è "
            "–ø–æ –Ω–∞—à–æ–º—É —Å–µ—Ä–≤—ñ—Å—É –º–æ–∂–Ω–∞ –∑–∞–¥–∞–≤–∞—Ç–∏ —Ü—ñ–ª–æ–¥–æ–±–æ–≤–æ.\n\n"
            "üìå –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:\n"
            "/start - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
            "/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞\n"
            "/order - –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n"
            "/question - –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è\n"
            "/channel - –ù–∞—à –≥–æ–ª–æ–≤–Ω–∏–π –∫–∞–Ω–∞–ª\n"
            "/stop - –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –¥—ñ–∞–ª–æ–≥\n\n"
            "–¢–∞–∫–æ–∂ –≤–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É `/pay` –∑ —Å–∞–π—Ç—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."
        )
        await query.message.edit_text(help_text)

    elif query.data == "channel":
        keyboard = [
            [
                InlineKeyboardButton(
                    "üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ SecureShopUA", url="https://t.me/SecureShopUA"
                )
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        message_text = (
            "üì¢ –ù–∞—à –≥–æ–ª–æ–≤–Ω–∏–π –∫–∞–Ω–∞–ª –∑ –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏ —Ç–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞–º–∏:\n"
            "üëâ –¢—É—Ç –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ:\n"
            "- üÜï –ê–∫—Ç—É–∞–ª—å–Ω—ñ —Ç–æ–≤–∞—Ä–∏ —Ç–∞ –ø–æ—Å–ª—É–≥–∏\n"
            "- üî• –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —Ç–∞ –∑–Ω–∏–∂–∫–∏\n"
            "- üéÅ –†–æ–∑—ñ–≥—Ä–∞—à—ñ —Ç–∞ –∞–∫—Ü—ñ—ó\n"
            "- ‚ÑπÔ∏è –í–∞–∂–ª–∏–≤—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—É\n\n"
            "–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å, —â–æ–± –±—É—Ç–∏ –≤ –∫—É—Ä—Å—ñ –≤—Å—ñ—Ö –Ω–æ–≤–∏–Ω! üëá"
        )
        await query.message.edit_text(message_text, reply_markup=reply_markup)

    elif query.data == "back_to_main":
        is_owner = user.id in OWNER_IDS
        if is_owner:
            keyboard = [
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
                [InlineKeyboardButton("üë• –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã", callback_data="chats")],
                [InlineKeyboardButton("üõçÔ∏è –ó–∞–∫–∞–∑—ã", callback_data="orders")],
                [InlineKeyboardButton("‚ùì –í–æ–ø—Ä–æ—Å—ã", callback_data="questions")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            greeting = f"üëã –ü—Ä–∏–≤—ñ—Ç, {user.first_name}!\n–í–∏ —î –≤–ª–∞—Å–Ω–∏–∫–æ–º —Ü—å–æ–≥–æ –±–æ—Ç–∞."
            await query.message.edit_text(greeting, reply_markup=reply_markup)
        else:
            keyboard = [
                [InlineKeyboardButton("üõí –ó–∞–º–æ–≤–∏—Ç–∏", callback_data="order")],
                [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="question")],
                [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")],
                [InlineKeyboardButton("üì¢ –ö–∞–Ω–∞–ª", callback_data="channel")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            greeting = f"üëã –ü—Ä–∏–≤—ñ—Ç, {user.first_name}!\n–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ SecureShop!"
            await query.message.edit_text(greeting, reply_markup=reply_markup)

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ ---
    elif query.data == "order_subscriptions":
        keyboard = []
        for service_key, service_data in SUBSCRIPTIONS.items():
            keyboard.append(
                [
                    InlineKeyboardButton(
                        service_data["name"], callback_data=f"service_{service_key}"
                    )
                ]
            )
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="order")])
        await query.message.edit_text(
            "üí≥ –û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É:", reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data.startswith("service_"):
        service_key = query.data.split("_")[1]
        service = SUBSCRIPTIONS.get(service_key)
        if service:
            keyboard = []
            for plan_key, plan_data in service["plans"].items():
                keyboard.append(
                    [
                        InlineKeyboardButton(
                            plan_data["name"],
                            callback_data=f"plan_{service_key}_{plan_key}",
                        )
                    ]
                )
            keyboard.append(
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="order_subscriptions")]
            )
            await query.message.edit_text(
                f"üìã –û–±–µ—Ä—ñ—Ç—å –ø–ª–∞–Ω –¥–ª—è {service['name']}:",
                reply_markup=InlineKeyboardMarkup(keyboard),
            )

    elif query.data.startswith("plan_"):
        parts = query.data.split("_")
        if len(parts) == 3:
            service_key, plan_key = parts[1], parts[2]
            service = SUBSCRIPTIONS.get(service_key)
            if service and plan_key in service["plans"]:
                plan_data = service["plans"][plan_key]
                keyboard = []
                for option in plan_data.get("options", []):
                    callback_data = f"add_{service_key}_{plan_key}_{option['period'].replace(' ', '_')}_{option['price']}"
                    keyboard.append(
                        [
                            InlineKeyboardButton(
                                f"{option['period']} - {option['price']} UAH",
                                callback_data=callback_data,
                            )
                        ]
                    )
                keyboard.append(
                    [
                        InlineKeyboardButton(
                            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"service_{service_key}"
                        )
                    ]
                )
                await query.message.edit_text(
                    f"üõí {service['name']} {plan_data['name']}\n–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥:",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                )

    elif query.data.startswith("add_"):
        try:
            parts = query.data.split("_")
            logger.debug(f"–†–∞–∑–±–æ—Ä callback_data 'add_': parts={parts}")

            if len(parts) < 5 or not parts[-1].isdigit():
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è add")

            service_key = parts[1]
            plan_key = parts[2]
            price_str = parts[-1]
            period_parts = parts[3:-1]
            period_key = "_".join(period_parts)
            period = period_key.replace("_", " ")

            price = int(price_str)
            service = SUBSCRIPTIONS.get(service_key)

            if service and plan_key in service["plans"]:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /pay
                command, order_id = generate_pay_command_from_selection(
                    user_id, service_key, plan_key, period, price
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
                context.user_data["pending_order"] = {
                    "order_id": order_id,
                    "service": service["name"],
                    "plan": service["plans"][plan_key]["name"],
                    "period": period,
                    "price": price,
                    "command": command,
                }

                # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
                order_text = (
                    f"üõçÔ∏è –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}\n"
                    f"–°–µ—Ä–≤—ñ—Å: {service['name']}\n"
                    f"–ü–ª–∞–Ω: {service['plans'][plan_key]['name']}\n"
                    f"–ü–µ—Ä—ñ–æ–¥: {period}\n"
                    f"–°—É–º–∞: {price} UAH\n\n"
                )

                message = (
                    f"{order_text}"
                    f"–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:"
                )

                keyboard = [
                    [
                        InlineKeyboardButton(
                            "üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ –∫–∞—Ä—Ç–∫–æ—é", callback_data=f"pay_card_{price}"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            "‚Çø –û–ø–ª–∞—Ç–∏—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é",
                            callback_data=f"pay_crypto_{price}",
                        )
                    ],
                    [InlineKeyboardButton("üìã –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")],
                ]

                await query.message.edit_text(
                    message, reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                await query.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞: —Å–µ—Ä–≤—ñ—Å –∞–±–æ –ø–ª–∞–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ add_ callback: {e}")
            await query.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É.")

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ ---
    elif query.data == "order_digital":
        keyboard = [
            [InlineKeyboardButton("üéÆ Discord –£–∫—Ä–∞—à–µ–Ω–Ω—è", callback_data="digital_discord_decor")],
            # –î–æ–±–∞–≤–ª—è–µ–º PSN Gift Cards –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—É–Ω–∫—Ç
            [InlineKeyboardButton("üéÆ PSN Gift Cards", callback_data="digital_psn_cards")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="order")],
        ]
        await query.message.edit_text(
            "üéÆ –û–±–µ—Ä—ñ—Ç—å —Ü–∏—Ñ—Ä–æ–≤–∏–π —Ç–æ–≤–∞—Ä:", reply_markup=InlineKeyboardMarkup(keyboard)
        )

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ Discord –£–∫—Ä–∞—à–µ–Ω–Ω—è —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ ---
    elif query.data == "digital_discord_decor":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ "–ë–µ–∑ Nitro" –∏ "–ó Nitro"
        keyboard = [
            [
                InlineKeyboardButton(
                    "üé® –£–∫—Ä–∞—à–µ–Ω–Ω—è –ë–µ–∑ Nitro", callback_data="discord_decor_bzn"
                )
            ],
            [
                InlineKeyboardButton(
                    "‚ú® –£–∫—Ä–∞—à–µ–Ω–Ω—è –ó Nitro", callback_data="discord_decor_zn"
                )
            ],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="order_digital")],
        ]
        await query.message.edit_text(
            "üéÆ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø Discord –£–∫—Ä–∞—à–µ–Ω–Ω—è:",
            reply_markup=InlineKeyboardMarkup(keyboard),
        )

    elif query.data == "discord_decor_bzn":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã "–ë–µ–∑ Nitro"
        keyboard = []
        for product_callback, product_id in DIGITAL_PRODUCT_MAP.items():
            product_data = DIGITAL_PRODUCTS[product_id]
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 'bzn'
            if product_data.get("category") == "bzn":
                keyboard.append(
                    [
                        InlineKeyboardButton(
                            f"{product_data['name']} - {product_data['price']} UAH",
                            callback_data=product_callback,
                        )
                    ]
                )
        keyboard.append(
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="digital_discord_decor")]
        )
        await query.message.edit_text(
            "üé® Discord –£–∫—Ä–∞—à–µ–Ω–Ω—è (–ë–µ–∑ Nitro):",
            reply_markup=InlineKeyboardMarkup(keyboard),
        )

    elif query.data == "discord_decor_zn":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã "–ó Nitro"
        keyboard = []
        for product_callback, product_id in DIGITAL_PRODUCT_MAP.items():
            product_data = DIGITAL_PRODUCTS[product_id]
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 'zn'
            if product_data.get("category") == "zn":
                keyboard.append(
                    [
                        InlineKeyboardButton(
                            f"{product_data['name']} - {product_data['price']} UAH",
                            callback_data=product_callback,
                        )
                    ]
                )
        keyboard.append(
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="digital_discord_decor")]
        )
        await query.message.edit_text(
            "‚ú® Discord –£–∫—Ä–∞—à–µ–Ω–Ω—è (–ó Nitro):",
            reply_markup=InlineKeyboardMarkup(keyboard),
        )

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ PSN Gift Cards ---
    elif query.data == "digital_psn_cards":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ PSN Gift Cards
        keyboard = []
        for product_callback, product_id in DIGITAL_PRODUCT_MAP.items():
            product_data = DIGITAL_PRODUCTS[product_id]
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 'psn'
            if product_data.get("category") == "psn":
                keyboard.append(
                    [
                        InlineKeyboardButton(
                            f"{product_data['name']} - {product_data['price']} UAH",
                            callback_data=product_callback,
                        )
                    ]
                )
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="order_digital")])
        await query.message.edit_text(
            "üéÆ PSN Gift Cards:", reply_markup=InlineKeyboardMarkup(keyboard)
        )

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ ---
    elif query.data.startswith("digital_"):
        product_id = DIGITAL_PRODUCT_MAP.get(query.data)
        if product_id:
            product_data = DIGITAL_PRODUCTS[product_id]
            command, order_id = generate_pay_command_from_digital_product(
                user_id, product_id, product_data
            )

            context.user_data["pending_order"] = {
                "order_id": order_id,
                "service": "–¶–∏—Ñ—Ä–æ–≤–∏–π —Ç–æ–≤–∞—Ä",
                "plan": product_data["name"],
                "period": "1 —à—Ç",
                "price": product_data["price"],
                "command": command,
            }

            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
            order_text = (
                f"üõçÔ∏è –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}\n"
                f"–¢–æ–≤–∞—Ä: {product_data['name']}\n"
                f"–°—É–º–∞: {product_data['price']} UAH\n\n"
            )

            message = (
                f"{order_text}"
                f"–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:"
            )

            keyboard = [
                [
                    InlineKeyboardButton(
                        "üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ –∫–∞—Ä—Ç–∫–æ—é", callback_data=f"pay_card_{product_data['price']}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "‚Çø –û–ø–ª–∞—Ç–∏—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é",
                        callback_data=f"pay_crypto_{product_data['price']}",
                    )
                ],
                [InlineKeyboardButton("üìã –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")],
            ]

            await query.message.edit_text(
                message, reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await query.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞: —Ü–∏—Ñ—Ä–æ–≤–∏–π —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã ---
    elif query.data.startswith("pay_card_"):
        try:
            price = int(query.data.split("_")[2])
            pending_order = context.user_data.get("pending_order")

            if not pending_order:
                await query.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞: —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—è.")
                return

            message = (
                f"üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é:\n"
                f"–°—É–º–∞: {price} UAH\n"
                f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏: {CARD_NUMBER}\n"
                f"–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É: –û–ø–ª–∞—Ç–∞ –∑–∞ {pending_order['service']} {pending_order['plan']} ({pending_order['period']})\n\n"
                f"–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ."
            )

            keyboard = [
                [InlineKeyboardButton("‚úÖ –û–ø–ª–∞—á–µ–Ω–æ", callback_data="paid_card")],
                [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_payment")],
            ]

            await query.message.edit_text(
                message, reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π: {e}")
            await query.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –æ–ø–ª–∞—Ç–∏ –∫–∞—Ä—Ç–∫–æ—é.")

    elif query.data.startswith("pay_crypto_"):
        try:
            price = int(query.data.split("_")[2])
            pending_order = context.user_data.get("pending_order")

            if not pending_order:
                await query.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞: —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—è.")
                return

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –≤ NOWPayments
            invoice_data = create_nowpayments_invoice(
                price,
                pending_order["order_id"],
                f"{pending_order['service']} {pending_order['plan']} ({pending_order['period']})",
            )

            if invoice_data and "invoice_url" in invoice_data:
                pay_url = invoice_data["invoice_url"]
                message = (
                    f"‚Çø –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é:\n"
                    f"–°—É–º–∞: {price} UAH\n"
                    f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –æ–ø–ª–∞—Ç–∏.\n\n"
                    f"–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É \"‚úÖ –û–ø–ª–∞—á–µ–Ω–æ\"."
                )

                keyboard = [
                    [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏", url=pay_url)],
                    [InlineKeyboardButton("‚úÖ –û–ø–ª–∞—á–µ–Ω–æ", callback_data="paid_crypto")],
                    [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_payment")],
                ]

                await query.message.edit_text(
                    message, reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                error_msg = invoice_data.get("error", "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞")
                await query.message.edit_text(
                    f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–≤–æ–π—Å—É –¥–ª—è –æ–ø–ª–∞—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é: {error_msg}"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π: {e}")
            await query.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –æ–ø–ª–∞—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é.")

    elif query.data in ["paid_card", "paid_crypto"]:
        pending_order = context.user_data.get("pending_order")
        if pending_order:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
            order_summary = (
                f"üõçÔ∏è –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø #{pending_order['order_id']}\n\n"
                f"üë§ –ö–ª—ñ—î–Ω—Ç: @{user.username or user.first_name} (ID: {user_id})\n\n"
                f"üì¶ –î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n"
            )
            
            if pending_order['service'] == "–¶–∏—Ñ—Ä–æ–≤–∏–π —Ç–æ–≤–∞—Ä":
                order_summary += (
                    f"‚ñ´Ô∏è –¢–æ–≤–∞—Ä: {pending_order['plan']}\n"
                    f"‚ñ´Ô∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å: 1 —à—Ç\n"
                    f"‚ñ´Ô∏è –°—É–º–∞: {pending_order['price']} UAH\n"
                )
            else:
                order_summary += (
                    f"‚ñ´Ô∏è –°–µ—Ä–≤—ñ—Å: {pending_order['service']}\n"
                    f"‚ñ´Ô∏è –ü–ª–∞–Ω: {pending_order['plan']}\n"
                    f"‚ñ´Ô∏è –ü–µ—Ä—ñ–æ–¥: {pending_order['period']}\n"
                    f"‚ñ´Ô∏è –°—É–º–∞: {pending_order['price']} UAH\n"
                )
            
            order_summary += (
                f"\nüí≥ –ó–ê–ì–ê–õ–¨–ù–ê –°–£–ú–ê: {pending_order['price']} UAH\n\n"
                f"–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: <code>{pending_order['command']}</code>\n\n"
                f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚úÖ –í–∑—è—Ç–∏', —â–æ–± –æ–±—Ä–æ–±–∏—Ç–∏ —Ü–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."
            )

            keyboard = [
                [InlineKeyboardButton("‚úÖ –í–∑—è—Ç–∏", callback_data=f"take_order_{user_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            success = False
            for owner_id in OWNER_IDS:
                try:
                    await context.bot.send_message(
                        chat_id=owner_id, text=order_summary, parse_mode="HTML", reply_markup=reply_markup
                    )
                    success = True
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É {owner_id}: {e}")

            if success:
                await query.message.edit_text(
                    "‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."
                )
            else:
                await query.message.edit_text(
                    "‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è, –∞–ª–µ –æ–ø–ª–∞—Ç–∞ –ø—Ä–∏–π–Ω—è—Ç–∞."
                )

            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
            context.user_data.pop("pending_order", None)
        else:
            await query.message.edit_text("‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ–ø–ª–∞—Ç—É –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞ –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—è.")

    elif query.data == "cancel_payment":
        pending_order = context.user_data.get("pending_order")
        if pending_order:
            await query.message.edit_text(
                f"‚ùå –û–ø–ª–∞—Ç–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞.\n"
                f"–°–µ—Ä–≤—ñ—Å: {pending_order['service']}\n"
                f"–ü–ª–∞–Ω: {pending_order['plan']}\n"
                f"–ü–µ—Ä—ñ–æ–¥: {pending_order['period']}\n"
                f"–°—É–º–∞: {pending_order['price']} UAH\n\n"
                f"–í–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ /start."
            )
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
            context.user_data.pop("pending_order", None)
        else:
            await query.message.edit_text("‚ùå –û–ø–ª–∞—Ç–∞ –≤–∂–µ —Å–∫–∞—Å–æ–≤–∞–Ω–∞ –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—è.")

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑—è—Ç–∏—è –∑–∞–∫–∞–∑–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º ---
    elif query.data.startswith("take_order_"):
        client_id = int(query.data.split("_")[-1])
        owner_id = user_id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–∑—è—Ç –ª–∏ —É–∂–µ –∑–∞–∫–∞–∑ –¥—Ä—É–≥–∏–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
        if client_id in active_conversations and active_conversations[client_id].get("assigned_owner"):
            await query.answer("‚ùå –¶–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —ñ–Ω—à–∏–º –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫–æ–º –º–∞–≥–∞–∑–∏–Ω—É.", show_alert=True)
            return

        # –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥
        client_info = users_db.get(client_id, {})
        active_conversations[client_id] = {
            "assigned_owner": owner_id,
            "user_info": client_info,
            "type": "order", # –∏–ª–∏ "subscription_order", "digital_order" –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Ç–æ—á–Ω–µ–µ
            "order_details": context.user_data.get("pending_order", {})
        }
        owner_client_map[owner_id] = client_id

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        try:
            await context.bot.send_message(
                chat_id=client_id,
                text="‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ! –ü—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫ –º–∞–≥–∞–∑–∏–Ω—É –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.\n\n"
                     "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /stop."
            )
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
            await query.message.edit_text(
                f"‚úÖ –í–∏ –≤–∑—è–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ {client_info.get('first_name', '–ù–µ–≤—ñ–¥–æ–º–∏–π')} (ID: {client_id}).\n\n"
                "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ü—å–æ–º—É –∫–ª—ñ—î–Ω—Ç—É. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /stop."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–∏–∞–ª–æ–≥–∞: {e}")
            await query.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—á–∞—Ç–∫—É –¥—ñ–∞–ª–æ–≥—É.")

    # --- –ö–æ–º–∞–Ω–¥—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ) ---
    # ... (stats, chats, orders, questions, history, dialog, clear –∏ —Ç.–¥.)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    user = update.effective_user
    user_id = user.id
    message_text = update.message.text
    ensure_user_exists(user)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
    is_owner = user_id in OWNER_IDS

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –≤–ª–∞–¥–µ–ª–µ—Ü, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ
    if is_owner:
        # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç—É –≤ —Ä–∞–º–∫–∞—Ö –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
        if user_id in owner_client_map:
            client_id = owner_client_map[user_id]
            try:
                await context.bot.send_message(
                    chat_id=client_id,
                    text=f"üì© –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –º–∞–≥–∞–∑–∏–Ω—É:\n{message_text}",
                )
                # –ú–æ–∂–Ω–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤–ª–∞–¥–µ–ª—å—Ü—É, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                # await update.message.reply_text("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç—É.")
            except Exception as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ {user_id} –∫–ª–∏–µ–Ω—Ç—É {client_id}: {e}"
                )
                await update.message.reply_text(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É. –ú–æ–∂–ª–∏–≤–æ, –∫–ª—ñ—î–Ω—Ç –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞."
                )
        else:
            await update.message.reply_text(
                "‚ÑπÔ∏è –í–∏ –Ω–µ –≤–µ–¥–µ—Ç–µ –¥—ñ–∞–ª–æ–≥ –∑ –∂–æ–¥–Ω–∏–º –∫–ª—ñ—î–Ω—Ç–æ–º. –û—á—ñ–∫—É–π—Ç–µ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ—é /dialog."
            )
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /pay
    if message_text.startswith("/pay"):
        await pay_command(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–≤–æ–ø—Ä–æ—Å—ã, –∑–∞–∫–∞–∑—ã)
    conversation_type = context.user_data.get("conversation_type")

    if conversation_type == "question":
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤–æ–ø—Ä–æ—Å –≤–ª–∞–¥–µ–ª—å—Ü–∞–º
        forward_message = (
            f"‚ùì –ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞:\n"
            f"üë§ –ö–ª—ñ—î–Ω—Ç: {user.first_name}\n"
            f"üì± Username: @{user.username if user.username else '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
            f"üÜî ID: {user.id}\n"
            f"üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n{message_text}"
        )
        keyboard = [
            [InlineKeyboardButton("‚úÖ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"take_question_{user_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        success = False
        for owner_id in OWNER_IDS:
            try:
                await context.bot.send_message(
                    chat_id=owner_id, text=forward_message, reply_markup=reply_markup
                )
                success = True
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤–ª–∞–¥–µ–ª—å—Ü—É {owner_id}: {e}")

        if success:
            await update.message.reply_text("‚úÖ –í–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")
        else:
            await update.message.reply_text(
                "‚ùå –ù–∞ –∂–∞–ª—å, –Ω–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
            )
        return

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –º–µ–Ω—é
    await start(update, context)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /PAY ---
async def pay_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /pay."""
    logger.info(f"–í—ã–∑–æ–≤ /pay –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user = update.effective_user
    ensure_user_exists(user)

    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    order_id, result = parse_pay_command(context.args)
    if order_id is None:
        # result —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await update.message.reply_text(result)
        return

    parsed_items = result  # result —Ç–µ–ø–µ—Ä—å —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    order_details = []
    total_uah = 0

    for parsed_item in parsed_items:
        full_info = get_full_product_info(parsed_item)
        if full_info:
            total_uah += full_info["price"]
            if full_info['type'] == 'digital':
                order_details.append(
                    f"‚ñ´Ô∏è {full_info['service_name']} {full_info['plan_name']} - {full_info['price']} UAH"
                )
            else:
                order_details.append(
                    f"‚ñ´Ô∏è {full_info['service_name']} {full_info['plan_name']} ({full_info['period']}) - {full_info['price']} UAH"
                )
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –¥–æ–±–∞–≤–ª—è–µ–º "—Å—ã—Ä–æ–π" —ç–ª–µ–º–µ–Ω—Ç
            order_details.append(
                f"‚ñ´Ô∏è ???? ({parsed_item['service_abbr']}-{parsed_item['plan_abbr']}-{parsed_item['period']}) - {parsed_item['price']} UAH"
            )
            total_uah += parsed_item["price"]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    order_text = f"üõçÔ∏è –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –≤—ñ–¥ @{user.username or user.first_name} (ID: {user.id})\n\n"
    order_text += "\n".join(order_details)
    order_text += f"\n\nüí≥ –í—Å—å–æ–≥–æ: {total_uah} UAH"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º —Å –∫–Ω–æ–ø–∫–æ–π "–í–∑—è—Ç—å"
    keyboard = [
        [InlineKeyboardButton("‚úÖ –í–∑—è—Ç–∏", callback_data=f"take_order_{user.id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    success = False
    for owner_id in OWNER_IDS:
        try:
            await context.bot.send_message(chat_id=owner_id, text=order_text, reply_markup=reply_markup)
            success = True
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤–ª–∞–¥–µ–ª—å—Ü—É {owner_id}: {e}")

    if success:
        await update.message.reply_text(
            f"‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}!\n"
            f"üí≥ –°—É–º–∞ –¥–æ —Å–ø–ª–∞—Ç–∏: {total_uah} UAH\n\n"
            f"–ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."
        )
    else:
        await update.message.reply_text(
            "‚ùå –ù–∞ –∂–∞–ª—å, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        )

# --- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê ---
def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞...")
    
    if not BOT_TOKEN:
        logger.critical("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return

    if not DATABASE_URL:
        logger.critical("DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return

    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("order", order_command))
    application.add_handler(CommandHandler("question", question_command))
    application.add_handler(CommandHandler("channel", channel_command))
    application.add_handler(CommandHandler("stop", stop_conversation))
    application.add_handler(CommandHandler("pay", pay_command))
    # ... (–¥–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞: stats, chats, orders, questions, history, dialog, clear)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(button_handler))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
