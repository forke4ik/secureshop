import logging
import os
import asyncio
import threading
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.error import Conflict
from flask import Flask, request, jsonify

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', '8181378677:AAFullvwrNhPJMi_HxgC75qSEKWdKOtCpbw')
OWNER_ID_1 = 7106925462  # @HiGki2pYYY
OWNER_ID_2 = 6279578957  # @oc33t
PORT = int(os.getenv('PORT', 8443))
WEBHOOK_URL = os.getenv('WEBHOOK_URL', 'https://secureshop-3obw.onrender.com')
PING_INTERVAL = int(os.getenv('PING_INTERVAL', 840))  # 14 –º–∏–Ω—É—Ç
USE_POLLING = os.getenv('USE_POLLING', 'true').lower() == 'true'

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
active_conversations = {}
owner_client_map = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
telegram_app = None
flask_app = Flask(__name__)
bot_running = False

class TelegramBot:
    # --- –ö–∞—Ä—Ç–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ---
    ORDER_DETAILS_MAP = {
        'youtube_6m_450': "‚ñ∂Ô∏è YouTube Premium | 6 –º—ñ—Å—è—Ü—ñ–≤ - 450 UAH",
        'youtube_12m_750': "‚ñ∂Ô∏è YouTube Premium | 12 –º—ñ—Å—è—Ü—ñ–≤ - 750 UAH",
        'chatgpt_1m_650': "üí¨ ChatGPT Plus | 1 –º—ñ—Å—è—Ü—å - 650 UAH",
        'spotify_ind_1m_125': "üéß Spotify Premium Individual | 1 –º—ñ—Å—è—Ü—å - 125 UAH",
        'spotify_ind_3m_350': "üéß Spotify Premium Individual | 3 –º—ñ—Å—è—Ü—ñ - 350 UAH",
        'spotify_ind_6m_550': "üéß Spotify Premium Individual | 6 –º—ñ—Å—è—Ü—ñ–≤ - 550 UAH",
        'spotify_ind_12m_900': "üéß Spotify Premium Individual | 12 –º—ñ—Å—è—Ü—ñ–≤ - 900 UAH",
        'spotify_fam_1m_200': "üéß Spotify Premium Family | 1 –º—ñ—Å—è—Ü—å - 200 UAH",
        'spotify_fam_3m_569': "üéß Spotify Premium Family | 3 –º—ñ—Å—è—Ü—ñ - 569 UAH",
        'spotify_fam_6m_1100': "üéß Spotify Premium Family | 6 –º—ñ—Å—è—Ü—ñ–≤ - 1100 UAH",
        'spotify_fam_12m_2100': "üéß Spotify Premium Family | 12 –º—ñ—Å—è—Ü—ñ–≤ - 2100 UAH",
        'discord_basic_1m_100': "üéÆ Discord Nitro Basic | 1 –º—ñ—Å—è—Ü—å - 100 UAH",
        'discord_basic_12m_900': "üéÆ Discord Nitro Basic | 12 –º—ñ—Å—è—Ü—ñ–≤ - 900 UAH",
        'discord_full_1m_170': "üéÆ Discord Nitro Full | 1 –º—ñ—Å—è—Ü—å - 170 UAH",
        'discord_full_12m_1700': "üéÆ Discord Nitro Full | 12 –º—ñ—Å—è—Ü—ñ–≤ - 1700 UAH",
    }

    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
        self.ping_running = False
        self.initialized = False

    # --- –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---
    def get_start_keyboard(self):
        keyboard = [
            [InlineKeyboardButton("üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data='show_services')],
            [InlineKeyboardButton("‚ùì –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
        ]
        return InlineKeyboardMarkup(keyboard)

    def get_services_keyboard(self):
        keyboard = [
            [InlineKeyboardButton("‚ñ∂Ô∏è YouTube Premium", callback_data='service_youtube'),
             InlineKeyboardButton("üí¨ ChatGPT Plus", callback_data='service_chatgpt')],
            [InlineKeyboardButton("üéß Spotify Premium", callback_data='service_spotify'),
             InlineKeyboardButton("üéÆ Discord Nitro", callback_data='service_discord')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_start')]
        ]
        return InlineKeyboardMarkup(keyboard)

    def get_youtube_keyboard(self):
        keyboard = [
            [InlineKeyboardButton("6 –º—ñ—Å—è—Ü—ñ–≤ - 450 UAH", callback_data='order_youtube_6m_450')],
            [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 750 UAH", callback_data='order_youtube_12m_750')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ø–æ—Å–ª—É–≥", callback_data='show_services')]
        ]
        return InlineKeyboardMarkup(keyboard)

    def get_chatgpt_keyboard(self):
        keyboard = [
            [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 650 UAH", callback_data='order_chatgpt_1m_650')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ø–æ—Å–ª—É–≥", callback_data='show_services')]
        ]
        return InlineKeyboardMarkup(keyboard)

    def get_spotify_keyboard(self):
        keyboard = [
            [InlineKeyboardButton("üë§ Premium Individual", callback_data='spotify_individual')],
            [InlineKeyboardButton("üë• Premium Family", callback_data='spotify_family')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ø–æ—Å–ª—É–≥", callback_data='show_services')]
        ]
        return InlineKeyboardMarkup(keyboard)

    def get_spotify_individual_keyboard(self):
        keyboard = [
            [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 125 UAH", callback_data='order_spotify_ind_1m_125')],
            [InlineKeyboardButton("3 –º—ñ—Å—è—Ü—ñ - 350 UAH", callback_data='order_spotify_ind_3m_350')],
            [InlineKeyboardButton("6 –º—ñ—Å—è—Ü—ñ–≤ - 550 UAH", callback_data='order_spotify_ind_6m_550')],
            [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 900 UAH", callback_data='order_spotify_ind_12m_900')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ Spotify", callback_data='service_spotify')]
        ]
        return InlineKeyboardMarkup(keyboard)

    def get_spotify_family_keyboard(self):
        keyboard = [
            [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 200 UAH", callback_data='order_spotify_fam_1m_200')],
            [InlineKeyboardButton("3 –º—ñ—Å—è—Ü—ñ - 569 UAH", callback_data='order_spotify_fam_3m_569')],
            [InlineKeyboardButton("6 –º—ñ—Å—è—Ü—ñ–≤ - 1100 UAH", callback_data='order_spotify_fam_6m_1100')],
            [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 2100 UAH", callback_data='order_spotify_fam_12m_2100')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ Spotify", callback_data='service_spotify')]
        ]
        return InlineKeyboardMarkup(keyboard)

    def get_discord_keyboard(self):
        keyboard = [
            [InlineKeyboardButton("‚≠ê Nitro Basic", callback_data='discord_basic')],
            [InlineKeyboardButton("‚ú® Nitro Full", callback_data='discord_full')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ø–æ—Å–ª—É–≥", callback_data='show_services')]
        ]
        return InlineKeyboardMarkup(keyboard)

    def get_discord_basic_keyboard(self):
        keyboard = [
            [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 100 UAH", callback_data='order_discord_basic_1m_100')],
            [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 900 UAH", callback_data='order_discord_basic_12m_900')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ Discord", callback_data='service_discord')]
        ]
        return InlineKeyboardMarkup(keyboard)

    def get_discord_full_keyboard(self):
        keyboard = [
            [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 170 UAH", callback_data='order_discord_full_1m_170')],
            [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 1700 UAH", callback_data='order_discord_full_12m_1700')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ Discord", callback_data='service_discord')]
        ]
        return InlineKeyboardMarkup(keyboard)

    def setup_handlers(self):
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("stop", self.stop_conversation))
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_error_handler(self.error_handler)

    async def initialize(self):
        if self.initialized:
            return
        try:
            await self.application.initialize()
            self.initialized = True
            logger.info("‚úÖ Telegram Application –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Application: {e}")
            raise

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        if user.id in [OWNER_ID_1, OWNER_ID_2]:
            owner_name = "@HiGki2pYYY" if user.id == OWNER_ID_1 else "@oc33t"
            await update.message.reply_text(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}! ({owner_name})\n–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å –º–∞–≥–∞–∑–∏–Ω–∞.")
            return

        welcome_message = f"–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, {user.first_name}! üëã\n\n–Ø –±–æ—Ç-–ø–æ–º—ñ—á–Ω–∏–∫ –Ω–∞—à–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:"
        await update.message.reply_text(welcome_message.strip(), reply_markup=self.get_start_keyboard())

    async def stop_conversation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        owner_id = update.effective_user.id
        if owner_id not in [OWNER_ID_1, OWNER_ID_2] or owner_id not in owner_client_map:
            if owner_id in [OWNER_ID_1, OWNER_ID_2]:
                await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
            return

        client_id = owner_client_map.pop(owner_id)
        client_info = active_conversations.pop(client_id, {}).get('user_info')

        try:
            await context.bot.send_message(
                chat_id=client_id,
                text="–î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫–æ–º –º–∞–≥–∞–∑–∏–Ω—É. –Ø–∫—â–æ —É –≤–∞—Å —î –Ω–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ—é /start."
            )
            if client_info:
                await update.message.reply_text(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º {client_info.first_name}.")
            else:
                await update.message.reply_text(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º ID {client_id}.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ {client_id}: {e}")
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞), –Ω–æ –¥–∏–∞–ª–æ–≥ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ.")
    
    async def setup_question_conversation(self, query: CallbackQuery):
        user_id = query.from_user.id
        active_conversations[user_id] = {
            'type': 'question',
            'user_info': query.from_user,
            'assigned_owner': None
        }
        await query.edit_message_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. –Ø –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫—É –º–∞–≥–∞–∑–∏–Ω—É, —ñ –≤—ñ–Ω –Ω–µ–∑–∞–±–∞—Ä–æ–º –≤–∞–º –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å."
        )

    async def initiate_order_flow(self, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
        order_key = query.data.replace('order_', '')
        order_details = self.ORDER_DETAILS_MAP.get(order_key)

        if not order_details:
            await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=self.get_services_keyboard())
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á –∑–∞–∫–∞–∑–∞: {order_key}")
            return

        user_id = query.from_user.id
        user_info = query.from_user

        active_conversations[user_id] = {
            'type': 'order',
            'user_info': user_info,
            'assigned_owner': None
        }

        assigned_owner = OWNER_ID_1
        active_conversations[user_id]['assigned_owner'] = assigned_owner
        owner_client_map[assigned_owner] = user_id
        owner_name = "@HiGki2pYYY" if assigned_owner == OWNER_ID_1 else "@oc33t"

        forward_message = f"""
üõí **–ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø**

**üì¶ –¢–æ–≤–∞—Ä:** {order_details}

**üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:** {user_info.first_name}
**üì± Username:** @{user_info.username if user_info.username else '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}
**üÜî ID:** {user_info.id}

---
*–ö–ª—ñ—î–Ω—Ç –æ—á—ñ–∫—É—î –Ω–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –æ–ø–ª–∞—Ç–∏. –î–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ü–µ–π —á–∞—Ç.*
*–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /stop.*
*–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–æ: {owner_name}*
        """
        
        keyboard = [[InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–¥–∞—Ç–∏ —ñ–Ω—à–æ–º—É –∑–∞—Å–Ω–æ–≤–Ω–∏–∫—É", callback_data=f'transfer_{user_id}')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_message(chat_id=assigned_owner, text=forward_message.strip(), reply_markup=reply_markup, parse_mode='Markdown')
        await query.edit_message_text(
            "‚úÖ **–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ!**\n\n"
            "–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–∂–µ –æ—Ç—Ä–∏–º–∞–≤ –≤–∞—à –∑–∞–ø–∏—Ç —ñ –Ω–µ–∑–∞–±–∞—Ä–æ–º –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –æ–ø–ª–∞—Ç–∏ —Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó.\n\n"
            "–Ø–∫—â–æ —É –≤–∞—Å —î –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è, –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ —ó—Ö –ø—Ä—è–º–æ —Å—é–¥–∏."
        , parse_mode='Markdown')

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        data = query.data
        user_id = query.from_user.id

        # --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é ---
        if data == 'show_services':
            await query.edit_message_text('üõí –û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä–≤—ñ—Å, —è–∫–∏–π –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:', reply_markup=self.get_services_keyboard())
        elif data == 'back_to_start':
            user = query.from_user
            welcome_message = f"–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, {user.first_name}! üëã\n\n–Ø –±–æ—Ç-–ø–æ–º—ñ—á–Ω–∏–∫ –Ω–∞—à–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:"
            await query.edit_message_text(welcome_message.strip(), reply_markup=self.get_start_keyboard())
        elif data == 'service_youtube':
            await query.edit_message_text('‚ñ∂Ô∏è **YouTube Premium**\n–û–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π —Ç–µ—Ä–º—ñ–Ω –ø—ñ–¥–ø–∏—Å–∫–∏:', reply_markup=self.get_youtube_keyboard(), parse_mode='Markdown')
        elif data == 'service_chatgpt':
            await query.edit_message_text('üí¨ **ChatGPT Plus**\n–û–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π —Ç–µ—Ä–º—ñ–Ω –ø—ñ–¥–ø–∏—Å–∫–∏:', reply_markup=self.get_chatgpt_keyboard(), parse_mode='Markdown')
        elif data == 'service_spotify':
            await query.edit_message_text('üéß **Spotify Premium**\n–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—ñ–¥–ø–∏—Å–∫–∏:', reply_markup=self.get_spotify_keyboard(), parse_mode='Markdown')
        elif data == 'service_discord':
            await query.edit_message_text('üéÆ **Discord Nitro**\n–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—ñ–¥–ø–∏—Å–∫–∏:', reply_markup=self.get_discord_keyboard(), parse_mode='Markdown')
        elif data == 'spotify_individual':
            await query.edit_message_text('üë§ **Spotify Premium Individual**\n–û–±–µ—Ä—ñ—Ç—å —Ç–µ—Ä–º—ñ–Ω:', reply_markup=self.get_spotify_individual_keyboard(), parse_mode='Markdown')
        elif data == 'spotify_family':
            await query.edit_message_text('üë• **Spotify Premium Family**\n–û–±–µ—Ä—ñ—Ç—å —Ç–µ—Ä–º—ñ–Ω:', reply_markup=self.get_spotify_family_keyboard(), parse_mode='Markdown')
        elif data == 'discord_basic':
            await query.edit_message_text('‚≠ê **Discord Nitro Basic**\n–û–±–µ—Ä—ñ—Ç—å —Ç–µ—Ä–º—ñ–Ω:', reply_markup=self.get_discord_basic_keyboard(), parse_mode='Markdown')
        elif data == 'discord_full':
            await query.edit_message_text('‚ú® **Discord Nitro Full**\n–û–±–µ—Ä—ñ—Ç—å —Ç–µ—Ä–º—ñ–Ω:', reply_markup=self.get_discord_full_keyboard(), parse_mode='Markdown')

        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π ---
        elif data == 'question':
            await self.setup_question_conversation(query)
        elif data.startswith('order_'):
            await self.initiate_order_flow(query, context)
        elif data.startswith('transfer_'):
            client_id = int(data.split('_')[1])
            current_owner = user_id
            other_owner = OWNER_ID_2 if current_owner == OWNER_ID_1 else OWNER_ID_1
            other_owner_name = "@oc33t" if other_owner == OWNER_ID_2 else "@HiGki2pYYY"
            
            if client_id in active_conversations:
                active_conversations[client_id]['assigned_owner'] = other_owner
                owner_client_map[other_owner] = client_id
                if current_owner in owner_client_map:
                    del owner_client_map[current_owner]
                
                client_info = active_conversations[client_id]['user_info']
                await query.edit_message_text(f"‚úÖ –ß–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º {client_info.first_name} –ø–µ—Ä–µ–¥–∞–Ω {other_owner_name}")
                await context.bot.send_message(
                    chat_id=other_owner,
                    text=f"üì® –í–∞–º –ø–µ—Ä–µ–¥–∞–Ω —á–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º:\n\n"
                         f"üë§ {client_info.first_name} (@{client_info.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'})\n"
                         f"üÜî ID: {client_info.id}\n\n"
                         f"–î–ª—è –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop"
                )

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id in [OWNER_ID_1, OWNER_ID_2]:
            await self.handle_owner_message(update, context)
            return
        
        if user_id in active_conversations:
            await self.forward_to_owner(update, context)
        else:
            await update.message.reply_text(
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏.",
                reply_markup=self.get_start_keyboard()
            )

    async def forward_to_owner(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user_info = active_conversations[user_id]['user_info']
        conversation_type = active_conversations[user_id]['type']
        
        assigned_owner = active_conversations[user_id].get('assigned_owner')
        if not assigned_owner:
            assigned_owner = OWNER_ID_1
            active_conversations[user_id]['assigned_owner'] = assigned_owner
        
        owner_client_map[assigned_owner] = user_id
        type_emoji = "üõí" if conversation_type == 'order' else "‚ùì"
        type_text = "–ó–ê–ú–û–í–õ–ï–ù–ù–Ø" if conversation_type == 'order' else "–ó–ê–ü–ò–¢–ê–ù–ù–Ø"
        
        forward_message = f"""
{type_emoji} –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ ({type_text}):

üë§ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:** {user_info.first_name}
**üì± Username:** @{user_info.username if user_info.username else '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}
**üÜî ID:** {user_info.id}

**üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:**
{update.message.text}
        """
        await context.bot.send_message(chat_id=assigned_owner, text=forward_message.strip(), parse_mode='Markdown')
        await update.message.reply_text("‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥–∞–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")

    async def handle_owner_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        owner_id = update.effective_user.id
        if owner_id not in owner_client_map:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return

        client_id = owner_client_map[owner_id]
        if client_id not in active_conversations:
            del owner_client_map[owner_id]
            await update.message.reply_text("–î–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        try:
            await context.bot.send_message(
                chat_id=client_id,
                text=f"üì© **–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –º–∞–≥–∞–∑–∏–Ω—É:**\n\n{update.message.text}",
                parse_mode='Markdown'
            )
            client_info = active_conversations[client_id]['user_info']
            await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {client_info.first_name}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {client_id}: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")

    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        logger.warning(f'Update {update} caused error {context.error}')

    def start_ping_service(self):
        if not self.ping_running:
            self.ping_running = True
            ping_thread = threading.Thread(target=self.ping_loop)
            ping_thread.daemon = True
            ping_thread.start()
            logger.info("üîÑ –ü–∏–Ω–≥–æ–≤–∞–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞")

    def ping_loop(self):
        import requests
        ping_url = f"{WEBHOOK_URL}/ping"
        while self.ping_running:
            try:
                response = requests.get(ping_url, timeout=10)
                if response.status_code == 200:
                    logger.info("‚úÖ Ping —É—Å–ø–µ—à–µ–Ω - —Å–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–µ–Ω")
                else:
                    logger.warning(f"‚ö†Ô∏è Ping –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
            except requests.exceptions.RequestException as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ ping: {e}")
            time.sleep(PING_INTERVAL)

bot_instance = TelegramBot()

@flask_app.route('/ping', methods=['GET'])
def ping():
    return jsonify({'status': 'alive', 'message': 'Bot is running'}), 200

@flask_app.route('/health', methods=['GET'])
def health():
    return jsonify({
        'status': 'healthy',
        'active_conversations': len(active_conversations),
        'owner_client_map': len(owner_client_map),
        'initialized': bot_instance.initialized if bot_instance else False,
        'bot_running': bot_running,
        'mode': 'polling' if USE_POLLING else 'webhook'
    }), 200

@flask_app.route(f'/{BOT_TOKEN}', methods=['POST'])
async def webhook():
    if USE_POLLING:
        return jsonify({'error': 'Webhook disabled in polling mode'}), 400
    if not bot_instance.initialized:
        return jsonify({'error': 'Bot not initialized'}), 500
    try:
        update = Update.de_json(request.get_json(force=True), bot_instance.application.bot)
        await bot_instance.application.process_update(update)
        return '', 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return jsonify({'error': str(e)}), 500

@flask_app.route('/', methods=['GET'])
def index():
    return jsonify({'message': 'Telegram Bot SecureShop –∞–∫—Ç–∏–≤–µ–Ω'}), 200

async def setup_webhook_or_polling():
    global telegram_app, bot_running
    
    await bot_instance.initialize()
    telegram_app = bot_instance.application
    
    if USE_POLLING:
        await telegram_app.bot.delete_webhook()
        logger.info("üóëÔ∏è Webhook —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling —Ä–µ–∂–∏–º")
        bot_running = True
        logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É –≤ —Ä–µ–∂–∏–º–µ polling...")
        # –ó–∞–ø—É—Å–∫ polling –±—É–¥–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫
        await telegram_app.run_polling()
    else:
        webhook_url = f"{WEBHOOK_URL}/{BOT_TOKEN}"
        await telegram_app.bot.set_webhook(webhook_url)
        bot_running = True
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ webhook")

def run_bot_in_thread():
    """–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å Flask."""
    logger.info("–ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è Telegram –±–æ—Ç–∞...")
    asyncio.run(setup_webhook_or_polling())

def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ SecureShop Telegram Bot...")
    logger.info(f"üîë BOT_TOKEN: {BOT_TOKEN[:10]}...")
    logger.info(f"üîÑ –†–ï–ñ–ò–ú: {'Polling' if USE_POLLING else 'Webhook'}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Polling
    if USE_POLLING:
        bot_thread = threading.Thread(target=run_bot_in_thread)
        bot_thread.daemon = True
        bot_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∏–Ω–≥–æ–≤–∞–ª–∫—É, –µ—Å–ª–∏ URL –∑–∞–¥–∞–Ω
    if WEBHOOK_URL and not WEBHOOK_URL.isspace():
        bot_instance.start_ping_service()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    # –î–ª—è webhook —Ä–µ–∂–∏–º–∞, –±–æ—Ç –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ Flask
    if not USE_POLLING:
        # –í —Ä–µ–∂–∏–º–µ webhook, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º Flask
        asyncio.run(setup_webhook_or_polling())
    
    logger.info("üåê –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞...")
    flask_app.run(host='0.0.0.0', port=PORT, debug=False, use_reloader=False)


if __name__ == '__main__':
    main()
