import logging
import os
import asyncio
import threading
import time
import requests
from flask import Flask, request, jsonify
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.error import Conflict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', 'YOUR_TOKEN_HERE')
OWNER_ID_1 = 7106925462  # @HiGki2pYYY
OWNER_ID_2 = 6279578957  # @oc33t
PORT = int(os.getenv('PORT', 8443))
WEBHOOK_URL = os.getenv('WEBHOOK_URL', 'https://yourdomain.com')
PING_INTERVAL = int(os.getenv('PING_INTERVAL', 840))  # —Å–µ–∫
USE_POLLING = os.getenv('USE_POLLING', 'true').lower() == 'true'

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
active_conversations = {}
owner_client_map = {}

# Flask App
flask_app = Flask(__name__)
flask_app.start_time = time.time()
bot_running = False
bot_lock = threading.Lock()

class TelegramBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
        self.initialized = False

    def setup_handlers(self):
        self.application.add_handler(CommandHandler('start', self.start))
        self.application.add_handler(CommandHandler('stop', self.stop_conversation))
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_error_handler(self.error_handler)

    async def initialize(self):
        await self.application.initialize()
        self.initialized = True
        logger.info('‚ú® Bot initialized')

    async def start_polling(self):
        try:
            await self.application.start()
            await self.application.updater.start_polling()
            logger.info('üöÄ Polling started')
        except Conflict as e:
            logger.error(f'‚ùó Conflict: {e}')
            await asyncio.sleep(15)
            await self.start_polling()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        # –í—Ö–æ–¥ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
        if user.id in [OWNER_ID_1, OWNER_ID_2]:
            name = '@HiGki2pYYY' if user.id == OWNER_ID_1 else '@oc33t'
            return await update.message.reply_text(f'–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, {user.first_name}! ({name}) –í–∏ –≤–≤—ñ–π—à–ª–∏ —è–∫ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫ –º–∞–≥–∞–∑–∏–Ω—É.')

        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton('üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data='menu_order')],
            [InlineKeyboardButton('‚ùì –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è', callback_data='question')]
        ]
        await update.message.reply_text(
            f'–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, {user.first_name}! üëã\n–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def stop_conversation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        owner_id = update.effective_user.id
        if owner_id not in [OWNER_ID_1, OWNER_ID_2]:
            return
        if owner_id not in owner_client_map:
            return await update.message.reply_text('–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É.')
        client_id = owner_client_map.pop(owner_id)
        active_conversations.pop(client_id, None)
        await context.bot.send_message(client_id, '–î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤.')
        await update.message.reply_text('‚úÖ –î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.')

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        data = query.data
        user = query.from_user
        user_id = user.id

        # –ù–∞–∑–∞–¥
        if data == 'back_main':
            return await self.start(update, context)

        # –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
        if data == 'question':
            active_conversations[user_id] = {'type': 'question'}
            return await query.edit_message_text('üí¨ –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è, —ñ —è –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.')

        # –ú–µ–Ω—é –∑–∞–º–æ–≤–ª–µ–Ω—å
        if data == 'menu_order':
            kb = [
                [InlineKeyboardButton('‚ñ∂Ô∏è YouTube', callback_data='svc_youtube')],
                [InlineKeyboardButton('ü§ñ ChatGPT', callback_data='svc_chatgpt')],
                [InlineKeyboardButton('üéß Spotify', callback_data='svc_spotify')],
                [InlineKeyboardButton('üí¨ Discord', callback_data='svc_discord')],
                [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_main')]
            ]
            return await query.edit_message_text('üõí –û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä–≤—ñ—Å –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', reply_markup=InlineKeyboardMarkup(kb))

        # YouTube
        if data == 'svc_youtube':
            kb = [
                [InlineKeyboardButton('6 –º—ñ—Å—è—Ü—ñ–≤ ‚Äì 450 UAH', callback_data='opt_YouTube_6–º—ñ—Å—è—Ü—ñ–≤_450UAH')],
                [InlineKeyboardButton('12 –º—ñ—Å—è—Ü—ñ–≤ ‚Äì 750 UAH', callback_data='opt_YouTube_12–º—ñ—Å—è—Ü—ñ–≤_750UAH')],
                [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='menu_order')]
            ]
            return await query.edit_message_text('üì∫ YouTube ‚Äì –æ–±–µ—Ä—ñ—Ç—å —Ç–µ—Ä–º—ñ–Ω:', reply_markup=InlineKeyboardMarkup(kb))

        # ChatGPT
        if data == 'svc_chatgpt':
            kb = [
                [InlineKeyboardButton('1 –º—ñ—Å—è—Ü—å ‚Äì 650 UAH', callback_data='opt_ChatGPT_1–º—ñ—Å—è—Ü—å_650UAH')],
                [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='menu_order')]
            ]
            return await query.edit_message_text('ü§ñ ChatGPT ‚Äì –æ–±–µ—Ä—ñ—Ç—å —Ç–µ—Ä–º—ñ–Ω:', reply_markup=InlineKeyboardMarkup(kb))

        # Spotify
        if data == 'svc_spotify':
            kb = []
            # Individual
            for term, price in [('1 –º—ñ—Å—è—Ü—å', '125 UAH'), ('3 –º—ñ—Å—è—Ü—ñ', '350 UAH'), ('6 –º—ñ—Å—è—Ü—ñ–≤', '550 UAH'), ('12 –º—ñ—Å—è—Ü—ñ–≤', '900 UAH')]:
                kb.append([InlineKeyboardButton(f'Premium individual ‚Äì {term} ‚Äì {price}', callback_data=f'opt_Spotify_ind_{term}_{price}')])
            # Family
            for term, price in [('1 –º—ñ—Å—è—Ü—å', '200 UAH'), ('3 –º—ñ—Å—è—Ü—ñ', '569 UAH'), ('6 –º—ñ—Å—è—Ü—ñ–≤', '1100 UAH'), ('12 –º—ñ—Å—è—Ü—ñ–≤', '2100 UAH')]:
                kb.append([InlineKeyboardButton(f'Premium family ‚Äì {term} ‚Äì {price}', callback_data=f'opt_Spotify_fam_{term}_{price}')])
            kb.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='menu_order')])
            return await query.edit_message_text('üéß Spotify ‚Äì –æ–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ:', reply_markup=InlineKeyboardMarkup(kb))

        # Discord
        if data == 'svc_discord':
            kb = []
            for plan_key, term, price in [('basic', '1 –º—ñ—Å—è—Ü—å', '100 UAH'), ('basic', '12 –º—ñ—Å—è—Ü—ñ–≤', '900 UAH'), ('full', '1 –º—ñ—Å—è—Ü—å', '170 UAH'), ('full', '12 –º—ñ—Å—è—Ü—ñ–≤', '1700 UAH')]:
                name = 'Nitro basic' if plan_key == 'basic' else 'Nitro full'
                kb.append([InlineKeyboardButton(f'{name} ‚Äì {term} ‚Äì {price}', callback_data=f'opt_Discord_{plan_key}_{term}_{price}')])
            kb.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='menu_order')])
            return await query.edit_message_text('üí¨ Discord ‚Äì –æ–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ:', reply_markup=InlineKeyboardMarkup(kb))

        # –í—ã–±–æ—Ä –æ–ø—Ü–∏–∏
        if data.startswith('opt_'):
            _, svc, *rest = data.split('_')
            if svc in ['YouTube', 'ChatGPT']:
                term, price = rest
n            else:
                plan_key = rest[0]
                term, price = rest[1], rest[2]
                svc = 'Spotify' if 'Spotify' in data else 'Discord'
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            entry = {'type': 'order', 'service': svc, 'plan': plan_key if svc not in ['YouTube','ChatGPT'] else '', 'term': term, 'price': price}
            active_conversations[user.id] = entry
            return await query.edit_message_text(
                f"‚úÖ –ó–∞–º–æ–≤–∏—Ç–∏ {svc} {entry.get('plan','')} {term} ‚Äì {price}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('üìù –ó–∞–º–æ–≤–∏—Ç–∏', callback_data='order_confirm')]])
            )

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        if data == 'order_confirm':
            order = active_conversations.get(user.id, {})
            # –ö–ª–∏–µ–Ω—Ç—É
            await query.edit_message_text(
                f"üìù –í–∏ –æ–±—Ä–∞–ª–∏ {order.get('service')} {order.get('plan','')} {order.get('term')} ‚Äì {order.get('price')}\n"
                "–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—ó –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, —ñ –º–∏ –∑–≤‚Äô—è–∂–µ–º–æ—Å—è!"
            )
            # –ê–¥–º–∏–Ω–∞–º
            summary = (
                f"üì¶ –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!\n"
                f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.full_name} (@{user.username or '–Ω–µ–º–∞—î'}) [ID: {user.id}]\n"
                f"–°–µ—Ä–≤—ñ—Å: {order.get('service')} {order.get('plan','')} {order.get('term')} ‚Äì {order.get('price')}"
            )
            for owner in [OWNER_ID_1, OWNER_ID_2]:
                await context.bot.send_message(chat_id=owner, text=summary)
            return

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        if user.id not in active_conversations:
            return await self.start(update, context)
        conv = active_conversations.pop(user.id)
        text = update.message.text.strip()
        if conv['type'] == 'question':
            summary = f"‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ {user.full_name} (@{user.username or '–Ω–µ–º–∞—î'}) [ID: {user.id}]: {text}"
            for owner in [OWNER_ID_1, OWNER_ID_2]:
                await context.bot.send_message(chat_id=owner, text=summary)
            return await update.message.reply_text('–î—è–∫—É—î–º–æ! –í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó.')
        if conv['type'] == 'order':
            summary = (
                f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç–∏ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ {user.full_name} (@{user.username or '–Ω–µ–º–∞—î'}) [ID: {user.id}]:\n"
                f"–°–µ—Ä–≤—ñ—Å: {conv.get('service')} {conv.get('plan','')} {conv.get('term')} ‚Äì {conv.get('price')}\n"
                f"–ö–æ–Ω—Ç–∞–∫—Ç–∏: {text}"
            )
            for owner in [OWNER_ID_1, OWNER_ID_2]:
                await context.bot.send_message(chat_id=owner, text=summary)
            return await update.message.reply_text("–î—è–∫—É—î–º–æ! –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        logger.error(f"Error: {context.error}")

    def start_ping_service(self):
        def ping_loop():
            while bot_running:
                try:
                    requests.get(f"{WEBHOOK_URL}/ping")
                except:
                    pass
                time.sleep(PING_INTERVAL)
        threading.Thread(target=ping_loop, daemon=True).start()

async def start_bot():
    global bot_running
    bot = TelegramBot()
    await bot.initialize()
    if USE_POLLING:
        await bot.start_polling()
        bot_running = True
        bot.start_ping_service()
        asyncio.get_event_loop().run_forever()
    else:
        await bot.application.bot.set_webhook(f"{WEBHOOK_URL}/{BOT_TOKEN}")
        bot_running = True
        bot.start_ping_service()
        flask_app.run(host='0.0.0.0', port=PORT, debug=False, threaded=True)

@flask_app.route('/ping')
def ping():
    return jsonify(status='alive', uptime=time.time() - flask_app.start_time)

@flask_app.route('/')
def index():
    return jsonify(status='running')

if __name__ == '__main__':
    asyncio.run(start_bot())
