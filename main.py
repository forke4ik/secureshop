import logging
import os
import threading
import time
import asyncio
from flask import Flask, request, jsonify
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.error import Conflict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', 'YOUR_TOKEN_HERE')
OWNER_ID_1 = 7106925462  # @HiGki2pYYY
OWNER_ID_2 = 6279578957  # @oc33t
PORT = int(os.getenv('PORT', 8443))
WEBHOOK_URL = os.getenv('WEBHOOK_URL', 'https://yourdomain.com')
PING_INTERVAL = int(os.getenv('PING_INTERVAL', 840))
USE_POLLING = os.getenv('USE_POLLING', 'true').lower() == 'true'

# –°–æ—Å—Ç–æ—è–Ω–∏—è
active_conversations = {}
owner_client_map = {}

# Flask App
flask_app = Flask(__name__)
flask_app.start_time = time.time()
bot_running = False
bot_lock = threading.Lock()

class TelegramBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
        self.initialized = False
        self.loop = None

    def setup_handlers(self):
        self.application.add_handler(CommandHandler('start', self.start))
        self.application.add_handler(CommandHandler('stop', self.stop_conversation))
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_error_handler(self.error_handler)

    async def initialize(self):
        await self.application.initialize()
        self.initialized = True
        logger.info('Telegram Application initialized')

    async def start_polling(self):
        try:
            await self.application.start()
            await self.application.updater.start_polling()
            logger.info('Polling started')
        except Conflict as e:
            logger.error(f'Conflict: {e}')
            await asyncio.sleep(15)
            await self.start_polling()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        if user.id in [OWNER_ID_1, OWNER_ID_2]:
            name = '@HiGki2pYYY' if user.id == OWNER_ID_1 else '@oc33t'
            return await update.message.reply_text(f'–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, {user.first_name}! ({name}) –í–∏ –≤–≤—ñ–π—à–ª–∏ —è–∫ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫ –º–∞–≥–∞–∑–∏–Ω—É.')
        keyboard = [
            [InlineKeyboardButton('üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data='menu_order')],
            [InlineKeyboardButton('‚ùì –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è', callback_data='question')]
        ]
        await update.message.reply_text(
            f'–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, {user.first_name}! üëã\n–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def stop_conversation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        owner_id = update.effective_user.id
        if owner_id not in [OWNER_ID_1, OWNER_ID_2]: return
        if owner_id not in owner_client_map:
            return await update.message.reply_text('–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É.')
        client_id = owner_client_map.pop(owner_id)
        active_conversations.pop(client_id, None)
        await context.bot.send_message(client_id, '–î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤.')
        await update.message.reply_text('‚úÖ –î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.')

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query; await query.answer()
        data = query.data; uid = query.from_user.id
        # Back
        if data == 'back_main': return await self.start(update, context)
        # Question
        if data == 'question':
            active_conversations[uid] = {'type':'question'}
            return await query.edit_message_text('üí¨ –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è...')
        # Order menu
        if data == 'menu_order':
            kb = [[InlineKeyboardButton('‚ñ∂Ô∏è YouTube', callback_data='svc_youtube')],
                  [InlineKeyboardButton('ü§ñ ChatGPT', callback_data='svc_chatgpt')],
                  [InlineKeyboardButton('üéß Spotify', callback_data='svc_spotify')],
                  [InlineKeyboardButton('üí¨ Discord', callback_data='svc_discord')],
                  [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_main')]]
            return await query.edit_message_text('üõí –û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä–≤—ñ—Å:', reply_markup=InlineKeyboardMarkup(kb))
        # YouTube
        if data=='svc_youtube':
            kb = [[InlineKeyboardButton('6 –º—ñ—Å—è—Ü—ñ–≤ ‚Äì 450 UAH', callback_data='opt_YouTube_6–º_450')],
                  [InlineKeyboardButton('12 –º—ñ—Å—è—Ü—ñ–≤ ‚Äì 750 UAH', callback_data='opt_YouTube_12–º_750')],
                  [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='menu_order')]]
            return await query.edit_message_text('üì∫ YouTube ‚Äì –æ–±–µ—Ä—ñ—Ç—å —Ç–µ—Ä–º—ñ–Ω:', reply_markup=InlineKeyboardMarkup(kb))
        # ChatGPT
        if data=='svc_chatgpt':
            kb=[[InlineKeyboardButton('1 –º—ñ—Å—è—Ü—å ‚Äì 650 UAH', callback_data='opt_ChatGPT_1–º_650')],
                [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='menu_order')]]
            return await query.edit_message_text('ü§ñ ChatGPT ‚Äì –æ–±–µ—Ä—ñ—Ç—å —Ç–µ—Ä–º—ñ–Ω:', reply_markup=InlineKeyboardMarkup(kb))
        # Spotify
        if data=='svc_spotify':
            kb=[]
            for plan in [('Individual','1 –º—ñ—Å—è—Ü—å','125'),('Individual','3 –º—ñ—Å—è—Ü—ñ','350'),('Individual','6 –º—ñ—Å—è—Ü—ñ–≤','550'),('Individual','12 –º—ñ—Å—è—Ü—ñ–≤','900'),
                         ('Family','1 –º—ñ—Å—è—Ü—å','200'),('Family','3 –º—ñ—Å—è—Ü—ñ','569'),('Family','6 –º—ñ—Å—è—Ü—ñ–≤','1100'),('Family','12 –º—ñ—Å—è—Ü—ñ–≤','2100')]:
                kb.append([InlineKeyboardButton(f'Premium {plan[0]} ‚Äì {plan[1]} ‚Äì {plan[2]} UAH', callback_data=f'opt_Spotify_{plan[0]}_{plan[1]}_{plan[2]}')])
            kb.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='menu_order')])
            return await query.edit_message_text('üéß Spotify ‚Äì –æ–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ:', reply_markup=InlineKeyboardMarkup(kb))
        # Discord
        if data=='svc_discord':
            kb=[]
            for dn in [('Basic','1 –º—ñ—Å—è—Ü—å','100'),('Basic','12 –º—ñ—Å—è—Ü—ñ–≤','900'),('Full','1 –º—ñ—Å—è—Ü—å','170'),('Full','12 –º—ñ—Å—è—Ü—ñ–≤','1700')]:
                kb.append([InlineKeyboardButton(f'Nitro {dn[0]} ‚Äì {dn[1]} ‚Äì {dn[2]} UAH', callback_data=f'opt_Discord_{dn[0]}_{dn[1]}_{dn[2]}')])
            kb.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='menu_order')])
            return await query.edit_message_text('üí¨ Discord ‚Äì –æ–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ:', reply_markup=InlineKeyboardMarkup(kb))
        # Option selected
        if data.startswith('opt_'):
            _, svc, *rest = data.split('_')
            term, price = rest[-2], rest[-1]+' UAH'
            plan = rest[1] if len(rest)==3 else ''
            active_conversations[uid] = {'type':'order','service':svc,'plan':plan,'term':term,'price':price}
            return await query.edit_message_text(f"‚úÖ –ó–∞–º–æ–≤–∏—Ç–∏ {svc} {plan} {term} ‚Äì {price}", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('üìù –ó–∞–º–æ–≤–∏—Ç–∏', callback_data='order_confirm')]]))
        # Confirm
        if data=='order_confirm':
            order=active_conversations[uid]
            await query.edit_message_text(f"üìù –í–∏ –æ–±—Ä–∞–ª–∏ {order['service']} {order['plan']} {order['term']} ‚Äì {order['price']}\n–ù–∞–ø–∏—à—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–∏.")
            summary=f"üì¶ –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {query.from_user.full_name} [ID: {uid}]\n–°–µ—Ä–≤—ñ—Å: {order['service']} {order['plan']} {order['term']} ‚Äì {order['price']}"
            for o in [OWNER_ID_1,OWNER_ID_2]: await context.bot.send_message(o, summary)
            return

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        uid=update.effective_user.id
        if uid in active_conversations:
            conv=active_conversations.pop(uid)
            if conv['type']=='question':
                txt=update.message.text
                sumq=f"‚ùì –ü–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ {update.effective_user.full_name}: {txt}"
                for o in [OWNER_ID_1,OWNER_ID_2]: await context.bot.send_message(o,sumq)
                return await update.message.reply_text('–î—è–∫—É—î–º–æ!')
            if conv['type']=='order':
                cnt=update.message.text
                sumo=f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤—ñ–¥ {update.effective_user.full_name}: {cnt}\n–°–µ—Ä–≤—ñ—Å: {conv['service']} {conv['plan']} {conv['term']} ‚Äì {conv['price']}"
                for o in [OWNER_ID_1,OWNER_ID_2]: await context.bot.send_message(o,sumo)
                return await update.message.reply_text("–î—è–∫—É—î–º–æ! –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è.")
