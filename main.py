# main.py
import logging
import os
import asyncio
import threading
import time
import json
import re
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, User, BotCommandScopeChat
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.error import Conflict
from flask import Flask, request, jsonify, make_response
from flask_cors import CORS
import psycopg
from psycopg.rows import dict_row
import io
from urllib.parse import unquote
import traceback
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
bot_running = False
bot_lock = threading.Lock()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')
OWNER_ID_1 = 7106925462  # @HiGki2pYYY
OWNER_ID_2 = 6279578957  # @oc33t
PORT = int(os.getenv('PORT', 8443))
WEBHOOK_URL = os.getenv('WEBHOOK_URL', 'https://your-app-url.onrender.com')
PING_INTERVAL = int(os.getenv('PING_INTERVAL', 840))  # 14 –º–∏–Ω—É—Ç
USE_POLLING = os.getenv('USE_POLLING', 'true').lower() == 'true'
DATABASE_URL = os.getenv('DATABASE_URL', 'postgresql://user:password@host:port/dbname')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–ª–∞—Ç—ã
NOWPAYMENTS_API_KEY = os.getenv('NOWPAYMENTS_API_KEY')
EXCHANGE_RATE_UAH_TO_USD = float(os.getenv('EXCHANGE_RATE_UAH_TO_USD', 41.26))
CARD_NUMBER = os.getenv('CARD_NUMBER', '5355 2800 4715 6045')

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
AVAILABLE_CURRENCIES = {
    "USDT (Solana)": "usdtsol",
    "USDT (TRC20)": "usdttrc20",
    "ETH": "eth",
    "USDT (Arbitrum)": "usdtarb",
    "USDT (Polygon)": "usdtmatic",
    "USDT (TON)": "usdtton",
    "AVAX (C-Chain)": "avax",
    "APTOS (APT)": "apt"
}

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏
STATS_FILE = "bot_stats.json"

# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î
BUFFER_FLUSH_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç
BUFFER_MAX_SIZE = 50
message_buffer = []
active_conv_buffer = []
user_cache = set()

# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∫—ç—à –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
history_cache = {}

def flush_message_buffer():
    global message_buffer
    if not message_buffer:
        return
    try:
        with psycopg.connect(DATABASE_URL) as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    CREATE TEMP TABLE temp_messages (user_id BIGINT, message TEXT, is_from_user BOOLEAN) ON COMMIT DROP;
                """)
                cur.executemany("""
                    INSERT INTO temp_messages (user_id, message, is_from_user) VALUES (%s, %s, %s);
                """, message_buffer)
                cur.execute("""
                    INSERT INTO messages (user_id, message, is_from_user)
                    SELECT user_id, message, is_from_user FROM temp_messages;
                """)
                conn.commit()
                logger.info(f"‚úÖ –°–±—Ä–æ—à–µ–Ω –±—É—Ñ–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π ({len(message_buffer)} –∑–∞–ø–∏—Å–µ–π)")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –±—É—Ñ–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    finally:
        message_buffer = []

def flush_active_conv_buffer():
    global active_conv_buffer
    if not active_conv_buffer:
        return
    try:
        latest_convs = {}
        for conv in active_conv_buffer:
            user_id = conv[0]
            latest_convs[user_id] = conv

        with psycopg.connect(DATABASE_URL) as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    CREATE TEMP TABLE temp_active_convs (user_id BIGINT, conversation_type VARCHAR(50), assigned_owner BIGINT, last_message TEXT) ON COMMIT DROP;
                """)
                cur.executemany("""
                    INSERT INTO temp_active_convs (user_id, conversation_type, assigned_owner, last_message) VALUES (%s, %s, %s, %s);
                """, list(latest_convs.values()))
                cur.execute("""
                    INSERT INTO active_conversations (user_id, conversation_type, assigned_owner, last_message)
                    SELECT user_id, conversation_type, assigned_owner, last_message FROM temp_active_convs
                    ON CONFLICT (user_id)
                    DO UPDATE SET
                        conversation_type = EXCLUDED.conversation_type,
                        assigned_owner = EXCLUDED.assigned_owner,
                        last_message = EXCLUDED.last_message,
                        updated_at = CURRENT_TIMESTAMP;
                """)
                conn.commit()
                logger.info(f"‚úÖ –°–±—Ä–æ—à–µ–Ω –±—É—Ñ–µ—Ä –¥–∏–∞–ª–æ–≥–æ–≤ ({len(active_conv_buffer)} –∑–∞–ø–∏—Å–µ–π)")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –±—É—Ñ–µ—Ä–∞ –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
    finally:
        active_conv_buffer = []

def buffer_flush_thread():
    """–ü–æ—Ç–æ–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–±—Ä–æ—Å–∞ –±—É—Ñ–µ—Ä–æ–≤ –≤ –ë–î"""
    while True:
        time.sleep(BUFFER_FLUSH_INTERVAL)
        flush_message_buffer()
        flush_active_conv_buffer()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with psycopg.connect(DATABASE_URL) as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    CREATE TABLE IF NOT EXISTS users (
                        id BIGINT PRIMARY KEY,
                        username VARCHAR(255),
                        first_name VARCHAR(255),
                        last_name VARCHAR(255),
                        language_code VARCHAR(10),
                        is_bot BOOLEAN,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    );
                """)
                cur.execute("""
                    CREATE TABLE IF NOT EXISTS messages (
                        id SERIAL PRIMARY KEY,
                        user_id BIGINT REFERENCES users(id),
                        message TEXT,
                        is_from_user BOOLEAN,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    );
                """)
                cur.execute("""
                    CREATE TABLE IF NOT EXISTS active_conversations (
                        user_id BIGINT PRIMARY KEY REFERENCES users(id),
                        conversation_type VARCHAR(50),
                        assigned_owner BIGINT,
                        last_message TEXT,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    );
                """)
                cur.execute("CREATE INDEX IF NOT EXISTS idx_messages_user_id ON messages(user_id);")
                cur.execute("CREATE INDEX IF NOT EXISTS idx_messages_created_at ON messages(created_at);")
                logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

def ensure_user_exists(user):
    """–£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)"""
    if user.id in user_cache:
        return
    try:
        with psycopg.connect(DATABASE_URL) as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    INSERT INTO users (id, username, first_name, last_name, language_code, is_bot)
                    VALUES (%s, %s, %s, %s, %s, %s)
                    ON CONFLICT (id) DO UPDATE SET
                        username = EXCLUDED.username,
                        first_name = EXCLUDED.first_name,
                        last_name = EXCLUDED.last_name,
                        language_code = EXCLUDED.language_code,
                        is_bot = EXCLUDED.is_bot,
                        updated_at = CURRENT_TIMESTAMP;
                """, (user.id, user.username, user.first_name, user.last_name, user.language_code, user.is_bot))
                conn.commit()
                user_cache.add(user.id)
                logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} ({user.id}) –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")

def save_message(user_id, message, is_from_user):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä (—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π)"""
    global message_buffer
    message_buffer.append((user_id, message, is_from_user))
    if len(message_buffer) >= BUFFER_MAX_SIZE:
        flush_message_buffer()

def save_active_conversation(user_id, conversation_type, assigned_owner, last_message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –≤ –±—É—Ñ–µ—Ä (—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π)"""
    global active_conv_buffer
    active_conv_buffer.append((user_id, conversation_type, assigned_owner, last_message))
    if len(active_conv_buffer) >= BUFFER_MAX_SIZE:
        flush_active_conv_buffer()

def delete_active_conversation(user_id):
    """–£–¥–∞–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with psycopg.connect(DATABASE_URL) as conn:
            with conn.cursor() as cur:
                cur.execute("DELETE FROM active_conversations WHERE user_id = %s", (user_id,))
                logger.info(f"üóëÔ∏è –î–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è {user_id}: {e}")

def get_conversation_history(user_id, limit=50):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)"""
    flush_message_buffer()

    cache_key = f"{user_id}_{limit}"
    if cache_key in history_cache:
        return history_cache[cache_key]

    try:
        with psycopg.connect(DATABASE_URL) as conn:
            with conn.cursor(row_factory=dict_row) as cur:
                cur.execute("""
                    SELECT * FROM messages
                    WHERE user_id = %s
                    ORDER BY created_at DESC
                    LIMIT %s
                """, (user_id, limit))
                history = cur.fetchall()
                history_cache[cache_key] = history
                return history
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return []

def get_all_users():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with psycopg.connect(DATABASE_URL) as conn:
            with conn.cursor(row_factory=dict_row) as cur:
                cur.execute("SELECT * FROM users ORDER BY created_at DESC")
                return cur.fetchall()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []

def get_total_users_count():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        with psycopg.connect(DATABASE_URL) as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT COUNT(*) FROM users")
                return cur.fetchone()[0]
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return 0

def clear_all_active_conversations():
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with psycopg.connect(DATABASE_URL) as conn:
            with conn.cursor() as cur:
                cur.execute("DELETE FROM active_conversations")
                deleted_count = cur.rowcount
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –∏–∑ –ë–î")
                return deleted_count
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
        return 0

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
init_db()

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —Å–±—Ä–æ—Å–∞ –±—É—Ñ–µ—Ä–æ–≤
threading.Thread(target=buffer_flush_thread, daemon=True).start()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def load_stats():
    if os.path.exists(STATS_FILE):
        try:
            with open(STATS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    return {
        "total_orders": 0,
        "total_questions": 0,
        "total_users": 0,
        "last_reset": datetime.now().isoformat()
    }

def save_stats():
    try:
        with open(STATS_FILE, 'w', encoding='utf-8') as f:
            json.dump(bot_statistics, f, ensure_ascii=False, indent=4)
        logger.info("üíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def auto_save_loop():
    """–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç"""
    while True:
        time.sleep(600)
        save_stats()
        logger.info("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
bot_statistics = load_stats()

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
active_conversations = {}
owner_client_map = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
telegram_app = None
flask_app = Flask(__name__)
CORS(flask_app)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
def get_uah_amount_from_order_text(order_text: str) -> float:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—É–º–º—É –≤ UAH –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑–∞."""
    match = re.search(r'üí≥ –í—Å—å–æ–≥–æ: (\d+) UAH', order_text)
    if match:
        return float(match.group(1))
    return 0.0

def convert_uah_to_usd(uah_amount: float) -> float:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –∏–∑ UAH –≤ USD –ø–æ –∫—É—Ä—Å—É."""
    return round(uah_amount / EXCHANGE_RATE_UAH_TO_USD, 2)

class TelegramBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
        self.ping_running = False
        self.initialized = False
        self.polling_task = None
        self.loop = None

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("stop", self.stop_conversation))
        self.application.add_handler(CommandHandler("stats", self.show_stats))
        self.application.add_handler(CommandHandler("history", self.show_history))
        self.application.add_handler(CommandHandler("chats", self.show_active_chats))
        self.application.add_handler(CommandHandler("clear", self.clear_active_conversations_command))
        self.application.add_handler(CommandHandler("channel", self.channel_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("pay", self.pay_command))
        self.application.add_handler(CommandHandler("dialog", self.continue_dialog_command))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_handler))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        self.application.add_handler(MessageHandler(filters.Document.ALL, self.handle_document))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫ –æ–ø–ª–∞—Ç—ã
        self.application.add_handler(CallbackQueryHandler(self.payment_callback_handler, pattern='^(pay_|check_payment_status|manual_payment_confirmed|back_to_)'))
        
    async def set_commands_menu(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥"""
        owner_commands = [
            BotCommandScopeChat(chat_id=OWNER_ID_1),
            BotCommandScopeChat(chat_id=OWNER_ID_2)
        ]
        user_commands = [
            BotCommandScopeChat(chat_id='*')
        ]
        try:
            await self.application.bot.set_my_commands([
                ('start', '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é'),
                ('stop', '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥'),
                ('stats', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞'),
                ('history', '–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å'),
                ('chats', '–ê–∫—Ç–∏–≤–Ω—ñ —á–∞—Ç–∏'),
                ('clear', '–û—á–∏—Å—Ç–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ —á–∞—Ç–∏'),
                ('channel', '–ù–∞—à –∫–∞–Ω–∞–ª'),
                ('help', '–î–æ–ø–æ–º–æ–≥–∞'),
                ('dialog', '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥ (–¥–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π)')
            ], scope=owner_commands[0])
            await self.application.bot.set_my_commands([
                ('start', '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é'),
                ('stop', '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥'),
                ('order', '–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'),
                ('question', '–ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è'),
                ('channel', '–ù–∞—à –∫–∞–Ω–∞–ª'),
                ('help', '–î–æ–ø–æ–º–æ–≥–∞'),
                ('pay', '–û–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Å–∞–π—Ç—É')
            ], scope=user_commands[0])
            logger.info("‚úÖ –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥: {e}")

    async def initialize(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            await self.application.initialize()
            await self.set_commands_menu()
            self.initialized = True
            logger.info("‚úÖ Telegram Application –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Application: {e}")
            raise

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ polling —Ä–µ–∂–∏–º–∞"""
        try:
            if self.application.updater.running:
                logger.warning("üõë –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫")
                return
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ polling —Ä–µ–∂–∏–º–∞...")
            await self.application.start()
            await self.application.updater.start_polling(
                poll_interval=1.0,
                timeout=10,
                bootstrap_retries=-1,
                read_timeout=10,
                write_timeout=10,
                connect_timeout=10,
                pool_timeout=10
            )
            logger.info("‚úÖ Polling –∑–∞–ø—É—â–µ–Ω")
        except Conflict as e:
            logger.error(f"üö® –ö–æ–Ω—Ñ–ª–∏–∫—Ç: {e}")
            logger.warning("üïí –û–∂–∏–¥–∞–µ–º 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
            await asyncio.sleep(15)
            await self.start_polling()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ polling: {e}")
            raise

    async def stop_polling(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling"""
        try:
            if self.application.updater and self.application.updater.running:
                await self.application.updater.stop()
            if self.application.running:
                await self.application.stop()
            if self.application.post_init:
                await self.application.shutdown()
            logger.info("üõë Polling –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ polling: {e}")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        ensure_user_exists(user)

        if user.id in [OWNER_ID_1, OWNER_ID_2]:
            owner_name = "@HiGki2pYYY" if user.id == OWNER_ID_1 else "@oc33t"
            await update.message.reply_text(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}! ({owner_name})")
            return

        keyboard = [
            [InlineKeyboardButton("üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data='order')],
            [InlineKeyboardButton("‚ùì –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')],
            [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        welcome_text = f"""üëã –í—ñ—Ç–∞—î–º–æ, {user.first_name}!
ü§ñ –¶–µ –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω—É SecureShop.
–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –∑–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –∑–∞—Å–Ω–æ–≤–Ω–∏–∫–∞–º –º–∞–≥–∞–∑–∏–Ω—É.
–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ üëá"""
        await update.message.reply_text(welcome_text.strip(), reply_markup=reply_markup)

    async def order_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /order - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        keyboard = [
            [InlineKeyboardButton("üí≥ –ü—ñ–¥–ø–∏—Å–∫–∏", callback_data='order_subscriptions')],
            [InlineKeyboardButton("üéÆ –¶–∏—Ñ—Ä–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏", callback_data='order_digital')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        await update.message.reply_text("üì¶ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç–æ–≤–∞—Ä—É:", reply_markup=InlineKeyboardMarkup(keyboard))

    async def question_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /question"""
        user = update.effective_user
        user_id = user.id
        ensure_user_exists(user)

        if user_id in active_conversations:
            await update.message.reply_text(
                "‚ùó –£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥."
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –ø–∏—Å–∞—Ç–∏ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –¥—ñ–∞–ª–æ–∑—ñ –∞–±–æ –∑–∞–≤–µ—Ä—à—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /stop, "
                "—è–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥."
            )
            return

        active_conversations[user_id] = {
            'type': 'question',
            'user_info': user,
            'assigned_owner': None,
            'last_message': "–ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è"
        }
        save_active_conversation(user_id, 'question', None, "–ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è")

        bot_statistics['total_questions'] += 1
        save_stats()

        await update.message.reply_text(
            "üìù –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. –Ø –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫—É –º–∞–≥–∞–∑–∏–Ω—É."
            "–©–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ü–µ–π –¥—ñ–∞–ª–æ–≥ –ø—ñ–∑–Ω—ñ—à–µ, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop."
        )

    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤)"""
        user = update.effective_user
        user_id = user.id
        document = update.message.document
        ensure_user_exists(user)

        if user_id in active_conversations:
            await update.message.reply_text(
                "‚ùó –£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥."
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –ø–∏—Å–∞—Ç–∏ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –¥—ñ–∞–ª–æ–∑—ñ –∞–±–æ –∑–∞–≤–µ—Ä—à—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /stop, "
                "—è–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥."
            )
            return

        if document.mime_type != 'application/json':
            await update.message.reply_text("‚ùå –ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ JSON —Ñ–∞–π–ª–∏.")
            return

        try:
            file = await context.bot.get_file(document.file_id)
            file_bytes = await file.download_as_bytearray()
            file_content = file_bytes.decode('utf-8')
            order_data = json.loads(file_content)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç JSON.")
            return

        if 'items' not in order_data or 'total' not in order_data:
            await update.message.reply_text("‚ùå –£ —Ñ–∞–π–ª—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è (items, total).")
            return

        order_text = "üõçÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Å–∞–π—Ç—É (–∑ —Ñ–∞–π–ª—É):"
        for item in order_data['items']:
            order_text += f"‚ñ´Ô∏è {item['service']} {item.get('plan', '')} ({item['period']}) - {item['price']} UAH"
        order_text += f"\nüí≥ –í—Å—å–æ–≥–æ: {order_data['total']} UAH"

        has_digital = any("–ü—Ä–∏–∫—Ä–∞—Å–∏" in item.get('service', '') for item in order_data['items'])
        conversation_type = 'digital_order' if has_digital else 'subscription_order'

        active_conversations[user_id] = {
            'type': conversation_type,
            'user_info': user,
            'assigned_owner': None,
            'order_details': order_text,
            'last_message': order_text
        }
        save_active_conversation(user_id, conversation_type, None, order_text)

        bot_statistics['total_orders'] += 1
        save_stats()

        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏", callback_data='proceed_to_payment')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        confirmation_text = f"""‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ!
{order_text}
–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é üëá"""
        await update.message.reply_text(confirmation_text.strip(), reply_markup=reply_markup)

    # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        user = query.from_user
        user_id = user.id
        ensure_user_exists(user)

        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if query.data == 'order':
            keyboard = [
                [InlineKeyboardButton("üí≥ –ü—ñ–¥–ø–∏—Å–∫–∏", callback_data='order_subscriptions')],
                [InlineKeyboardButton("üéÆ –¶–∏—Ñ—Ä–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏", callback_data='order_digital')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
            ]
            await query.edit_message_text("üì¶ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç–æ–≤–∞—Ä—É:", reply_markup=InlineKeyboardMarkup(keyboard))

        elif query.data == 'back_to_main':
            keyboard = [
                [InlineKeyboardButton("üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data='order')],
                [InlineKeyboardButton("‚ùì –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')],
                [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
            ]
            await query.edit_message_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=InlineKeyboardMarkup(keyboard))

        # –ú–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫
        elif query.data == 'order_subscriptions':
            keyboard = [
                [InlineKeyboardButton("üí¨ ChatGPT Plus", callback_data='category_chatgpt')],
                [InlineKeyboardButton("üéÆ Discord Nitro", callback_data='category_discord')],
                [InlineKeyboardButton("üéì Duolingo Max", callback_data='category_duolingo')],
                [InlineKeyboardButton("üé® Picsart AI", callback_data='category_picsart')],
                [InlineKeyboardButton("üìä Canva Pro", callback_data='category_canva')],
                [InlineKeyboardButton("üì∫ Netflix", callback_data='category_netflix')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
            ]
            await query.edit_message_text("üí≥ –û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É:", reply_markup=InlineKeyboardMarkup(keyboard))

        # –ú–µ–Ω—é —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        elif query.data == 'order_digital':
            keyboard = [
                [InlineKeyboardButton("üéÆ Discord –ü—Ä–∏–∫—Ä–∞—Å–∏", callback_data='category_discord_decor')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
            ]
            await query.edit_message_text("üéÆ –û–±–µ—Ä—ñ—Ç—å —Ü–∏—Ñ—Ä–æ–≤–∏–π —Ç–æ–≤–∞—Ä:", reply_markup=InlineKeyboardMarkup(keyboard))

        # –ü–æ–¥–º–µ–Ω—é –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...
        # [–ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –ø–æ–¥–º–µ–Ω—é, –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –∏—Å—Ö–æ–¥–Ω–æ–º—É]
        # –î–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤–ª—é —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        elif query.data == 'confirm_order':
            selected_item = context.user_data.get('selected_item')
            if not selected_item:
                await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                return

            items = {
                # –ü–æ–¥–ø–∏—Å–∫–∏
                'chatgpt_1': {'name': "ChatGPT Plus 1 –º—ñ—Å—è—Ü—å", 'price': 650},
                'discord_basic_1': {'name': "Discord Nitro Basic 1 –º—ñ—Å—è—Ü—å", 'price': 170},
                # ... –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã ...
                # –¶–∏—Ñ—Ä–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
                'discord_decor_bzn_6': {'name': "Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ (–ë–µ–∑ Nitro) 6$", 'price': 180},
                # ... –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã ...
            }

            item = items.get(selected_item)
            if not item:
                await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                return

            order_text = f"üõçÔ∏è –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n‚ñ´Ô∏è {item['name']} - {item['price']} UAH\nüí≥ –í—Å—å–æ–≥–æ: {item['price']} UAH"
            conversation_type = 'digital_order' if 'discord_decor' in selected_item else 'subscription_order'

            active_conversations[user_id] = {
                'type': conversation_type,
                'user_info': user,
                'assigned_owner': None,
                'order_details': order_text,
                'last_message': order_text
            }
            save_active_conversation(user_id, conversation_type, None, order_text)

            bot_statistics['total_orders'] += 1
            save_stats()

            await self.forward_order_to_owners(context, user_id, user, order_text)

            uah_amount = get_uah_amount_from_order_text(order_text)
            if uah_amount <= 0:
                await query.edit_message_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Å—É–º—É –¥–ª—è –æ–ø–ª–∞—Ç–∏.")
                return

            usd_amount = convert_uah_to_usd(uah_amount)
            if usd_amount <= 0:
                await query.edit_message_text("‚ùå –°—É–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç–∏ –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∞.")
                return

            context.user_data['payment_amount_usd'] = usd_amount
            context.user_data['order_details_for_payment'] = order_text

            keyboard = [
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é", callback_data='pay_card')],
                [InlineKeyboardButton("ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data='pay_crypto')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')],
                [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                f"üí≥ –û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏ –¥–ª—è —Å—É–º–∏ {usd_amount}$:",
                reply_markup=reply_markup
            )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞ –∏–∑ —Ñ–∞–π–ª–∞
        elif query.data == 'proceed_to_payment':
            if user_id in active_conversations and 'order_details' in active_conversations[user_id]:
                order_text = active_conversations[user_id]['order_details']
                uah_amount = get_uah_amount_from_order_text(order_text)
                if uah_amount <= 0:
                    await query.edit_message_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Å—É–º—É –¥–ª—è –æ–ø–ª–∞—Ç–∏.")
                    return

                usd_amount = convert_uah_to_usd(uah_amount)
                if usd_amount <= 0:
                    await query.edit_message_text("‚ùå –°—É–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç–∏ –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∞.")
                    return

                context.user_data['payment_amount_usd'] = usd_amount
                context.user_data['order_details_for_payment'] = order_text

                keyboard = [
                    [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é", callback_data='pay_card')],
                    [InlineKeyboardButton("ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data='pay_crypto')],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')],
                    [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    f"üí≥ –û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏ –¥–ª—è —Å—É–º–∏ {usd_amount}$:",
                    reply_markup=reply_markup
                )
            else:
                await query.edit_message_text("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")

    # –°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã
    async def payment_callback_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫ –æ–ø–ª–∞—Ç—ã"""
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        data = query.data

        usd_amount = context.user_data.get('payment_amount_usd')
        order_details = context.user_data.get('order_details_for_payment')
        if not usd_amount or not order_details:
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–ª–∞—Ç—ñ–∂ –≤—Ç—Ä–∞—á–µ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return

        # –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π
        if data == 'pay_card':
            keyboard = [
                [InlineKeyboardButton("‚úÖ –û–ø–ª–∞—á–µ–Ω–æ", callback_data='manual_payment_confirmed')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_payment_methods')],
                [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                f"üí≥ –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–¥—ñ–π—Å–Ω—ñ—Ç—å –æ–ø–ª–∞—Ç—É {usd_amount}$ –∫–∞—Ä—Ç–∫–æ—é –Ω–∞ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –º–∞–≥–∞–∑–∏–Ω—É.\n"
                f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏: `{CARD_NUMBER}`\n"
                f"–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '‚úÖ –û–ø–ª–∞—á–µ–Ω–æ'.",
                parse_mode="Markdown",
                reply_markup=reply_markup
            )
            context.user_data['awaiting_manual_payment_confirmation'] = True

        # –í—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        elif data == 'pay_crypto':
            keyboard = []
            for currency_name, currency_code in AVAILABLE_CURRENCIES.items():
                keyboard.append([InlineKeyboardButton(currency_name, callback_data=f'pay_crypto_{currency_code}')])
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_payment_methods')])
            keyboard.append([InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')])
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                f"ü™ô –û–±–µ—Ä—ñ—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç–∏ {usd_amount}$:",
                reply_markup=reply_markup
            )
            context.user_data['awaiting_crypto_currency_selection'] = True

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        elif data.startswith('pay_crypto_'):
            pay_currency = data.split('_')[2]
            currency_name = next((name for name, code in AVAILABLE_CURRENCIES.items() if code == pay_currency), pay_currency)

            try:
                headers = {
                    'Authorization': f'Bearer {NOWPAYMENTS_API_KEY}',
                    'Content-Type': 'application/json'
                }
                payload = {
                    "price_amount": usd_amount,
                    "price_currency": "usd",
                    "pay_currency": pay_currency,
                    "ipn_callback_url": f"{WEBHOOK_URL}/nowpayments_ipn",
                    "order_id": f"order_{user_id}_{int(time.time())}",
                    "order_description": f"–û–ø–ª–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}"
                }
                response = requests.post("https://api.nowpayments.io/v1/invoice", json=payload, headers=headers)
                response.raise_for_status()
                invoice = response.json()

                pay_url = invoice.get("invoice_url", "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è")
                invoice_id = invoice.get("id", "–ù–µ–≤—ñ–¥–æ–º–∏–π ID —Ä–∞—Ö—É–Ω–∫—É")

                context.user_data['nowpayments_invoice_id'] = invoice_id

                keyboard = [
                    [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏", url=pay_url)],
                    [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å", callback_data='check_payment_status')],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_crypto_selection')],
                    [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    f"ü™ô –ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –æ–ø–ª–∞—Ç–∏ {usd_amount}$ –≤ {currency_name}:\n"
                    f"{pay_url}\n"
                    f"ID —Ä–∞—Ö—É–Ω–∫—É: {invoice_id}\n"
                    f"–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–¥—ñ–π—Å–Ω—ñ—Ç—å –æ–ø–ª–∞—Ç—É —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å—Ç–∞—Ç—É—Å.",
                    reply_markup=reply_markup
                )
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–≤–æ–π—Å—É NOWPayments: {e}")
                await query.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –æ–ø–ª–∞—Ç–∏: {e}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
        elif data == 'check_payment_status':
            invoice_id = context.user_data.get('nowpayments_invoice_id')
            if not invoice_id:
                await query.edit_message_text("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ ID —Ä–∞—Ö—É–Ω–∫—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.")
                return

            try:
                headers = {
                    'Authorization': f'Bearer {NOWPAYMENTS_API_KEY}',
                    'Content-Type': 'application/json'
                }
                response = requests.get(f"https://api.nowpayments.io/v1/invoice/{invoice_id}?is_paid=true", headers=headers)
                response.raise_for_status()
                status_data = response.json()
                payment_status = status_data.get('payment_status', 'unknown')

                if payment_status == 'finished':
                    await query.edit_message_text("‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–π—à–ª–∞!")
                    await self.request_account_data(update, context)
                elif payment_status in ['waiting', 'confirming', 'confirmed']:
                    keyboard = [
                        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–µ —Ä–∞–∑", callback_data='check_payment_status')],
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_crypto_selection')],
                        [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.edit_message_text(
                        f"‚è≥ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏: {payment_status}. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —â–µ —Ä–∞–∑.",
                        reply_markup=reply_markup
                    )
                else:
                    keyboard = [
                        [InlineKeyboardButton("üí≥ –Ü–Ω—à–∏–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏", callback_data='back_to_payment_methods')],
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')],
                        [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.edit_message_text(
                        f"‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ–π—à–ª–∞ –∞–±–æ –±—É–ª–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –°—Ç–∞—Ç—É—Å: {payment_status}.",
                        reply_markup=reply_markup
                    )
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É NOWPayments: {e}")
                await query.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É –æ–ø–ª–∞—Ç–∏: {e}")

        # –†—É—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
        elif data == 'manual_payment_confirmed':
            await query.edit_message_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ –≤—Ä—É—á–Ω—É.")
            await self.request_account_data(update, context)

        # –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
        elif data == 'back_to_payment_methods':
            keyboard = [
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é", callback_data='pay_card')],
                [InlineKeyboardButton("ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data='pay_crypto')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')],
                [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                f"üí≥ –û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏ –¥–ª—è —Å—É–º–∏ {usd_amount}$:",
                reply_markup=reply_markup
            )
            context.user_data.pop('awaiting_manual_payment_confirmation', None)
            context.user_data.pop('awaiting_crypto_currency_selection', None)
            context.user_data.pop('nowpayments_invoice_id', None)

        # –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        elif data == 'back_to_crypto_selection':
            keyboard = []
            for currency_name, currency_code in AVAILABLE_CURRENCIES.items():
                keyboard.append([InlineKeyboardButton(currency_name, callback_data=f'pay_crypto_{currency_code}')])
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_payment_methods')])
            keyboard.append([InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')])
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                f"ü™ô –û–±–µ—Ä—ñ—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç–∏ {usd_amount}$:",
                reply_markup=reply_markup
            )
            context.user_data.pop('nowpayments_invoice_id', None)

    async def request_account_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã"""
        query = update.callback_query
        user_id = query.from_user.id if update.callback_query else update.effective_user.id
        order_details = context.user_data.get('order_details_for_payment', '')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞
        if 'digital_order' in active_conversations.get(user_id, {}).get('type', ''):
            account_type = "Discord"
        else:
            account_type = "—Å–µ—Ä–≤—ñ—Å—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, Netflix, ChatGPT)"
        
        message_text = f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ!\n\n" \
                       f"–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –ª–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å –≤—ñ–¥ –≤–∞—à–æ–≥–æ {account_type} –∞–∫–∞—É–Ω—Ç—É.\n" \
                       f"–§–æ—Ä–º–∞—Ç: `email:password` –∞–±–æ `login:password`"
        
        if update.callback_query:
            await query.edit_message_text(message_text, parse_mode='Markdown')
        else:
            await update.message.reply_text(message_text, parse_mode='Markdown')
        
        context.user_data['awaiting_account_data'] = True
        context.user_data['account_details_order'] = order_details

    async def handle_account_data_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.effective_user
        user_id = user.id
        message_text = update.message.text

        if not context.user_data.get('awaiting_account_data'):
            await self.handle_message(update, context)
            return

        if ':' in message_text:
            login, password = message_text.split(':', 1)
        else:
            await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ª–æ–≥—ñ–Ω:–ø–∞—Ä–æ–ª—å")
            return

        order_details = context.user_data.get('account_details_order', '–ù–µ–≤—ñ–¥–æ–º–∏–π –∑–∞–∫–∞–∑')
        account_info_message = f"üîê –ù–æ–≤—ñ –¥–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç—É –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞!\n\n" \
                               f"üë§ –ö–ª—ñ—î–Ω—Ç: {user.first_name}\n" \
                               f"üÜî ID: {user_id}\n" \
                               f"üõçÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order_details}\n\n" \
                               f"üîë –õ–æ–≥—ñ–Ω: `{login}`\n" \
                               f"üîì –ü–∞—Ä–æ–ª—å: `{password}`"

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π
        success_count = 0
        for owner_id in [OWNER_ID_1, OWNER_ID_2]:
            try:
                await context.bot.send_message(
                    chat_id=owner_id,
                    text=account_info_message,
                    parse_mode='Markdown'
                )
                success_count += 1
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—É –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é {owner_id}: {e}")

        if success_count > 0:
            await update.message.reply_text("‚úÖ –î–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç—É —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫–∞–º –º–∞–≥–∞–∑–∏–Ω—É. –î—è–∫—É—î–º–æ!")
        else:
            await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –¥–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.pop('awaiting_account_data', None)
        context.user_data.pop('payment_amount_usd', None)
        context.user_data.pop('order_details_for_payment', None)
        context.user_data.pop('account_details_order', None)
        context.user_data.pop('nowpayments_invoice_id', None)
        
        # –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
        if user_id in active_conversations:
            del active_conversations[user_id]
        delete_active_conversation(user_id)

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (forward_order_to_owners, handle_message, –∏ —Ç.–¥.)
    # [–ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –∏—Å—Ö–æ–¥–Ω–æ–º—É]
    # –î–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤–ª—é —Ç–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã

    async def forward_order_to_owners(self, context, user_id, user, order_text):
        # ... —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è ...

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # ... —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è ...

    async def continue_dialog_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # ... —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è ...

    async def stop_conversation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # ... —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è ...

    async def show_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # ... —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è ...

    async def show_history(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # ... —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è ...

    async def show_active_chats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # ... —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è ...

    async def clear_active_conversations_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # ... —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è ...

    async def channel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # ... —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è ...

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # ... —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è ...

    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        # ... —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è ...

# Flask –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@flask_app.route('/', methods=['GET'])
def index():
    return jsonify({
        'status': 'running',
        'mode': 'polling' if USE_POLLING else 'webhook',
        'stats': bot_statistics
    }), 200

@flask_app.route(f'/{BOT_TOKEN}', methods=['POST'])
def webhook():
    if USE_POLLING:
        return jsonify({'error': 'Webhook disabled in polling mode'}), 400

    global telegram_app
    if not telegram_app or not bot_instance.initialized:
        logger.error("Telegram app –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return jsonify({'error': 'Bot not initialized'}), 500

    try:
        json_data = request.get_json()
        if json_data:
            update = Update.de_json(json_data, telegram_app.bot)
            if telegram_app.loop and not telegram_app.loop.is_closed():
                 future = asyncio.run_coroutine_threadsafe(telegram_app.process_update(update), telegram_app.loop)
        return '', 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return jsonify({'error': str(e)}), 500

@flask_app.route('/nowpayments_ipn', methods=['POST'])
def nowpayments_ipn():
    try:
        data = request.json
        logger.info(f"NOWPayments IPN received: {json.dumps(data)}")
        
        if data.get('payment_status') == 'finished':
            invoice_id = data.get('invoice_id')
            order_id = data.get('order_id')
            user_id = int(order_id.split('_')[1]) if order_id else 0
            
            message = f"‚úÖ –£—Å–ø—ñ—à–Ω–∞ –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ NOWPayments\nID —Ä–∞—Ö—É–Ω–∫—É: {invoice_id}\n" \
                      f"–°—É–º–∞: {data.get('price_amount')} {data.get('price_currency')}\n" \
                      f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ID: {user_id}"
            
            for owner_id in [OWNER_ID_1, OWNER_ID_2]:
                try:
                    telegram_app.bot.send_message(chat_id=owner_id, text=message)
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {e}")
        
        return jsonify({'status': 'ok'}), 200
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ IPN: {e}")
        return jsonify({'error': str(e)}), 500

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞
bot_instance = TelegramBot()

async def setup_webhook():
    try:
        if not WEBHOOK_URL:
            logger.error("‚ùå WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False

        await bot_instance.application.bot.delete_webhook()
        logger.info("üóëÔ∏è –°—Ç–∞—Ä—ã–π webhook —É–¥–∞–ª–µ–Ω")

        await bot_instance.application.bot.set_webhook(
            url=f"{WEBHOOK_URL}/{BOT_TOKEN}",
            max_connections=40,
            allowed_updates=["message", "callback_query", "document"]
        )
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}/{BOT_TOKEN}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")
        return False

async def start_bot():
    global bot_running, telegram_app
    if bot_running:
        logger.warning("üõë –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫")
        return

    try:
        await bot_instance.initialize()
        telegram_app = bot_instance.application

        if USE_POLLING:
            await setup_webhook()
            await bot_instance.start_polling()
            bot_running = True
            logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ polling —Ä–µ–∂–∏–º–µ")
        else:
            success = await setup_webhook()
            if success:
                bot_running = True
                logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ webhook —Ä–µ–∂–∏–º–µ")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å webhook")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        bot_running = False
        raise

def bot_thread():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    bot_instance.loop = loop

    try:
        loop.run_until_complete(start_bot())
        if USE_POLLING:
            loop.run_forever()
    except Conflict as e:
        logger.error(f"üö® –ö–æ–Ω—Ñ–ª–∏–∫—Ç: {e}")
        logger.warning("üïí –û–∂–∏–¥–∞–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
        time.sleep(30)
        bot_thread()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ bot_thread: {e}")
        logger.warning("üïí –û–∂–∏–¥–∞–µ–º 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º...")
        time.sleep(15)
        bot_thread()
    finally:
        try:
            if not loop.is_closed():
                loop.close()
        except:
            pass
        logger.warning("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –±–æ—Ç–∞...")
        time.sleep(5)
        bot_thread()

def main():
    if os.environ.get('RENDER'):
        logger.info("‚è≥ –û–∂–∏–¥–∞–µ–º 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤...")
        time.sleep(10)

    auto_save_thread = threading.Thread(target=auto_save_loop)
    auto_save_thread.daemon = True
    auto_save_thread.start()

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ SecureShop Telegram Bot...")
    logger.info(f"üîë BOT_TOKEN: {BOT_TOKEN[:10]}...")
    logger.info(f"üåê PORT: {PORT}")
    logger.info(f"üì° WEBHOOK_URL: {WEBHOOK_URL}")

    from waitress import serve
    flask_thread = threading.Thread(target=lambda: serve(flask_app, host='0.0.0.0', port=PORT))
    flask_thread.daemon = True
    flask_thread.start()
    logger.info(f"üåê Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")

    bot_t = threading.Thread(target=bot_thread)
    bot_t.daemon = True
    bot_t.start()

    try:
        while True:
            time.sleep(PING_INTERVAL)
            logger.info("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")

if __name__ == '__main__':
    main()
