import logging
import os
import asyncio
import threading
import time
import json
import re
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, User, BotCommandScopeChat
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.error import Conflict
from flask import Flask, request, jsonify
from flask_cors import CORS
import psycopg
from psycopg.rows import dict_row
import io
import requests
import products

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise ValueError("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ TELEGRAM_BOT_TOKEN. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")

OWNER_ID_1 = int(os.getenv("OWNER_ID_1", 0))
OWNER_ID_2 = int(os.getenv("OWNER_ID_2", 0))
OWNER_IDS = [id for id in [OWNER_ID_1, OWNER_ID_2] if id != 0]

FLASK_HOST = os.getenv("FLASK_HOST", "127.0.0.1")
FLASK_PORT = int(os.getenv("FLASK_PORT", 5001))
USE_POLLING = os.getenv("USE_POLLING", "True").lower() == "true"

DB_CONFIG = {
    'dbname': os.getenv("DB_NAME", "secure_shop_db"),
    'user': os.getenv("DB_USER", "your_db_user"),
    'password': os.getenv("DB_PASSWORD", "your_db_password"),
    'host': os.getenv("DB_HOST", "localhost"),
    'port': os.getenv("DB_PORT", "5432")
}

bot_statistics = {
    'first_start': datetime.now().isoformat(),
    'last_save': datetime.now().isoformat(),
    'total_orders': 0,
    'total_questions': 0
}

try:
    with open('bot_statistics.json', 'r') as f:
        bot_statistics.update(json.load(f))
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ –∑ —Ñ–∞–π–ª—É.")
except FileNotFoundError:
    logger.info("üìä –§–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –Ω–æ–≤–∏–π.")

def save_statistics():
    bot_statistics['last_save'] = datetime.now().isoformat()
    try:
        with open('bot_statistics.json', 'w') as f:
            json.dump(bot_statistics, f)
        logger.info("üíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def get_db_connection():
    return psycopg.connect(**DB_CONFIG, row_factory=dict_row)

def ensure_user_exists(user: User):
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    INSERT INTO users (id, username, first_name, last_name, language_code, is_bot, created_at)
                    VALUES (%s, %s, %s, %s, %s, %s, NOW())
                    ON CONFLICT (id) DO UPDATE SET
                        username = EXCLUDED.username,
                        first_name = EXCLUDED.first_name,
                        last_name = EXCLUDED.last_name,
                        language_code = EXCLUDED.language_code,
                        is_bot = EXCLUDED.is_bot
                """, (user.id, user.username, user.first_name, user.last_name, user.language_code, user.is_bot))
                conn.commit()
                logger.info(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.first_name} ({user.id}) –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏–π/—Å—Ç–≤–æ—Ä–µ–Ω–∏–π —É –ë–î.")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–±–æ—Ç–∏ –∑ –ë–î (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.id}): {e}")

def get_total_users_count():
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT COUNT(*) FROM users")
                result = cur.fetchone()
                return result['count'] if result else 0
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
        return 0

def get_all_users():
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT * FROM users ORDER BY created_at DESC")
                return cur.fetchall()
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
        return []

def create_invoice(amount: float, pay_currency: str, currency: str = "uah", order_id_suffix: str = "unknown"):
    url = "https://api.nowpayments.io/v1/invoice"
    headers = {
        "x-api-key": products.NOWPAYMENTS_API_KEY,
        "Content-Type": "application/json"
    }
    if not products.NOWPAYMENTS_API_KEY or products.NOWPAYMENTS_API_KEY in ['YOUR_NOWPAYMENTS_API_KEY_HERE', '']:
        logger.error("NOWPAYMENTS_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return {"error": "API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
    payload = {
        "price_amount": amount,
        "price_currency": currency,
        "pay_currency": pay_currency,
        "order_id": f"order_{order_id_suffix}",
        "ipn_callback_url": "https://nowpayments.io",
        "cancel_url": "https://t.me/SecureShopBot",
        "success_url": "https://t.me/SecureShopBot",
    }
    try:
        response = requests.post(url, json=payload, headers=headers)
        response.raise_for_status()
        data = response.json()
        logger.info(f"‚úÖ –Ü–Ω–≤–æ–π—Å —Å—Ç–≤–æ—Ä–µ–Ω–æ: Order ID {data.get('order_id')}")
        return data
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–≤–æ–π—Å—É NOWPayments: {e}")
        return {"error": str(e)}
    except json.JSONDecodeError as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON NOWPayments: {e}")
        return {"error": "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ NOWPayments"}

class SecureShopBot:
    def __init__(self, application: Application):
        self.application = application
        self.loop = application.loop

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        ensure_user_exists(user)
        welcome_text = f"""
üëã –ü—Ä–∏–≤—ñ—Ç, {user.first_name}!

ü§ñ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ SecureShopBot!

üõí –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ:
- –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞—à –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç
- –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
- –û–ø–ª–∞—Ç–∏—Ç–∏ –π–æ–≥–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é
- –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫—É

–î–ª—è –ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëá
"""
        keyboard = [
            [InlineKeyboardButton("üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data='order')],
            [InlineKeyboardButton("‚ùì –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')],
            [InlineKeyboardButton("üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", callback_data='channel')],
            [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(welcome_text.strip(), reply_markup=reply_markup)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await self.show_help(update.message)

    async def show_help(self, message):
        help_text = """
‚ÑπÔ∏è –î–æ–≤—ñ–¥–∫–∞ SecureShopBot:

/start - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞
/channel - –ù–∞—à Telegram –∫–∞–Ω–∞–ª
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤)

üí¨ –Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è, –Ω–µ —Å–æ—Ä–æ–º—Ç–µ—Å—è –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è!
"""
        await message.reply_text(help_text.strip())

    async def channel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [[InlineKeyboardButton("üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ SecureShopUA", url="https://t.me/SecureShopUA")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        message_text = """
üì¢ –ù–∞—à –≥–æ–ª–æ–≤–Ω–∏–π –∫–∞–Ω–∞–ª –∑ –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏ —Ç–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞–º–∏:

üëâ –¢—É—Ç –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ:
- üÜï –ê–∫—Ç—É–∞–ª—å–Ω—ñ —Ç–æ–≤–∞—Ä–∏ —Ç–∞ –ø–æ—Å–ª—É–≥–∏
- üî• –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —Ç–∞ –∑–Ω–∏–∂–∫–∏
- üéÅ –†–æ–∑—ñ–≥—Ä–∞—à—ñ —Ç–∞ –∞–∫—Ü—ñ—ó
- ‚ÑπÔ∏è –í–∞–∂–ª–∏–≤—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—É
"""
        await update.message.reply_text(message_text.strip(), reply_markup=reply_markup)

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        owner_id = update.effective_user.id
        if owner_id not in OWNER_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
            return

        await self.show_stats(update, context)

    async def show_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        owner_id = update.effective_user.id
        if owner_id not in OWNER_IDS:
            return

        total_users_db = get_total_users_count()
        first_start = datetime.fromisoformat(bot_statistics['first_start'])
        last_save = datetime.fromisoformat(bot_statistics['last_save'])
        uptime = datetime.now() - first_start

        stats_message = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

üë§ –£—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–ë–î): {total_users_db}
üõí –£—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å: {bot_statistics['total_orders']}
‚ùì –£—Å—å–æ–≥–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—å: {bot_statistics['total_questions']}

‚è±Ô∏è –ü–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫: {first_start.strftime('%d.%m.%Y %H:%M')}
‚è±Ô∏è –û—Å—Ç–∞–Ω–Ω—î –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {last_save.strftime('%d.%m.%Y %H:%M')}
‚è±Ô∏è –ß–∞—Å —Ä–æ–±–æ—Ç–∏: {uptime}
"""
        await update.message.reply_text(stats_message.strip())

    async def pay_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        user_id = user.id
        ensure_user_exists(user)

        if not context.args:
            await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /pay <order_id> <—Ç–æ–≤–∞—Ä1> <—Ç–æ–≤–∞—Ä2> ...")
            return

        order_id = context.args[0]
        items_str = " ".join(context.args[1:])

        pattern = r'(\w{2,4})-(\w{2,4})-([\w$]+?)-(\d+)'
        items = re.findall(pattern, items_str)

        if not items:
            await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏ —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")
            return

        order_details = []
        total = 0
        has_digital = False

        for item in items:
            service_abbr, plan_abbr, period_abbr, price_str = item
            try:
                price_num = int(price_str)
                total += price_num

                service_name = self.get_service_name(service_abbr)
                plan_name = self.get_plan_name(plan_abbr)
                
                if service_abbr in ["Rob", "PSNT", "PSNI"]:
                     has_digital = True

                display_period = self.format_period(period_abbr)

                order_details.append({
                    'service': service_name,
                    'plan': plan_name,
                    'period': display_period,
                    'price': price_num
                })
            except ValueError:
                continue

        if total == 0:
            await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ç–æ–≤–∞—Ä—ñ–≤.")
            return

        order_text = f"üßæ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}:\n"
        for item in order_details:
             order_text += f"‚ñ´Ô∏è {item['service']} {item['plan']} ({item['period']}) - {item['price']} UAH\n"
        order_text += f"üí≥ –í—Å—å–æ–≥–æ: {total} UAH\n\n"

        context.user_data['pending_payment'] = {
            'order_id': order_id,
            'items': order_details,
            'total_uah': total,
            'from_website': True
        }

        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ –∫–∞—Ä—Ç—ñ", callback_data=f'pay_card_{total}')],
            [InlineKeyboardButton("‚Çø –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é", callback_data=f'pay_crypto_{total}')],
            [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data='cancel_payment')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"{order_text}–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:",
            reply_markup=reply_markup
        )

    def get_service_name(self, abbr: str) -> str:
        mapping = {
            "Cha": "ChatGPT",
            "Dis": "Discord",
            "DisU": "Discord –£–∫—Ä–∞—à–µ–Ω–Ω—è",
            "Duo": "Duolingo",
            "Pic": "PicsArt",
            "Can": "Canva",
            "Net": "Netflix",
            "Rob": "Roblox",
            "PSNT": "PSN (TRY)",
            "PSNI": "PSN (INR)",
        }
        return mapping.get(abbr, abbr)

    def get_plan_name(self, abbr: str) -> str:
        mapping = {
            "Plu": "Plus",
            "Bas": "Basic",
            "Ful": "Full",
            "Ind": "Individual",
            "Fam": "Family",
            "Pro": "Pro",
            "Pre": "Premium",
            "BzN": "–ë–µ–∑ Nitro",
            "ZN": "–ó Nitro",
            "GC": "Gift Card",
        }
        return mapping.get(abbr, abbr)

    def format_period(self, abbr: str) -> str:
        formatted = abbr
        if "TRU" in abbr:
            formatted = abbr.replace("TRU", " —Ç—É—Ä–µ—Ü—å–∫–∏—Ö –ª—ñ—Ä")
        elif "INR" in abbr:
            formatted = abbr.replace("INR", " —ñ–Ω–¥—ñ–π—Å—å–∫–∏—Ö —Ä—É–ø—ñ–π")
        return formatted

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        user = query.from_user
        user_id = user.id
        ensure_user_exists(user)

        if query.data == 'order':
            keyboard = [
                [InlineKeyboardButton("üí≥ –ü—ñ–¥–ø–∏—Å–∫–∏", callback_data='order_subscriptions')],
                [InlineKeyboardButton("üéÆ –¶–∏—Ñ—Ä–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏", callback_data='order_digital')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
            ]
            await query.edit_message_text("üì¶ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç–æ–≤–∞—Ä—É:", reply_markup=InlineKeyboardMarkup(keyboard))

        elif query.data == 'order_subscriptions':
            keyboard = [
                [InlineKeyboardButton("üí¨ ChatGPT", callback_data='category_chatgpt')],
                [InlineKeyboardButton("üéÆ Discord", callback_data='category_discord')],
                [InlineKeyboardButton("ü¶â Duolingo", callback_data='category_duolingo')],
                [InlineKeyboardButton("üé® PicsArt", callback_data='category_picsart')],
                [InlineKeyboardButton("üìä Canva", callback_data='category_canva')],
                [InlineKeyboardButton("üì∫ Netflix", callback_data='category_netflix')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order')]
            ]
            await query.edit_message_text("üí≥ –û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É:", reply_markup=InlineKeyboardMarkup(keyboard))

        elif query.data == 'order_digital':
            keyboard = [
                [InlineKeyboardButton(" Roblox", callback_data='category_roblox')],
                [InlineKeyboardButton(" PSN (TRY)", callback_data='category_psn_tru')],
                [InlineKeyboardButton(" PSN (INR)", callback_data='category_psn_inr')],
                [InlineKeyboardButton("üé® Discord –£–∫—Ä–∞—à–µ–Ω–Ω—è", callback_data='category_discord_decor')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order')]
            ]
            await query.edit_message_text("üéÆ –û–±–µ—Ä—ñ—Ç—å —Ü–∏—Ñ—Ä–æ–≤–∏–π —Ç–æ–≤–∞—Ä:", reply_markup=InlineKeyboardMarkup(keyboard))

        elif query.data == 'question':
            context.user_data['conversation_type'] = 'question'
            await query.edit_message_text("‚ùì –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. –û–ø–µ—Ä–∞—Ç–æ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")

        elif query.data == 'channel':
            await self.channel_command(update, context)

        elif query.data == 'help':
            await self.show_help(query.message)

        elif query.data == 'back_to_main':
            keyboard = [
                [InlineKeyboardButton("üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data='order')],
                [InlineKeyboardButton("‚ùì –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')],
                [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
            ]
            await query.edit_message_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=InlineKeyboardMarkup(keyboard))

        elif query.data.startswith('category_'):
            category = query.data.split('_')[1]
            if category == 'chatgpt':
                keyboard = [
                    [InlineKeyboardButton("Plus", callback_data='chatgpt_plus')],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order_subscriptions')]
                ]
                await query.edit_message_text("üí¨ –û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ ChatGPT:", reply_markup=InlineKeyboardMarkup(keyboard))
            elif category == 'discord':
                keyboard = [
                    [InlineKeyboardButton("Nitro Basic", callback_data='discord_basic')],
                    [InlineKeyboardButton("Nitro Full", callback_data='discord_full')],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order_subscriptions')]
                ]
                await query.edit_message_text("üéÆ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø Discord Nitro:", reply_markup=InlineKeyboardMarkup(keyboard))
            elif category == 'duolingo':
                keyboard = [
                    [InlineKeyboardButton("Individual", callback_data='duolingo_individual')],
                    [InlineKeyboardButton("Family", callback_data='duolingo_family')],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order_subscriptions')]
                ]
                await query.edit_message_text("ü¶â –û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ Duolingo:", reply_markup=InlineKeyboardMarkup(keyboard))
            elif category == 'picsart':
                keyboard = [
                    [InlineKeyboardButton("Plus", callback_data='picsart_plus')],
                    [InlineKeyboardButton("Pro", callback_data='picsart_pro')],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order_subscriptions')]
                ]
                await query.edit_message_text("üé® –û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ PicsArt:", reply_markup=InlineKeyboardMarkup(keyboard))
            elif category == 'canva':
                keyboard = [
                    [InlineKeyboardButton("Individual", callback_data='canva_individual')],
                    [InlineKeyboardButton("Family", callback_data='canva_family')],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order_subscriptions')]
                ]
                await query.edit_message_text("üìä –û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ Canva:", reply_markup=InlineKeyboardMarkup(keyboard))
            elif category == 'netflix':
                keyboard = [
                    [InlineKeyboardButton("Premium", callback_data='netflix_premium')],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order_subscriptions')]
                ]
                await query.edit_message_text("üì∫ –û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ Netflix:", reply_markup=InlineKeyboardMarkup(keyboard))
            elif category == 'roblox':
                keyboard = [
                    [InlineKeyboardButton("10$ - 459 UAH", callback_data='roblox_10')],
                    [InlineKeyboardButton("25$ - 1149 UAH", callback_data='roblox_25')],
                    [InlineKeyboardButton("50$ - 2299 UAH", callback_data='roblox_50')],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order_digital')]
                ]
                await query.edit_message_text("üéÅ –û–±–µ—Ä—ñ—Ç—å Roblox Gift Card:", reply_markup=InlineKeyboardMarkup(keyboard))
            elif category == 'psn_tru':
                keyboard = [
                    [InlineKeyboardButton("250 TRU - 349 UAH", callback_data='psn_tru_250')],
                    [InlineKeyboardButton("500 TRU - 699 UAH", callback_data='psn_tru_500')],
                    [InlineKeyboardButton("750 TRU - 1049 UAH", callback_data='psn_tru_750')],
                    [InlineKeyboardButton("1000 TRU - 1350 UAH", callback_data='psn_tru_1000')],
                    [InlineKeyboardButton("1500 TRU - 2000 UAH", callback_data='psn_tru_1500')],
                    [InlineKeyboardButton("2000 TRU - 2700 UAH", callback_data='psn_tru_2000')],
                    [InlineKeyboardButton("2500 TRU - 3400 UAH", callback_data='psn_tru_2500')],
                    [InlineKeyboardButton("3000 TRU - 4100 UAH", callback_data='psn_tru_3000')],
                    [InlineKeyboardButton("4000 TRU - 5300 UAH", callback_data='psn_tru_4000')],
                    [InlineKeyboardButton("5000 TRU - 6600 UAH", callback_data='psn_tru_5000')],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order_digital')]
                ]
                message_text = "üéÅ –û–±–µ—Ä—ñ—Ç—å PSN Gift Card (TRY):\n\n"
                message_text += "‚ùóÔ∏è–í–ê–ñ–õ–ò–í–û: –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó —Ü—ñ—î—ó –∫–∞—Ä—Ç–∫–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ù–û–í–ò–ô –∞–∫–∞—É–Ω—Ç PlayStation —Ä–µ–≥—ñ–æ–Ω—É –¢—É—Ä–µ—á—á–∏–Ω–∞ –∞–±–æ –∑–º—ñ–Ω–∏—Ç–∏ —Ä–µ–≥—ñ–æ–Ω —ñ—Å–Ω—É—é—á–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞.\n"
                message_text += "TRU - —Ç—É—Ä–µ—Ü—å–∫—ñ –ª—ñ—Ä–∏."
                await query.edit_message_text(message_text, reply_markup=InlineKeyboardMarkup(keyboard))
            elif category == 'psn_inr':
                keyboard = [
                    [InlineKeyboardButton("1000 INR - 725 UAH", callback_data='psn_inr_1000')],
                    [InlineKeyboardButton("2000 INR - 1400 UAH", callback_data='psn_inr_2000')],
                    [InlineKeyboardButton("3000 INR - 2100 UAH", callback_data='psn_inr_3000')],
                    [InlineKeyboardButton("4000 INR - 2750 UAH", callback_data='psn_inr_4000')],
                    [InlineKeyboardButton("5000 INR - 3400 UAH", callback_data='psn_inr_5000')],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order_digital')]
                ]
                message_text = "üéÅ –û–±–µ—Ä—ñ—Ç—å PSN Gift Card (INR):\n\n"
                message_text += "‚ùóÔ∏è–í–ê–ñ–õ–ò–í–û: –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó —Ü—ñ—î—ó –∫–∞—Ä—Ç–∫–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ù–û–í–ò–ô –∞–∫–∞—É–Ω—Ç PlayStation —Ä–µ–≥—ñ–æ–Ω—É –Ü–Ω–¥—ñ—è –∞–±–æ –∑–º—ñ–Ω–∏—Ç–∏ —Ä–µ–≥—ñ–æ–Ω —ñ—Å–Ω—É—é—á–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞.\n"
                message_text += "INR - —ñ–Ω–¥—ñ–π—Å—å–∫—ñ —Ä—É–ø—ñ—ó."
                await query.edit_message_text(message_text, reply_markup=InlineKeyboardMarkup(keyboard))
            elif category == 'discord_decor':
                 keyboard = []
                 for item_id, item_data in products.SUBSCRIPTION_PRODUCTS.items():
                     if item_id.startswith('discord_decor_bzn_') or item_id.startswith('discord_decor_zn_'):
                         keyboard.append([InlineKeyboardButton(f"{item_data['name']} - {item_data['price']} UAH", callback_data=item_id)])
                 keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order_digital')])
                 await query.edit_message_text("üé® –û–±–µ—Ä—ñ—Ç—å Discord –£–∫—Ä–∞—à–µ–Ω–Ω—è:", reply_markup=InlineKeyboardMarkup(keyboard))

        elif query.data in products.ALL_PRODUCTS:
            product = products.ALL_PRODUCTS[query.data]
            context.user_data['pending_payment'] = {
                'product_id': query.data,
                'product_name': product['name'],
                'price': product['price']
            }
            
            order_text = f"üßæ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n‚ñ´Ô∏è {product['name']}\nüí≥ –í–∞—Ä—Ç—ñ—Å—Ç—å: {product['price']} UAH\n\n"
            
            keyboard = [
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ –∫–∞—Ä—Ç—ñ", callback_data=f'pay_card_{product["price"]}')],
                [InlineKeyboardButton("‚Çø –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é", callback_data=f'pay_crypto_{product["price"]}')],
                [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data='cancel_payment')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(f"{order_text}–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:", reply_markup=reply_markup)

        elif query.data.startswith('pay_card_') or query.data.startswith('pay_crypto_'):
            if 'pending_payment' not in context.user_
                 await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—è.")
                 return

            pending_payment = context.user_data['pending_payment']
            is_card_payment = query.data.startswith('pay_card_')
            
            try:
                parts = query.data.split('_')
                if len(parts) < 3:
                    raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è –æ–ø–ª–∞—Ç—ã")
                amount = int(parts[2])
            except (ValueError, IndexError):
                await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—É–º–∞ –æ–ø–ª–∞—Ç–∏.")
                return

            order_id_suffix = "unknown"
            if 'order_id' in pending_payment:
                order_id_suffix = pending_payment['order_id']
            elif 'product_id' in pending_payment:
                order_id_suffix = pending_payment['product_id']

            if is_card_payment:
                 await query.edit_message_text("üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é –ø–æ–∫–∏ —â–æ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ —Å–∞–π—Ç. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫—Ä–∏–ø—Ç–æ–æ–ø–ª–∞—Ç–æ—é –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.")
            else:
                invoice_data = self.create_invoice(amount=amount, pay_currency="usdtsol", currency="uah", order_id_suffix=order_id_suffix)
                
                if "error" in invoice_
                    await query.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É: {invoice_data['error']}")
                    return

                pay_url = invoice_data.get("invoice_url")
                if pay_url:
                    keyboard = [
                        [InlineKeyboardButton(name, callback_data=f'invoice_{amount}_{code}')]
                        for name, code in products.AVAILABLE_CURRENCIES.items()
                    ]
                    keyboard.append([InlineKeyboardButton("‚úÖ –û–ø–ª–∞—á–µ–Ω–æ", callback_data='paid_crypto')])
                    reply_markup = InlineKeyboardMarkup(keyboard)

                    await query.edit_message_text(
                        f"üîó –í–∞—à —Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è –æ–ø–ª–∞—Ç–∏:\n"
                        f"–°—É–º–∞: {amount} UAH\n"
                        f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è: {pay_url}\n\n"
                        f"–û–±–µ—Ä—ñ—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚úÖ –û–ø–ª–∞—á–µ–Ω–æ' –ø—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏:",
                        reply_markup=reply_markup
                    )
                else:
                    await query.edit_message_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –æ–ø–ª–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

        elif query.data.startswith('invoice_'):
             if 'pending_payment' not in context.user_data:
                 await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—è.")
                 return

             pending_payment = context.user_data['pending_payment']
             try:
                parts = query.data.split('_')
                if len(parts) != 3:
                    raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è –∏–Ω–≤–æ–π—Å–∞")
                amount = int(parts[1])
                pay_currency_code = parts[2]
             except (ValueError, IndexError):
                await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–≤–æ–π—Å—É.")
                return

             order_id_suffix = "unknown"
             if 'order_id' in pending_payment:
                order_id_suffix = pending_payment['order_id']
             elif 'product_id' in pending_payment:
                order_id_suffix = pending_payment['product_id']

             invoice_data = self.create_invoice(amount=amount, pay_currency=pay_currency_code, currency="uah", order_id_suffix=order_id_suffix)

             if "error" in invoice_data:
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {invoice_data['error']}")
                return

             pay_url = invoice_data.get("invoice_url")
             if pay_url:
                keyboard = [
                    [InlineKeyboardButton(name, callback_data=f'invoice_{amount}_{code}')]
                    for name, code in products.AVAILABLE_CURRENCIES.items()
                ]
                keyboard.append([InlineKeyboardButton("‚úÖ –û–ø–ª–∞—á–µ–Ω–æ", callback_data='paid_crypto')])
                reply_markup = InlineKeyboardMarkup(keyboard)

                await query.edit_message_text(
                    f"üîó –í–∞—à –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è –æ–ø–ª–∞—Ç–∏:\n"
                    f"–°—É–º–∞: {amount} UAH\n"
                    f"–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: {pay_currency_code.upper()}\n"
                    f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è: {pay_url}\n\n"
                    f"–û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚úÖ –û–ø–ª–∞—á–µ–Ω–æ' –ø—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏:",
                    reply_markup=reply_markup
                )
             else:
                 await query.edit_message_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –æ–ø–ª–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

        elif query.data == 'paid_crypto':
            if 'pending_payment' in context.user_data:
                pending_payment = context.user_data['pending_payment']
                order_text = "üîî –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–æ—á—ñ–∫—É—î –æ–ø–ª–∞—Ç—É):\n"
                if 'order_id' in pending_payment:
                    order_text += f"üßæ –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: #{pending_payment['order_id']}\n"
                    bot_statistics['total_orders'] += 1
                    save_statistics()
                if 'items' in pending_payment:
                    for item in pending_payment['items']:
                        order_text += f"‚ñ´Ô∏è {item['service']} {item['plan']} ({item['period']}) - {item['price']} UAH\n"
                    order_text += f"üí≥ –í—Å—å–æ–≥–æ: {pending_payment['total_uah']} UAH\n"
                    order_text += f"üåê –î–∂–µ—Ä–µ–ª–æ: {'–°–∞–π—Ç' if pending_payment.get('from_website') else '–ë–æ—Ç'}\n"
                elif 'product_name' in pending_payment:
                    order_text += f"‚ñ´Ô∏è {pending_payment['product_name']} - {pending_payment['price']} UAH\n"
                    order_text += f"üí≥ –í—Å—å–æ–≥–æ: {pending_payment['price']} UAH\n"
                    order_text += f"üåê –î–∂–µ—Ä–µ–ª–æ: –ë–æ—Ç\n"
                
                order_text += f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @{user.username or '–ù–µ–≤—ñ–¥–æ–º–∏–π'} (ID: {user_id})\n"
                order_text += f"–Ü–º'—è: {user.first_name} {user.last_name or ''}\n"

                await self.forward_order_to_owners(context, user_id, user, order_text)
                
                del context.user_data['pending_payment']
                
                await query.edit_message_text("‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à –ø–ª–∞—Ç—ñ–∂ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è. –û–ø–µ—Ä–∞—Ç–æ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")
            else:
                await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—è.")

        elif query.data == 'cancel_payment':
            if 'pending_payment' in context.user_data:
                del context.user_data['pending_payment']
            await query.edit_message_text("‚ùå –û–ø–ª–∞—Ç–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data='order')],
                [InlineKeyboardButton("‚ùì –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')],
                [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
            ]))

    async def message_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        user_id = user.id
        ensure_user_exists(user)
        message_text = update.message.text

        conversation_type = context.user_data.get('conversation_type')

        if conversation_type == 'question':
            bot_statistics['total_questions'] += 1
            save_statistics()
            question_text = f"‚ùì –ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:\n\n"
            question_text += f"–ü–∏—Ç–∞–Ω–Ω—è: {message_text}\n"
            question_text += f"–í—ñ–¥: @{user.username or '–ù–µ–≤—ñ–¥–æ–º–∏–π'} (ID: {user_id})\n"
            question_text += f"–Ü–º'—è: {user.first_name} {user.last_name or ''}\n"
            
            await update.message.reply_text("‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è! –û–ø–µ—Ä–∞—Ç–æ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")
            
            await self.forward_question_to_owners(context, user_id, user, question_text)
            
            if 'conversation_type' in context.user_
                del context.user_data['conversation_type']
        else:
            await self.start(update, context)

    async def forward_order_to_owners(self, context: ContextTypes.DEFAULT_TYPE, user_id: int, user: User, order_text: str):
        logger.info(f"üîî –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º: {order_text}")
        for owner_id in OWNER_IDS:
            try:
                await context.bot.send_message(chat_id=owner_id, text=order_text)
                logger.info(f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {owner_id}")
            except Exception as e:
                logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {owner_id}: {e}")

    async def forward_question_to_owners(self, context: ContextTypes.DEFAULT_TYPE, user_id: int, user: User, question_text: str):
        logger.info(f"‚ùì –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º: {question_text}")
        for owner_id in OWNER_IDS:
            try:
                await context.bot.send_message(chat_id=owner_id, text=question_text)
                logger.info(f"‚úÖ –ó–∞–ø–∏—Ç–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {owner_id}")
            except Exception as e:
                logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {owner_id}: {e}")

app = Flask(__name__)
CORS(app)

bot_instance = None

@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.json
    logger.info(f"üì• –û—Ç—Ä–∏–º–∞–Ω–æ –≤–µ–±—Ö—É–∫ NOWPayments: {json.dumps(data, indent=2)}")
    return jsonify({'status': 'ok'})

async def start_bot():
    global bot_instance
    try:
        application = Application.builder().token(TOKEN).build()
        bot_instance = SecureShopBot(application)
        
        application.add_handler(CommandHandler("start", bot_instance.start))
        application.add_handler(CommandHandler("help", bot_instance.help_command))
        application.add_handler(CommandHandler("channel", bot_instance.channel_command))
        application.add_handler(CommandHandler("stats", bot_instance.stats_command))
        application.add_handler(CommandHandler("pay", bot_instance.pay_command))
        application.add_handler(CallbackQueryHandler(bot_instance.button_handler))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot_instance.message_handler))
        
        await application.bot.set_my_commands([
            BotCommandScopeChat("start", "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"),
            BotCommandScopeChat("help", "–î–æ–≤—ñ–¥–∫–∞"),
            BotCommandScopeChat("channel", "–ù–∞—à –∫–∞–Ω–∞–ª"),
            BotCommandScopeChat("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤)"),
            BotCommandScopeChat("pay", "–û–ø–ª–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Å–∞–π—Ç—É"),
        ])
        
        logger.info("ü§ñ –ë–æ—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π.")
        
        if USE_POLLING:
            await application.initialize()
            await application.start()
            logger.info("üîÑ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º—ñ polling.")
            return application
        else:
            pass
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
        raise

def bot_thread():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    bot_instance.loop = loop
    try:
        application = loop.run_until_complete(start_bot())
        if USE_POLLING and application:
            loop.run_until_complete(application.run_polling())
    except Conflict as e:
        logger.error(f"üö® –ö–æ–Ω—Ñ–ª–∏–∫—Ç: {e}")
        time.sleep(30)
        bot_thread()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –æ—à–∏–±–∫–∞ –≤ bot_thread: {e}")
        time.sleep(15)
        bot_thread()
    finally:
        try:
            if not loop.is_closed():
                loop.close()
        except:
            pass
        time.sleep(5)
        bot_thread()

def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ SecureShopBot...")
    
    flask_thread = threading.Thread(target=lambda: app.run(host=FLASK_HOST, port=FLASK_PORT, debug=False, use_reloader=False))
    flask_thread.daemon = True
    flask_thread.start()
    logger.info(f"üåê Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://{FLASK_HOST}:{FLASK_PORT}")
    
    bot_thread()

if __name__ == '__main__':
    main()
