import logging
import os
import asyncio
import threading
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.error import Conflict
from flask import Flask, request, jsonify

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', '8181378677:AAFullvwrNhPJMi_HxgC75qSEKWdKOtCpbw')
OWNER_ID_1 = 7106925462  # @HiGki2pYYY
OWNER_ID_2 = 6279578957  # @oc33t
PORT = int(os.getenv('PORT', 8443))
WEBHOOK_URL = os.getenv('WEBHOOK_URL', 'https://secureshop-3obw.onrender.com')
PING_INTERVAL = int(os.getenv('PING_INTERVAL', 840))  # 14 –º–∏–Ω—É—Ç
USE_POLLING = os.getenv('USE_POLLING', 'true').lower() == 'true'

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
active_conversations = {}
owner_client_map = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
telegram_app = None
flask_app = Flask(__name__)
bot_running = False
bot_lock = threading.Lock()  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º –∫ –±–æ—Ç—É

class TelegramBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
        self.ping_running = False
        self.initialized = False
        self.polling_task = None
        self.loop = None
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("stop", self.stop_conversation))
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_error_handler(self.error_handler)
    
    async def initialize(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            await self.application.initialize()
            self.initialized = True
            logger.info("‚úÖ Telegram Application –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Application: {e}")
            raise
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ polling —Ä–µ–∂–∏–º–∞"""
        try:
            if self.application.updater.running:
                logger.warning("üõë –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫")
                return
            
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ polling —Ä–µ–∂–∏–º–∞...")
            await self.application.start()
            await self.application.updater.start_polling(
                poll_interval=1.0,
                timeout=10,
                bootstrap_retries=-1,
                read_timeout=10,
                write_timeout=10,
                connect_timeout=10,
                pool_timeout=10
            )
            logger.info("‚úÖ Polling –∑–∞–ø—É—â–µ–Ω")
        except Conflict as e:
            logger.error(f"üö® –ö–æ–Ω—Ñ–ª–∏–∫—Ç: {e}")
            logger.warning("üïí –û–∂–∏–¥–∞–µ–º 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
            await asyncio.sleep(15)
            await self.start_polling()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ polling: {e}")
            raise
    
    async def stop_polling(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling"""
        try:
            if self.application.updater and self.application.updater.running:
                await self.application.updater.stop()
            if self.application.running:
                await self.application.stop()
            if self.application.post_init:
                await self.application.shutdown()
            logger.info("üõë Polling –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ polling: {e}")
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        if user.id in [OWNER_ID_1, OWNER_ID_2]:
            owner_name = "@HiGki2pYYY" if user.id == OWNER_ID_1 else "@oc33t"
            await update.message.reply_text(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}! ({owner_name})\n"
                f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å –º–∞–≥–∞–∑–∏–Ω–∞."
            )
            return
        
        keyboard = [
            [InlineKeyboardButton("üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data='order')],
            [InlineKeyboardButton("‚ùì –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_message = f"""
–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, {user.first_name}! üëã

–Ø –±–æ—Ç-–ø–æ–º—ñ—á–Ω–∏–∫ –Ω–∞—à–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:
        """
        
        await update.message.reply_text(
            welcome_message.strip(),
            reply_markup=reply_markup
        )
    
    async def stop_conversation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop –¥–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π"""
        owner_id = update.effective_user.id

        if owner_id not in [OWNER_ID_1, OWNER_ID_2]:
            return

        if owner_id not in owner_client_map:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
            return

        client_id = owner_client_map[owner_id]
        client_info = active_conversations.get(client_id, {}).get('user_info')

        try:
            await context.bot.send_message(
                chat_id=client_id,
                text="–î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫–æ–º –º–∞–≥–∞–∑–∏–Ω—É. –Ø–∫—â–æ —É –≤–∞—Å —î –Ω–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ—é /start."
            )
            if client_info:
                await update.message.reply_text(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º {client_info.first_name}.")
            else:
                await update.message.reply_text(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º ID {client_id}.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞: {e}")
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞), –Ω–æ –¥–∏–∞–ª–æ–≥ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ.")

        if client_id in active_conversations:
            del active_conversations[client_id]
        if owner_id in owner_client_map:
            del owner_client_map[owner_id]

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if query.data == 'order':
            keyboard = [
                [InlineKeyboardButton("üì∫ YouTube", callback_data='category_youtube')],
                [InlineKeyboardButton("üí¨ ChatGPT", callback_data='category_chatgpt')],
                [InlineKeyboardButton("üéµ Spotify", callback_data='category_spotify')],
                [InlineKeyboardButton("üéÆ Discord", callback_data='category_discord')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
            ]
            await query.edit_message_text(
                "üì¶ –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É:",
                reply_markup=InlineKeyboardMarkup(keyboard)
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        elif query.data == 'back_to_main':
            keyboard = [
                [InlineKeyboardButton("üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data='order')],
                [InlineKeyboardButton("‚ùì –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
            ]
            await query.edit_message_text(
                "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
                reply_markup=InlineKeyboardMarkup(keyboard))
        
        # –ú–µ–Ω—é YouTube
        elif query.data == 'category_youtube':
            keyboard = [
                [InlineKeyboardButton("6 –º—ñ—Å—è—Ü—ñ–≤ - 450 UAH", callback_data='youtube_6')],
                [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 750 UAH", callback_data='youtube_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order')]
            ]
            await query.edit_message_text(
                "üì∫ –û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç YouTube Premium:",
                reply_markup=InlineKeyboardMarkup(keyboard))
        
        # –ú–µ–Ω—é ChatGPT
        elif query.data == 'category_chatgpt':
            keyboard = [
                [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 650 UAH", callback_data='chatgpt_1')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order')]
            ]
            await query.edit_message_text(
                "üí¨ –û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç ChatGPT Plus:",
                reply_markup=InlineKeyboardMarkup(keyboard))
        
        # –ú–µ–Ω—é Spotify
        elif query.data == 'category_spotify':
            keyboard = [
                [InlineKeyboardButton("Premium Individual", callback_data='spotify_individual')],
                [InlineKeyboardButton("Premium Family", callback_data='spotify_family')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order')]
            ]
            await query.edit_message_text(
                "üéµ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø Spotify Premium:",
                reply_markup=InlineKeyboardMarkup(keyboard))
        
        # –ü–æ–¥–º–µ–Ω—é Spotify Individual
        elif query.data == 'spotify_individual':
            keyboard = [
                [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 125 UAH", callback_data='spotify_ind_1')],
                [InlineKeyboardButton("3 –º—ñ—Å—è—Ü—ñ - 350 UAH", callback_data='spotify_ind_3')],
                [InlineKeyboardButton("6 –º—ñ—Å—è—Ü—ñ–≤ - 550 UAH", callback_data='spotify_ind_6')],
                [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 900 UAH", callback_data='spotify_ind_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='category_spotify')]
            ]
            await query.edit_message_text(
                "üë§ Spotify Premium Individual:",
                reply_markup=InlineKeyboardMarkup(keyboard))
        
        # –ü–æ–¥–º–µ–Ω—é Spotify Family
        elif query.data == 'spotify_family':
            keyboard = [
                [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 200 UAH", callback_data='spotify_fam_1')],
                [InlineKeyboardButton("3 –º—ñ—Å—è—Ü—ñ - 569 UAH", callback_data='spotify_fam_3')],
                [InlineKeyboardButton("6 –º—ñ—Å—è—Ü—ñ–≤ - 1100 UAH", callback_data='spotify_fam_6')],
                [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 2100 UAH", callback_data='spotify_fam_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='category_spotify')]
            ]
            await query.edit_message_text(
                "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Spotify Premium Family:",
                reply_markup=InlineKeyboardMarkup(keyboard))
        
        # –ú–µ–Ω—é Discord
        elif query.data == 'category_discord':
            keyboard = [
                [InlineKeyboardButton("Nitro Basic", callback_data='discord_basic')],
                [InlineKeyboardButton("Nitro Full", callback_data='discord_full')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order')]
            ]
            await query.edit_message_text(
                "üéÆ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø Discord Nitro:",
                reply_markup=InlineKeyboardMarkup(keyboard))
        
        # –ü–æ–¥–º–µ–Ω—é Discord Basic
        elif query.data == 'discord_basic':
            keyboard = [
                [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 100 UAH", callback_data='discord_basic_1')],
                [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 900 UAH", callback_data='discord_basic_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='category_discord')]
            ]
            await query.edit_message_text(
                "üîπ Discord Nitro Basic:",
                reply_markup=InlineKeyboardMarkup(keyboard))
        
        # –ü–æ–¥–º–µ–Ω—é Discord Full
        elif query.data == 'discord_full':
            keyboard = [
                [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 170 UAH", callback_data='discord_full_1')],
                [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 1700 UAH", callback_data='discord_full_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='category_discord')]
            ]
            await query.edit_message_text(
                "‚ú® Discord Nitro Full:",
                reply_markup=InlineKeyboardMarkup(keyboard))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
        elif query.data in [
            'youtube_6', 'youtube_12',
            'chatgpt_1',
            'spotify_ind_1', 'spotify_ind_3', 'spotify_ind_6', 'spotify_ind_12',
            'spotify_fam_1', 'spotify_fam_3', 'spotify_fam_6', 'spotify_fam_12',
            'discord_basic_1', 'discord_basic_12',
            'discord_full_1', 'discord_full_12'
        ]:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['selected_product'] = query.data
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∞
            product_info = self.get_product_info(query.data)
            
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ó–∞–º–æ–≤–∏—Ç–∏", callback_data='confirm_order')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=self.get_back_action(query.data))]
            ]
            
            await query.edit_message_text(
                f"üõí –í–∏ –æ–±—Ä–∞–ª–∏:\n\n"
                f"{product_info['name']}\n"
                f"üíµ –¶—ñ–Ω–∞: {product_info['price']} UAH\n\n"
                f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å \"‚úÖ –ó–∞–º–æ–≤–∏—Ç–∏\" –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
                reply_markup=InlineKeyboardMarkup(keyboard))
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        elif query.data == 'confirm_order':
            selected_product = context.user_data.get('selected_product')
            if not selected_product:
                await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –æ–±—Ä–∞–Ω–∏–π")
                return
                
            product_info = self.get_product_info(selected_product)
            order_text = f"üõçÔ∏è –•–æ—á—É –∑–∞–º–æ–≤–∏—Ç–∏: {product_info['name']} –∑–∞ {product_info['price']} UAH"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
            active_conversations[user_id] = {
                'type': 'order',
                'user_info': query.from_user,
                'assigned_owner': None,
                'order_details': order_text
            }
            
            await query.edit_message_text(
                "‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ! –ó–∞—Å–Ω–æ–≤–Ω–∏–∫ –º–∞–≥–∞–∑–∏–Ω—É –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.\n\n"
                "–í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑ —ñ–Ω—à–∏–º –∑–∞–ø–∏—Ç–∞–Ω–Ω—è–º –∞–±–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º.",
                reply_markup=None
            )
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∑–∞–∫–∞–∑ –≤–ª–∞–¥–µ–ª—å—Ü—É
            await self.forward_order_to_owner(
                context, 
                user_id, 
                query.from_user, 
                order_text
            )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "question"
        elif query.data == 'question':
            active_conversations[user_id] = {
                'type': 'question',
                'user_info': query.from_user,
                'assigned_owner': None
            }
            await query.edit_message_text(
                "üìù –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. –Ø –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫—É –º–∞–≥–∞–∑–∏–Ω—É."
            )
        
        # –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∏–∞–ª–æ–≥–∞ –¥—Ä—É–≥–æ–º—É –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é
        elif query.data.startswith('transfer_'):
            client_id = int(query.data.split('_')[1])
            current_owner = user_id
            
            other_owner = OWNER_ID_2 if current_owner == OWNER_ID_1 else OWNER_ID_1
            other_owner_name = "@oc33t" if other_owner == OWNER_ID_2 else "@HiGki2pYYY"
            
            if client_id in active_conversations:
                active_conversations[client_id]['assigned_owner'] = other_owner
                owner_client_map[other_owner] = client_id
                if current_owner in owner_client_map:
                    del owner_client_map[current_owner]
                
                client_info = active_conversations[client_id]['user_info']
                
                await query.edit_message_text(
                    f"‚úÖ –ß–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º {client_info.first_name} –ø–µ—Ä–µ–¥–∞–Ω {other_owner_name}"
                )
                
                await context.bot.send_message(
                    chat_id=other_owner,
                    text=f"üì® –í–∞–º –ø–µ—Ä–µ–¥–∞–Ω —á–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º:\n\n"
                         f"üë§ {client_info.first_name} (@{client_info.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'})\n"
                         f"üÜî ID: {client_info.id}\n\n"
                         f"–î–ª—è –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop"
                )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        
        if user_id in [OWNER_ID_1, OWNER_ID_2]:
            await self.handle_owner_message(update, context)
            return
        
        if user_id in active_conversations:
            await self.forward_to_owner(update, context)
        else:
            keyboard = [
                [InlineKeyboardButton("üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data='order')],
                [InlineKeyboardButton("‚ùì –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏.",
                reply_markup=reply_markup
            )
    
    async def forward_to_owner(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é"""
        user_id = update.effective_user.id
        user_info = active_conversations[user_id]['user_info']
        conversation_type = active_conversations[user_id]['type']
        
        assigned_owner = active_conversations[user_id].get('assigned_owner')
        if not assigned_owner:
            assigned_owner = OWNER_ID_1
            active_conversations[user_id]['assigned_owner'] = assigned_owner
        
        owner_client_map[assigned_owner] = user_id
        
        type_emoji = "üõí" if conversation_type == 'order' else "‚ùì"
        type_text = "–ó–ê–ö–ê–ó" if conversation_type == 'order' else "–í–û–ü–†–û–°"
        owner_name = "@HiGki2pYYY" if assigned_owner == OWNER_ID_1 else "@oc33t"
        
        forward_message = f"""
{type_emoji} {type_text} –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info.first_name}
üì± Username: @{user_info.username if user_info.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üÜî ID: {user_info.id}

üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:
{update.message.text}

---
–î–ª—è –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç.
–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.
–ù–∞–∑–Ω–∞—á–µ–Ω: {owner_name}
        """
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–¥–∞—Ç—å –¥—Ä—É–≥–æ–º—É –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é", callback_data=f'transfer_{user_id}')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_message(
            chat_id=assigned_owner,
            text=forward_message.strip(),
            reply_markup=reply_markup
        )
        
        await update.message.reply_text(
            "‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥–∞–Ω–æ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫—É –º–∞–≥–∞–∑–∏–Ω—É. "
            "–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
        )
    
    async def handle_owner_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è"""
        owner_id = update.effective_user.id
        
        if owner_id not in owner_client_map:
            owner_name = "@HiGki2pYYY" if owner_id == OWNER_ID_1 else "@oc33t"
            await update.message.reply_text(
                f"–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞. ({owner_name})\n"
                f"–î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞."
            )
            return
        
        client_id = owner_client_map[owner_id]
        
        if client_id not in active_conversations:
            del owner_client_map[owner_id]
            await update.message.reply_text(
                "–î–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω."
            )
            return
        
        try:
            await context.bot.send_message(
                chat_id=client_id,
                text=f"üì© –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –º–∞–≥–∞–∑–∏–Ω—É:\n\n{update.message.text}"
            )
            
            client_info = active_conversations[client_id]['user_info']
            await update.message.reply_text(
                f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {client_info.first_name}"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {client_id}: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É. "
                "–í–æ–∑–º–æ–∂–Ω–æ, –∫–ª–∏–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞."
            )
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.warning(f'Update {update} caused error {context.error}')
    
    def start_ping_service(self):
        """–ó–∞–ø—É—Å–∫ –ø–∏–Ω–≥–æ–≤–∞–ª–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if not self.ping_running:
            self.ping_running = True
            ping_thread = threading.Thread(target=self.ping_loop)
            ping_thread.daemon = True
            ping_thread.start()
            logger.info("üîÑ –ü–∏–Ω–≥–æ–≤–∞–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    
    def ping_loop(self):
        """–¶–∏–∫–ª –ø–∏–Ω–≥–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        import requests
        ping_url = f"{WEBHOOK_URL}/ping"
        
        while self.ping_running:
            try:
                response = requests.get(ping_url, timeout=10)
                if response.status_code == 200:
                    logger.info("‚úÖ Ping —É—Å–ø–µ—à–µ–Ω - —Å–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–µ–Ω")
                else:
                    logger.warning(f"‚ö†Ô∏è Ping –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
            except requests.exceptions.RequestException as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ ping: {e}")
            except Exception as e:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ ping: {e}")
            
            time.sleep(PING_INTERVAL)
    
    def get_product_info(self, product_code):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –ø–æ –µ–≥–æ –∫–æ–¥—É"""
        products = {
            'youtube_6': {'name': "YouTube Premium (6 –º—ñ—Å—è—Ü—ñ–≤)", 'price': 450},
            'youtube_12': {'name': "YouTube Premium (12 –º—ñ—Å—è—Ü—ñ–≤)", 'price': 750},
            'chatgpt_1': {'name': "ChatGPT Plus (1 –º—ñ—Å—è—Ü—å)", 'price': 650},
            'spotify_ind_1': {'name': "Spotify Premium Individual (1 –º—ñ—Å—è—Ü—å)", 'price': 125},
            'spotify_ind_3': {'name': "Spotify Premium Individual (3 –º—ñ—Å—è—Ü—ñ)", 'price': 350},
            'spotify_ind_6': {'name': "Spotify Premium Individual (6 –º—ñ—Å—è—Ü—ñ–≤)", 'price': 550},
            'spotify_ind_12': {'name': "Spotify Premium Individual (12 –º—ñ—Å—è—Ü—ñ–≤)", 'price': 900},
            'spotify_fam_1': {'name': "Spotify Premium Family (1 –º—ñ—Å—è—Ü—å)", 'price': 200},
            'spotify_fam_3': {'name': "Spotify Premium Family (3 –º—ñ—Å—è—Ü—ñ)", 'price': 569},
            'spotify_fam_6': {'name': "Spotify Premium Family (6 –º—ñ—Å—è—Ü—ñ–≤)", 'price': 1100},
            'spotify_fam_12': {'name': "Spotify Premium Family (12 –º—ñ—Å—è—Ü—ñ–≤)", 'price': 2100},
            'discord_basic_1': {'name': "Discord Nitro Basic (1 –º—ñ—Å—è—Ü—å)", 'price': 100},
            'discord_basic_12': {'name': "Discord Nitro Basic (12 –º—ñ—Å—è—Ü—ñ–≤)", 'price': 900},
            'discord_full_1': {'name': "Discord Nitro Full (1 –º—ñ—Å—è—Ü—å)", 'price': 170},
            'discord_full_12': {'name': "Discord Nitro Full (12 –º—ñ—Å—è—Ü—ñ–≤)", 'price': 1700},
        }
        return products.get(product_code, {'name': "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–æ–≤–∞—Ä", 'price': 0})
    
    def get_back_action(self, product_code):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≤–∞—Ä–∞"""
        category_map = {
            'youtube_6': 'category_youtube',
            'youtube_12': 'category_youtube',
            'chatgpt_1': 'category_chatgpt',
            'spotify_ind_1': 'spotify_individual',
            'spotify_ind_3': 'spotify_individual',
            'spotify_ind_6': 'spotify_individual',
            'spotify_ind_12': 'spotify_individual',
            'spotify_fam_1': 'spotify_family',
            'spotify_fam_3': 'spotify_family',
            'spotify_fam_6': 'spotify_family',
            'spotify_fam_12': 'spotify_family',
            'discord_basic_1': 'discord_basic',
            'discord_basic_12': 'discord_basic',
            'discord_full_1': 'discord_full',
            'discord_full_12': 'discord_full',
        }
        return category_map.get(product_code, 'order')
    
    async def forward_order_to_owner(self, context, client_id, client_info, order_text):
        """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –∑–∞–∫–∞–∑ –≤–ª–∞–¥–µ–ª—å—Ü—É"""
        assigned_owner = OWNER_ID_1  # –ü–µ—Ä–≤—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        active_conversations[client_id]['assigned_owner'] = assigned_owner
        owner_client_map[assigned_owner] = client_id
        
        owner_name = "@HiGki2pYYY" if assigned_owner == OWNER_ID_1 else "@oc33t"
        
        forward_message = f"""
üõí –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø!

üë§ –ö–ª—ñ—î–Ω—Ç: {client_info.first_name}
üì± Username: @{client_info.username if client_info.username else '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}
üÜî ID: {client_info.id}

üìã –î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:
{order_text}

---
–î–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /stop.
–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–æ: {owner_name}
        """
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–¥–∞—Ç–∏ —ñ–Ω—à–æ–º—É –∑–∞—Å–Ω–æ–≤–Ω–∏–∫—É", callback_data=f'transfer_{client_id}')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_message(
            chat_id=assigned_owner,
            text=forward_message.strip(),
            reply_markup=reply_markup
        )

bot_instance = TelegramBot()

@flask_app.route('/ping', methods=['GET'])
def ping():
    return jsonify({
        'status': 'alive',
        'message': 'Bot is running',
        'timestamp': time.time(),
        'uptime': time.time() - flask_app.start_time if hasattr(flask_app, 'start_time') else 0,
        'bot_running': bot_running,
        'mode': 'polling' if USE_POLLING else 'webhook'
    }), 200

@flask_app.route('/health', methods=['GET'])
def health():
    return jsonify({
        'status': 'healthy',
        'bot_token': f"{BOT_TOKEN[:10]}..." if BOT_TOKEN else "Not set",
        'active_conversations': len(active_conversations),
        'owner_client_map': len(owner_client_map),
        'ping_interval': PING_INTERVAL,
        'webhook_url': WEBHOOK_URL,
        'initialized': bot_instance.initialized if bot_instance else False,
        'bot_running': bot_running,
        'mode': 'polling' if USE_POLLING else 'webhook'
    }), 200

@flask_app.route(f'/{BOT_TOKEN}', methods=['POST'])
def webhook():
    if USE_POLLING:
        return jsonify({'error': 'Webhook disabled in polling mode'}), 400
    
    global telegram_app
    
    if not telegram_app or not bot_instance.initialized:
        logger.error("Telegram app –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return jsonify({'error': 'Bot not initialized'}), 500
    
    try:
        json_data = request.get_json()
        if json_data:
            update = Update.de_json(json_data, telegram_app.bot)
            pass
        return '', 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return jsonify({'error': str(e)}), 500

@flask_app.route('/', methods=['GET'])
def index():
    return jsonify({
        'message': 'Telegram Bot SecureShop –∞–∫—Ç–∏–≤–µ–Ω',
        'status': 'running',
        'mode': 'polling' if USE_POLLING else 'webhook',
        'webhook_url': f"{WEBHOOK_URL}/{BOT_TOKEN}" if not USE_POLLING else None,
        'ping_interval': f"{PING_INTERVAL} —Å–µ–∫—É–Ω–¥",
        'owners': ['@HiGki2pYYY', '@oc33t'],
        'initialized': bot_instance.initialized if bot_instance else False,
        'bot_running': bot_running
    }), 200

async def setup_webhook():
    if USE_POLLING:
        try:
            await telegram_app.bot.delete_webhook()
            logger.info("üóëÔ∏è Webhook —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling —Ä–µ–∂–∏–º")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: {e}")
        return True
    
    try:
        webhook_url = f"{WEBHOOK_URL}/{BOT_TOKEN}"
        await telegram_app.bot.set_webhook(webhook_url)
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
        return False

async def start_bot():
    global telegram_app, bot_running
    
    with bot_lock:
        if bot_running:
            logger.warning("üõë –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫")
            return
        
        try:
            await bot_instance.initialize()
            telegram_app = bot_instance.application
            
            if USE_POLLING:
                await setup_webhook()
                await bot_instance.start_polling()
                bot_running = True
                logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ polling —Ä–µ–∂–∏–º–µ")
            else:
                success = await setup_webhook()
                if success:
                    bot_running = True
                    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ webhook —Ä–µ–∂–∏–º–µ")
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å webhook")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            bot_running = False
            raise

def bot_thread():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    bot_instance.loop = loop
    
    try:
        loop.run_until_complete(start_bot())
        if USE_POLLING:
            loop.run_forever()
    except Conflict as e:
        logger.error(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç: {e}")
        logger.warning("üïí –û–∂–∏–¥–∞–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º...")
        time.sleep(30)
        bot_thread()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ bot_thread: {e}")
        logger.warning("üïí –û–∂–∏–¥–∞–µ–º 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º...")
        time.sleep(15)
        bot_thread()
    finally:
        try:
            if not loop.is_closed():
                loop.close()
        except:
            pass
        logger.warning("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –±–æ—Ç–∞...")
        time.sleep(5)
        bot_thread()

def main():
    flask_app.start_time = time.time()
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ SecureShop Telegram Bot...")
    logger.info(f"üîë BOT_TOKEN: {BOT_TOKEN[:10]}...")
    logger.info(f"üåê PORT: {PORT}")
    logger.info(f"üì° WEBHOOK_URL: {WEBHOOK_URL}")
    logger.info(f"‚è∞ PING_INTERVAL: {PING_INTERVAL} —Å–µ–∫—É–Ω–¥")
    logger.info(f"üîÑ –†–ï–ñ–ò–ú: {'Polling' if USE_POLLING else 'Webhook'}")
    logger.info(f"üë§ –û—Å–Ω–æ–≤–∞—Ç–µ–ª—å 1: {OWNER_ID_1} (@HiGki2pYYY)")
    logger.info(f"üë§ –û—Å–Ω–æ–≤–∞—Ç–µ–ª—å 2: {OWNER_ID_2} (@oc33t)")
    
    bot_thread_instance = threading.Thread(target=bot_thread)
    bot_thread_instance.daemon = True
    bot_thread_instance.start()
    
    time.sleep(3)
    
    bot_instance.start_ping_service()
    
    logger.info("üåê –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞...")
    flask_app.run(
        host='0.0.0.0',
        port=PORT,
        debug=False,
        use_reloader=False,
        threaded=True
    )

if __name__ == '__main__':
    main()
