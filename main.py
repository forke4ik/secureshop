import logging
import os
import asyncio
import threading
import time
import json
import re
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, User, BotCommandScopeChat
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.error import Conflict
from flask import Flask, request, jsonify
import psycopg
from psycopg.rows import dict_row
import io
from flask import request, jsonify
import json

@flask_app.route('/api/order', methods=['POST'])
async def api_create_order():
    try:
        data = request.json
        items = data.get('items', [])
        total = data.get('total', 0)
        
        if not items:
            return jsonify({'success': False, 'error': '–ü—É—Å—Ç–∏–π –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'}), 400
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
        order_text = "üõçÔ∏è –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Å–∞–π—Ç—É:\n\n"
        for item in items:
            order_text += f"‚ñ´Ô∏è {item.get('service', '')} {item.get('plan', '')} ({item.get('period', '')}) - {item.get('price', 0)} UAH\n"
        order_text += f"\nüí≥ –í—Å—å–æ–≥–æ: {total} UAH"
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # –ü–æ–∫–∞ –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±–æ–∏–º –≤–ª–∞–¥–µ–ª—å—Ü–∞–º
        for owner_id in [OWNER_ID_1, OWNER_ID_2]:
            try:
                await telegram_app.application.bot.send_message(
                    chat_id=owner_id,
                    text=order_text
                )
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–∏–∫—É {owner_id}: {e}")
        
        return jsonify({'success': True}), 200
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ API /api/order: {e}")
        return jsonify({'success': False, 'error': '–°–µ—Ä–≤–µ—Ä–Ω–∞ –ø–æ–º–∏–ª–∫–∞'}), 500

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', '8181378677:AAFullvwrNhPJMi_HxgC75qSEKWdKOtCpbw')
OWNER_ID_1 = 7106925462  # @HiGki2pYYY
OWNER_ID_2 = 6279578957  # @oc33t
PORT = int(os.getenv('PORT', 8443))
WEBHOOK_URL = os.getenv('WEBHOOK_URL', 'https://secureshop-3obw.onrender.com')
PING_INTERVAL = int(os.getenv('PING_INTERVAL', 840))  # 14 –º–∏–Ω—É—Ç
USE_POLLING = os.getenv('USE_POLLING', 'true').lower() == 'true'
DATABASE_URL = os.getenv('DATABASE_URL', 'postgresql://neondb_owner:npg_1E2GxznybVCR@ep-super-pond-a2ce35gl-pooler.eu-central-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require')

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏
STATS_FILE = "bot_stats.json"

# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î
BUFFER_FLUSH_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç
BUFFER_MAX_SIZE = 50
message_buffer = []
active_conv_buffer = []
user_cache = set()

# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∫—ç—à –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
history_cache = {}

def flush_message_buffer():
    global message_buffer
    if not message_buffer:
        return
        
    try:
        with psycopg.connect(DATABASE_URL) as conn:
            with conn.cursor() as cur:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                cur.execute("""
                    CREATE TEMP TABLE temp_messages (
                        user_id BIGINT,
                        message TEXT,
                        is_from_user BOOLEAN
                    ) ON COMMIT DROP;
                """)
                
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                for msg in message_buffer:
                    cur.execute(
                        "INSERT INTO temp_messages (user_id, message, is_from_user) VALUES (%s, %s, %s)",
                        msg
                    )
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
                cur.execute("""
                    INSERT INTO messages (user_id, message, is_from_user)
                    SELECT user_id, message, is_from_user
                    FROM temp_messages
                """)
        logger.info(f"‚úÖ –°–±—Ä–æ—à–µ–Ω –±—É—Ñ–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π ({len(message_buffer)} –∑–∞–ø–∏—Å–µ–π)")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –±—É—Ñ–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    finally:
        message_buffer = []

def flush_active_conv_buffer():
    global active_conv_buffer
    if not active_conv_buffer:
        return
        
    try:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ user_id (–±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é)
        latest_convs = {}
        for conv in active_conv_buffer:
            user_id = conv[0]
            latest_convs[user_id] = conv  # –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        with psycopg.connect(DATABASE_URL) as conn:
            with conn.cursor() as cur:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ë–ï–ó –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
                cur.execute("""
                    CREATE TEMP TABLE temp_active_convs (
                        user_id BIGINT,
                        conversation_type VARCHAR(50),
                        assigned_owner BIGINT,
                        last_message TEXT
                    ) ON COMMIT DROP;
                """)
                
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                for conv in latest_convs.values():
                    cur.execute(
                        "INSERT INTO temp_active_convs VALUES (%s, %s, %s, %s)",
                        conv
                    )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                cur.execute("""
                    INSERT INTO active_conversations AS ac
                    (user_id, conversation_type, assigned_owner, last_message)
                    SELECT user_id, conversation_type, assigned_owner, last_message
                    FROM temp_active_convs
                    ON CONFLICT (user_id) DO UPDATE
                    SET conversation_type = EXCLUDED.conversation_type,
                        assigned_owner = EXCLUDED.assigned_owner,
                        last_message = EXCLUDED.last_message,
                        updated_at = CURRENT_TIMESTAMP
                    WHERE ac.updated_at < EXCLUDED.updated_at;
                """)
        logger.info(f"‚úÖ –°–±—Ä–æ—à–µ–Ω –±—É—Ñ–µ—Ä –¥–∏–∞–ª–æ–≥–æ–≤ ({len(active_conv_buffer)} –∑–∞–ø–∏—Å–µ–π)")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –±—É—Ñ–µ—Ä–∞ –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
    finally:
        active_conv_buffer = []

def buffer_flush_thread():
    """–ü–æ—Ç–æ–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–±—Ä–æ—Å–∞ –±—É—Ñ–µ—Ä–æ–≤ –≤ –ë–î"""
    while True:
        time.sleep(BUFFER_FLUSH_INTERVAL)
        flush_message_buffer()
        flush_active_conv_buffer()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with psycopg.connect(DATABASE_URL) as conn:
            with conn.cursor() as cur:
                # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                cur.execute("""
                    CREATE TABLE IF NOT EXISTS users (
                        id BIGINT PRIMARY KEY,
                        username VARCHAR(255),
                        first_name VARCHAR(255),
                        last_name VARCHAR(255),
                        language_code VARCHAR(10),
                        is_bot BOOLEAN,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    );
                """)
                
                # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                cur.execute("""
                    CREATE TABLE IF NOT EXISTS messages (
                        id SERIAL PRIMARY KEY,
                        user_id BIGINT REFERENCES users(id),
                        message TEXT,
                        is_from_user BOOLEAN,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    );
                """)
                
                # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
                cur.execute("""
                    CREATE TABLE IF NOT EXISTS active_conversations (
                        user_id BIGINT PRIMARY KEY REFERENCES users(id),
                        conversation_type VARCHAR(50),
                        assigned_owner BIGINT,
                        last_message TEXT,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    );
                """)
                
                # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                cur.execute("CREATE INDEX IF NOT EXISTS idx_messages_user_id ON messages(user_id);")
                cur.execute("CREATE INDEX IF NOT EXISTS idx_messages_created_at ON messages(created_at);")
                
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

def ensure_user_exists(user):
    """–£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)"""
    if user.id in user_cache:
        return
        
    try:
        with psycopg.connect(DATABASE_URL) as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    INSERT INTO users (id, username, first_name, last_name, language_code, is_bot)
                    VALUES (%s, %s, %s, %s, %s, %s)
                    ON CONFLICT (id) DO UPDATE
                    SET username = EXCLUDED.username,
                        first_name = EXCLUDED.first_name,
                        last_name = EXCLUDED.last_name,
                        language_code = EXCLUDED.language_code,
                        is_bot = EXCLUDED.is_bot,
                        updated_at = CURRENT_TIMESTAMP;
                """, (user.id, user.username, user.first_name, user.last_name, user.language_code, user.is_bot))
        user_cache.add(user.id)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

def save_message(user_id, message_text, is_from_user):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä"""
    global message_buffer
    message_buffer.append((user_id, message_text, is_from_user))
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
    if len(message_buffer) >= BUFFER_MAX_SIZE:
        flush_message_buffer()

def save_active_conversation(user_id, conversation_type, assigned_owner, last_message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –≤ –±—É—Ñ–µ—Ä —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö"""
    global active_conv_buffer
    
    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
    updated = False
    for i, record in enumerate(active_conv_buffer):
        if record[0] == user_id:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            active_conv_buffer[i] = (
                user_id, 
                conversation_type, 
                assigned_owner, 
                last_message
            )
            updated = True
            break
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
    if not updated:
        active_conv_buffer.append((
            user_id, 
            conversation_type, 
            assigned_owner, 
            last_message
        ))
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
    if len(active_conv_buffer) >= BUFFER_MAX_SIZE:
        flush_active_conv_buffer()

def delete_active_conversation(user_id):
    """–£–¥–∞–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with psycopg.connect(DATABASE_URL) as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    DELETE FROM active_conversations 
                    WHERE user_id = %s
                    AND (updated_at < NOW() - INTERVAL '1 MINUTE' OR updated_at IS NULL)
                """, (user_id,))
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞: {e}")

def get_conversation_history(user_id, limit=50):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)"""
    # –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    flush_message_buffer()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à, –µ—Å–ª–∏ –µ—Å—Ç—å
    cache_key = f"{user_id}_{limit}"
    if cache_key in history_cache:
        return history_cache[cache_key]
    
    try:
        with psycopg.connect(DATABASE_URL) as conn:
            with conn.cursor(row_factory=dict_row) as cur:
                cur.execute("""
                    SELECT * FROM messages
                    WHERE user_id = %s
                    ORDER BY created_at DESC
                    LIMIT %s
                """, (user_id, limit))
                history = cur.fetchall()
                history_cache[cache_key] = history
                return history
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return []

def get_all_users():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with psycopg.connect(DATABASE_URL) as conn:
            with conn.cursor(row_factory=dict_row) as cur:
                cur.execute("SELECT * FROM users ORDER BY created_at DESC")
                return cur.fetchall()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []

def get_total_users_count():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        with psycopg.connect(DATABASE_URL) as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT COUNT(*) FROM users")
                return cur.fetchone()[0]
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return 0

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
init_db()

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —Å–±—Ä–æ—Å–∞ –±—É—Ñ–µ—Ä–æ–≤
threading.Thread(target=buffer_flush_thread, daemon=True).start()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def load_stats():
    if os.path.exists(STATS_FILE):
        try:
            with open(STATS_FILE, 'r') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return default_stats()
    return default_stats()

def default_stats():
    return {
        'total_users': 0,
        'active_users': [],
        'total_orders': 0,
        'total_questions': 0,
        'first_start': datetime.now().isoformat(),
        'last_save': datetime.now().isoformat()
    }

def save_stats():
    try:
        bot_statistics['last_save'] = datetime.now().isoformat()
        with open(STATS_FILE, 'w') as f:
            json.dump(bot_statistics, f, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
bot_statistics = load_stats()

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
active_conversations = {}
owner_client_map = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
telegram_app = None
flask_app = Flask(__name__)
bot_running = False
bot_lock = threading.Lock()  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º –∫ –±–æ—Ç—É

class TelegramBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
        self.ping_running = False
        self.initialized = False
        self.polling_task = None
        self.loop = None
    
    async def set_commands_menu(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥"""
        commands = [
            ("start", "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"),
            ("help", "–î–æ–ø–æ–º–æ–≥–∞ —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"),
            ("order", "–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"),
            ("question", "–ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è"),
            ("pay", "–û–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"),
            ("channel", "–ù–∞—à –≥–æ–ª–æ–≤–Ω–∏–π –∫–∞–Ω–∞–ª"),
            ("stop", "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –¥—ñ–∞–ª–æ–≥")
        ]
        
        # –î–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        owner_commands = commands + [
            ("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"),
            ("chats", "–ê–∫—Ç–∏–≤–Ω—ñ —á–∞—Ç–∏"),
            ("history", "–Ü—Å—Ç–æ—Ä—ñ—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏"),
            ("dialog", "–ü–æ—á–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        ]
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await self.application.bot.set_my_commands(commands)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
            for owner_id in [OWNER_ID_1, OWNER_ID_2]:
                await self.application.bot.set_my_commands(
                    owner_commands,
                    scope=BotCommandScopeChat(owner_id)
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("pay", self.pay_command))
        self.application.add_handler(CommandHandler("stop", self.stop_conversation))
        self.application.add_handler(CommandHandler("stats", self.show_stats))
        self.application.add_handler(CommandHandler("help", self.show_help))
        self.application.add_handler(CommandHandler("channel", self.channel_command))
        self.application.add_handler(CommandHandler("order", self.order_command))
        self.application.add_handler(CommandHandler("question", self.question_command))
        self.application.add_handler(CommandHandler("chats", self.show_active_chats))
        self.application.add_handler(CommandHandler("history", self.show_conversation_history))
        self.application.add_handler(CommandHandler("dialog", self.start_dialog_command))
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_error_handler(self.error_handler)
    
    async def initialize(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            await self.application.initialize()
            await self.set_commands_menu()
            self.initialized = True
            logger.info("‚úÖ Telegram Application –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Application: {e}")
            raise
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ polling —Ä–µ–∂–∏–º–∞"""
        try:
            if self.application.updater.running:
                logger.warning("üõë –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫")
                return
            
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ polling —Ä–µ–∂–∏–º–∞...")
            await self.application.start()
            await self.application.updater.start_polling(
                poll_interval=1.0,
                timeout=10,
                bootstrap_retries=-1,
                read_timeout=10,
                write_timeout=10,
                connect_timeout=10,
                pool_timeout=10
            )
            logger.info("‚úÖ Polling –∑–∞–ø—É—â–µ–Ω")
        except Conflict as e:
            logger.error(f"üö® –ö–æ–Ω—Ñ–ª–∏–∫—Ç: {e}")
            logger.warning("üïí –û–∂–∏–¥–∞–µ–º 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
            await asyncio.sleep(15)
            await self.start_polling()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ polling: {e}")
            raise
    
    async def stop_polling(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling"""
        try:
            if self.application.updater and self.application.updater.running:
                await self.application.updater.stop()
            if self.application.running:
                await self.application.stop()
            if self.application.post_init:
                await self.application.shutdown()
            logger.info("üõë Polling –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ polling: {e}")
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π deep linking —Å —Å–∞–π—Ç–∞"""
        user = update.effective_user
        
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        ensure_user_exists(user)
        
        # –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /start –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (—Å —Å–∞–π—Ç–∞)
        if context.args:
            # –°–∫–ª–µ–∏–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
            args_str = " ".join(context.args)
            
            # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "/pay", –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë
            if args_str.startswith("/pay"):
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /pay
                context.args = args_str.split()[1:]  # –£–±–∏—Ä–∞–µ–º "/pay"
                await self.pay_command(update, context)
                return
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã deep link –æ—Ç {user.id}: {args_str}")
        
        # ---- –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫ /start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ----
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if user.id not in bot_statistics['active_users']:
            bot_statistics['total_users'] += 1
            bot_statistics['active_users'].append(user.id)
            save_stats()
        
        # –î–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π
        if user.id in [OWNER_ID_1, OWNER_ID_2]:
            owner_name = "@HiGki2pYYY" if user.id == OWNER_ID_1 else "@oc33t"
            await update.message.reply_text(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}! ({owner_name})\n"
                f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å –º–∞–≥–∞–∑–∏–Ω–∞."
            )
            return
        
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        keyboard = [
            [InlineKeyboardButton("üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data='order')],
            [InlineKeyboardButton("‚ùì –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')],
            [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        welcome_message = f"""
–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, {user.first_name}! üëã

–Ø –±–æ—Ç-–ø–æ–º—ñ—á–Ω–∏–∫ –Ω–∞—à–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:
        """
        
        await update.message.reply_text(
            welcome_message.strip(),
            reply_markup=reply_markup
        )
    
    async def pay_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pay –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        user = update.effective_user
        user_id = user.id
        
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        ensure_user_exists(user)
        
        # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã
        try:
            if not context.args:
                await update.message.reply_text(
                    "‚ÑπÔ∏è –î–ª—è –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "/pay service=<–Ω–∞–∑–≤–∞–Ω–∏–µ> plan=<—Ç–∞—Ä–∏—Ñ> period=<–ø–µ—Ä–∏–æ–¥> price=<—Ü–µ–Ω–∞>\n\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: /pay service=ChatGPT plan=Plus period=1 –º–µ—Å—è—Ü price=650"
                )
                return
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
            args_str = " ".join(context.args)
            
            # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
            params = {}
            pattern = r'(\w+)=([^=]+?)(?=\s+\w+=|$)'
            matches = re.findall(pattern, args_str)
            
            for key, value in matches:
                params[key.lower()] = value.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            required = ['service', 'period', 'price']
            for param in required:
                if param not in params:
                    await update.message.reply_text(
                        f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: {param}\n\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."
                    )
                    return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
            service = params.get('service', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å')
            plan = params.get('plan', '')
            period = params.get('period', '')
            price = params.get('price', 0)
            
            try:
                price = int(price)
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
                return
            
            order_text = f"üõçÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n‚ñ´Ô∏è {service}"
            if plan:
                order_text += f" {plan}"
            order_text += f" ({period}) - {price} UAH"
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–∫–∞–∑–µ
            active_conversations[user_id] = {
                'type': 'order',
                'user_info': user,
                'assigned_owner': None,
                'order_details': order_text,
                'last_message': order_text,
                'from_website': True
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            save_active_conversation(user_id, 'order', None, order_text)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            bot_statistics['total_orders'] += 1
            save_stats()
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∑–∞–∫–∞–∑ –æ–±–æ–∏–º –≤–ª–∞–¥–µ–ª—å—Ü–∞–º
            await self.forward_order_to_owners(
                context, 
                user_id, 
                user, 
                order_text
            )
            
            await update.message.reply_text(
                "‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ! –ó–∞—Å–Ω–æ–≤–Ω–∏–∫ –º–∞–≥–∞–∑–∏–Ω—É –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.\n\n"
                "–í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑ —ñ–Ω—à–∏–º –∑–∞–ø–∏—Ç–∞–Ω–Ω—è–º –∞–±–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º."
            )
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ /pay: {e}")
            await update.message.reply_text(
                "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            )
    
    async def show_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE = None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ"""
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏
        if isinstance(update, Update):
            message = update.message
        else:
            message = update  # –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ –∫–Ω–æ–ø–∫–∏
        
        help_text = """
üëã –î–æ–±—Ä–æ–≥–æ –¥–Ω—è! –Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω—É SecureShop.

üîê –ù–∞—à —Å–µ—Ä–≤—ñ—Å –∫—É–ø—É—î –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤–∞—à –≥–æ—Ç–æ–≤–∏–π –∞–∫–∞—É–Ω—Ç, –∞ –Ω–µ –¥–∞—î –≤–∞–º —Å–≤—ñ–π. –ú–∏ –¥—É–∂–µ —Å—Ç–∞—Ä–∞—î–º–æ—Å—å –±—É—Ç–∏ –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏, —Ç–æ–º—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –±—É–¥—å-—è–∫—ñ –ø–∏—Ç–∞–Ω–Ω—è –ø–æ –Ω–∞—à–æ–º—É —Å–µ—Ä–≤—ñ—Å—É –º–æ–∂–Ω–∞ –∑–∞–¥–∞–≤–∞—Ç–∏ —Ü—ñ–ª–æ–¥–æ–±–æ–≤–æ.

üìå –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:
/start - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
/order - –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
/pay - –û–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–¥–ª—è –ø–æ–∫—É–ø–æ–∫ –∑ —Å–∞–π—Ç—É)
/question - –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
/channel - –ù–∞—à –∫–∞–Ω–∞–ª –∑ –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏ —Ç–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞–º–∏
/stop - –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –¥—ñ–∞–ª–æ–≥
/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞

üí¨ –Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è, –Ω–µ —Å–æ—Ä–æ–º—Ç–µ—Å—è –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è!
        """
        await message.reply_text(help_text.strip())
    
    async def channel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª"""
        keyboard = [[
            InlineKeyboardButton(
                "üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ SecureShopUA", 
                url="https://t.me/SecureShopUA"
            )
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = """
üì¢ –ù–∞—à –≥–æ–ª–æ–≤–Ω–∏–π –∫–∞–Ω–∞–ª –∑ –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏ —Ç–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞–º–∏:

üëâ –¢—É—Ç –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ:
- üÜï –ê–∫—Ç—É–∞–ª—å–Ω—ñ —Ç–æ–≤–∞—Ä–∏ —Ç–∞ –ø–æ—Å–ª—É–≥–∏
- üî• –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —Ç–∞ –∑–Ω–∏–∂–∫–∏
- üéÅ –†–æ–∑—ñ–≥—Ä–∞—à—ñ —Ç–∞ –∞–∫—Ü—ñ—ó
- ‚ÑπÔ∏è –í–∞–∂–ª–∏–≤—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—É

–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å, —â–æ–± –±—É—Ç–∏ –≤ –∫—É—Ä—Å—ñ –≤—Å—ñ—Ö –Ω–æ–≤–∏–Ω! üëá
        """
        await update.message.reply_text(
            message_text.strip(),
            reply_markup=reply_markup
        )
    
    async def order_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /order"""
        keyboard = [
            [InlineKeyboardButton("üí¨ ChatGPT", callback_data='category_chatgpt')],
            [InlineKeyboardButton("üéÆ Discord", callback_data='category_discord')],
            [InlineKeyboardButton("üìö Duolingo", callback_data='category_duolingo')],
            [InlineKeyboardButton("üì∏ PicsArt", callback_data='category_picsart')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        await update.message.reply_text(
            "üì¶ –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def question_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /question"""
        user = update.effective_user
        user_id = user.id
        
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        ensure_user_exists(user)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
        if user_id in active_conversations:
            await update.message.reply_text(
                "‚ùó –£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥.\n\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –ø–∏—Å–∞—Ç–∏ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –¥—ñ–∞–ª–æ–∑—ñ –∞–±–æ –∑–∞–≤–µ—Ä—à—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /stop, "
                "—è–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥."
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤–æ–ø—Ä–æ—Å–µ
        active_conversations[user_id] = {
            'type': 'question',
            'user_info': user,
            'assigned_owner': None,
            'last_message': "–ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è"
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        save_active_conversation(user_id, 'question', None, "–ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        bot_statistics['total_questions'] += 1
        save_stats()
        
        await update.message.reply_text(
            "üìù –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. –Ø –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫—É –º–∞–≥–∞–∑–∏–Ω—É.\n\n"
            "–©–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ü–µ–π –¥—ñ–∞–ª–æ–≥ –ø—ñ–∑–Ω—ñ—à–µ, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop."
        )
    
    async def stop_conversation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤"""
        user = update.effective_user
        user_id = user.id
        user_name = user.first_name

        # –î–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
        if user_id in [OWNER_ID_1, OWNER_ID_2] and user_id in owner_client_map:
            client_id = owner_client_map[user_id]
            client_info = active_conversations.get(client_id, {}).get('user_info')

            try:
                await context.bot.send_message(
                    chat_id=client_id,
                    text="–î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫–æ–º –º–∞–≥–∞–∑–∏–Ω—É. –Ø–∫—â–æ —É –≤–∞—Å —î –Ω–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ—é /start."
                )
                if client_info:
                    await update.message.reply_text(f"‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥—ñ–∞–ª–æ–≥ –∑ –∫–ª—ñ—î–Ω—Ç–æ–º {client_info.first_name}.")
                else:
                    await update.message.reply_text(f"‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥—ñ–∞–ª–æ–≥ –∑ –∫–ª—ñ—î–Ω—Ç–æ–º ID {client_id}.")

            except Exception as e:
                if "Chat_id is empty" in str(e):
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ {client_id}: –Ω–µ–≤—ñ—Ä–Ω–∏–π chat_id")
                else:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞ {client_id} –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É: {e}")
                await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ (–º–æ–∂–ª–∏–≤–æ, –≤—ñ–Ω –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞), –∞–ª–µ –¥—ñ–∞–ª–æ–≥ –±—É–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑ –≤–∞—à–æ–≥–æ –±–æ–∫—É.")

            if client_id in active_conversations:
                del active_conversations[client_id]
            if user_id in owner_client_map:
                del owner_client_map[user_id]
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            delete_active_conversation(client_id)
            return

        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞
        if user_id in active_conversations:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –±—ã–ª –Ω–∞–∑–Ω–∞—á–µ–Ω –∏ ID –≤–∞–ª–∏–¥–µ–Ω
            if 'assigned_owner' in active_conversations[user_id] and active_conversations[user_id]['assigned_owner'] is not None:
                owner_id = active_conversations[user_id]['assigned_owner']
                try:
                    await context.bot.send_message(
                        chat_id=owner_id,
                        text=f"‚ÑπÔ∏è –ö–ª—ñ—î–Ω—Ç {user_name} –∑–∞–≤–µ—Ä—à–∏–≤ –¥—ñ–∞–ª–æ–≥ –∫–æ–º–∞–Ω–¥–æ—é /stop."
                    )
                    if owner_id in owner_client_map:
                        del owner_client_map[owner_id]
                except Exception as e:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø—É—Å—Ç–æ–≥–æ chat_id
                    if "Chat_id is empty" in str(e):
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–∏–∫–∞ {owner_id}: –Ω–µ–≤—ñ—Ä–Ω–∏–π chat_id")
                    else:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–∏–∫–∞ {owner_id}: {e}")

            # –£–¥–∞–ª—è–µ–º –¥–∏–∞–ª–æ–≥
            del active_conversations[user_id]
            await update.message.reply_text(
                "‚úÖ –í–∞—à –¥—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n\n"
                "–í–∏ –º–æ–∂–µ—Ç–µ —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /start."
            )
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            delete_active_conversation(user_id)
            return

        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
        await update.message.reply_text(
            "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.\n\n"
            "–©–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /start."
        )
    
    async def show_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π"""
        owner_id = update.effective_user.id
        
        if owner_id not in [OWNER_ID_1, OWNER_ID_2]:
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã
        total_users_db = get_total_users_count()
        
        first_start = datetime.fromisoformat(bot_statistics['first_start'])
        last_save = datetime.fromisoformat(bot_statistics['last_save'])
        uptime = datetime.now() - first_start
        
        stats_message = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

üë§ –£—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—Ñ–∞–π–ª): {bot_statistics['total_users']}
üë§ –£—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–ë–î): {total_users_db}
üõí –£—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å: {bot_statistics['total_orders']}
‚ùì –£—Å—å–æ–≥–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—å: {bot_statistics['total_questions']}
‚è±Ô∏è –ü–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫: {first_start.strftime('%d.%m.%Y %H:%M')}
‚è±Ô∏è –û—Å—Ç–∞–Ω–Ω—î –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {last_save.strftime('%d.%m.%Y %H:%M')}
‚è±Ô∏è –ß–∞—Å —Ä–æ–±–æ—Ç–∏: {uptime}
        """
        
        await update.message.reply_text(stats_message.strip())
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON
        all_users = get_all_users()
        if all_users:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON
            users_data = []
            for user in all_users:
                users_data.append({
                    'id': user['id'],
                    'username': user['username'],
                    'first_name': user['first_name'],
                    'last_name': user['last_name'],
                    'language_code': user['language_code'],
                    'is_bot': user['is_bot'],
                    'created_at': user['created_at'].isoformat() if user['created_at'] else None,
                    'updated_at': user['updated_at'].isoformat() if user['updated_at'] else None
                })
            
            json_data = json.dumps(users_data, ensure_ascii=False, indent=2).encode('utf-8')
            file = io.BytesIO(json_data)
            file.seek(0)
            file.name = 'users_export.json'
            
            await update.message.reply_document(
                document=file,
                caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON"
            )
        else:
            await update.message.reply_text("‚ÑπÔ∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")

    async def show_active_chats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –¥–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"""
        owner_id = update.effective_user.id
        
        if owner_id not in [OWNER_ID_1, OWNER_ID_2]:
            return
            
        try:
            # –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
            flush_active_conv_buffer()
            
            with psycopg.connect(DATABASE_URL) as conn:
                with conn.cursor(row_factory=dict_row) as cur:
                    cur.execute("""
                        SELECT ac.*, u.first_name, u.username 
                        FROM active_conversations ac
                        JOIN users u ON ac.user_id = u.id
                        ORDER BY ac.updated_at DESC
                    """)
                    active_chats = cur.fetchall()
                    
            if not active_chats:
                await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤.")
                return
                
            message = "üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã:\n\n"
            keyboard = []
            for chat in active_chats:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                client_info = {
                    'first_name': chat['first_name'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
                    'username': chat['username'] or 'N/A'
                }
                
                # –î–æ–±–∞–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–º –≤–ª–∞–¥–µ–ª—å—Ü–µ
                owner_info = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
                if chat['assigned_owner']:
                    if chat['assigned_owner'] == OWNER_ID_1:
                        owner_info = "@HiGki2pYYY"
                    elif chat['assigned_owner'] == OWNER_ID_2:
                        owner_info = "@oc33t"
                    else:
                        owner_info = f"ID: {chat['assigned_owner']}"
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                username = f"@{client_info['username']}" if client_info['username'] else "–Ω–µ—Ç"
                
                message += (
                    f"üë§ {client_info['first_name']} ({username})\n"
                    f"   –¢–∏–ø: {chat['conversation_type']}\n"
                    f"   –ù–∞–∑–Ω–∞—á–µ–Ω: {owner_info}\n"
                    f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {chat['last_message'][:50]}{'...' if len(chat['last_message']) > 50 else ''}\n"
                    f"   [ID: {chat['user_id']}]\n\n"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
                keyboard.append([
                    InlineKeyboardButton(
                        f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å {client_info['first_name']}",
                        callback_data=f'continue_chat_{chat["user_id"]}'
                    )
                ])
                
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                message.strip(),
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤.")

    async def show_conversation_history(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        owner_id = update.effective_user.id
        
        if owner_id not in [OWNER_ID_1, OWNER_ID_2]:
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã (user_id)
        if not context.args:
            await update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /history <user_id>")
            return
            
        try:
            user_id = int(context.args[0])
            history = get_conversation_history(user_id)
            
            if not history:
                await update.message.reply_text(f"‚ÑπÔ∏è –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            with psycopg.connect(DATABASE_URL) as conn:
                with conn.cursor(row_factory=dict_row) as cur:
                    cur.execute("SELECT * FROM users WHERE id = %s", (user_id,))
                    user_info = cur.fetchone()
                    
            if not user_info:
                user_info = {'first_name': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π', 'username': 'N/A'}
            
            message = (
                f"üì® –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:\n\n"
                f"üë§ {user_info['first_name']} (@{user_info.get('username', 'N/A')})\n"
                f"üÜî ID: {user_id}\n\n"
            )
            
            for msg in reversed(history):  # –í —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
                sender = "üë§ –ö–ª–∏–µ–Ω—Ç" if msg['is_from_user'] else "üë®‚Äçüíº –ú–∞–≥–∞–∑–∏–Ω"
                message += f"{sender} [{msg['created_at'].strftime('%d.%m.%Y %H:%M')}]:\n{msg['message']}\n\n"
            
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            max_length = 4096
            if len(message) > max_length:
                parts = [message[i:i+max_length] for i in range(0, len(message), max_length)]
                for part in parts:
                    await update.message.reply_text(part)
            else:
                await update.message.reply_text(message)
                
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏.")

    async def start_dialog_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–æ ID"""
        owner_id = update.effective_user.id
        if owner_id not in [OWNER_ID_1, OWNER_ID_2]:
            return

        if not context.args:
            await update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /dialog <user_id>")
            return

        try:
            client_id = int(context.args[0])
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
        try:
            with psycopg.connect(DATABASE_URL) as conn:
                with conn.cursor(row_factory=dict_row) as cur:
                    cur.execute("SELECT * FROM users WHERE id = %s", (client_id,))
                    client_info = cur.fetchone()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")
            return

        if not client_info:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        client_user = User(
            id=client_info['id'],
            first_name=client_info['first_name'],
            last_name=client_info.get('last_name', ''),
            username=client_info.get('username', ''),
            language_code=client_info.get('language_code', ''),
            is_bot=False
        )

        # –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
        if client_id not in active_conversations:
            active_conversations[client_id] = {
                'type': 'manual',
                'user_info': client_user,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                'assigned_owner': owner_id,
                'last_message': "–î–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º"
            }
            save_active_conversation(client_id, 'manual', owner_id, "–î–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º")
        else:
            # –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ —É–∂–µ –µ—Å—Ç—å, –Ω–∞–∑–Ω–∞—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è
            active_conversations[client_id]['assigned_owner'] = owner_id
            save_active_conversation(
                client_id, 
                active_conversations[client_id]['type'], 
                owner_id, 
                active_conversations[client_id]['last_message']
            )

        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–≤—è–∑—å –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è –∏ –∫–ª–∏–µ–Ω—Ç–∞
        owner_client_map[owner_id] = client_id

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏
        history = get_conversation_history(client_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        history_text = "üì® –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏:\n\n"
        for msg in reversed(history):  # –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
            sender = "üë§ –ö–ª–∏–µ–Ω—Ç" if msg['is_from_user'] else "üë®‚Äçüíº –ú–∞–≥–∞–∑–∏–Ω"
            history_text += f"{sender} [{msg['created_at'].strftime('%d.%m.%Y %H:%M')}]:\n{msg['message']}\n\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é
        try:
            await update.message.reply_text(history_text[:4096])
            # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –¥–ª–∏–Ω–Ω–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏
            if len(history_text) > 4096:
                parts = [history_text[i:i+4096] for i in range(4096, len(history_text), 4096)]
                for part in parts:
                    await update.message.reply_text(part)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

        await update.message.reply_text(
            "üí¨ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –∏ –æ–Ω–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n"
            "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop."
        )

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        user = query.from_user
        user_id = user.id
        
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        ensure_user_exists(user)
        
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if query.data == 'order':
            keyboard = [
                [InlineKeyboardButton("üí¨ ChatGPT", callback_data='category_chatgpt')],
                [InlineKeyboardButton("üéÆ Discord", callback_data='category_discord')],
                [InlineKeyboardButton("üìö Duolingo", callback_data='category_duolingo')],
                [InlineKeyboardButton("üì∏ PicsArt", callback_data='category_picsart')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
            ]
            await query.edit_message_text(
                "üì¶ –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        elif query.data == 'back_to_main':
            keyboard = [
                [InlineKeyboardButton("üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data='order')],
                [InlineKeyboardButton("‚ùì –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')],
                [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
            ]
            await query.edit_message_text(
                "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "help"
        elif query.data == 'help':
            await self.show_help(query.message)
        
        # –ú–µ–Ω—é ChatGPT
        elif query.data == 'category_chatgpt':
            keyboard = [
                [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 650 UAH", callback_data='chatgpt_1')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order')]
            ]
            await query.edit_message_text(
                "üí¨ –û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç ChatGPT Plus:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        # –ú–µ–Ω—é Discord
        elif query.data == 'category_discord':
            keyboard = [
                [InlineKeyboardButton("Nitro Basic", callback_data='discord_basic')],
                [InlineKeyboardButton("Nitro Full", callback_data='discord_full')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order')]
            ]
            await query.edit_message_text(
                "üéÆ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø Discord Nitro:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        # –ü–æ–¥–º–µ–Ω—é Discord Basic
        elif query.data == 'discord_basic':
            keyboard = [
                [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 100 UAH", callback_data='discord_basic_1')],
                [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 900 UAH", callback_data='discord_basic_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='category_discord')]
            ]
            await query.edit_message_text(
                "üîπ Discord Nitro Basic:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        # –ü–æ–¥–º–µ–Ω—é Discord Full
        elif query.data == 'discord_full':
            keyboard = [
                [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 170 UAH", callback_data='discord_full_1')],
                [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 1700 UAH", callback_data='discord_full_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='category_discord')]
            ]
            await query.edit_message_text(
                "‚ú® Discord Nitro Full:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        # –ú–µ–Ω—é Duolingo
        elif query.data == 'category_duolingo':
            keyboard = [
                [InlineKeyboardButton("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Family", callback_data='duolingo_family')],
                [InlineKeyboardButton("üë§ Individual", callback_data='duolingo_individual')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order')]
            ]
            await query.edit_message_text(
                "üìö –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—ñ–¥–ø–∏—Å–∫–∏ Duolingo:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        # –ü–æ–¥–º–µ–Ω—é Duolingo Family
        elif query.data == 'duolingo_family':
            keyboard = [
                [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 380 UAH (–Ω–∞ 1 –ª—é–¥–∏–Ω—É)", callback_data='duolingo_fam_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='category_duolingo')]
            ]
            await query.edit_message_text(
                "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Duolingo Family:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        # –ü–æ–¥–º–µ–Ω—é Duolingo Individual
        elif query.data == 'duolingo_individual':
            keyboard = [
                [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 200 UAH", callback_data='duolingo_ind_1')],
                [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 1500 UAH", callback_data='duolingo_ind_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='category_duolingo')]
            ]
            await query.edit_message_text(
                "üë§ Duolingo Individual:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        # –ú–µ–Ω—é PicsArt
        elif query.data == 'category_picsart':
            keyboard = [
                [InlineKeyboardButton("‚ú® PicsArt Plus", callback_data='picsart_plus')],
                [InlineKeyboardButton("üöÄ PicsArt Pro", callback_data='picsart_pro')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order')]
            ]
            await query.edit_message_text(
                "üì∏ –û–±–µ—Ä—ñ—Ç—å –≤–µ—Ä—Å—ñ—é PicsArt:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        # –ü–æ–¥–º–µ–Ω—é PicsArt Plus
        elif query.data == 'picsart_plus':
            keyboard = [
                [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 130 UAH", callback_data='picsart_plus_1')],
                [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 800 UAH", callback_data='picsart_plus_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='category_picsart')]
            ]
            await query.edit_message_text(
                "‚ú® PicsArt Plus:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        # –ü–æ–¥–º–µ–Ω—é PicsArt Pro
        elif query.data == 'picsart_pro':
            keyboard = [
                [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 180 UAH", callback_data='picsart_pro_1')],
                [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 1000 UAH", callback_data='picsart_pro_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='category_picsart')]
            ]
            await query.edit_message_text(
                "üöÄ PicsArt Pro:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
        elif query.data in [
            'chatgpt_1',
            'discord_basic_1', 'discord_basic_12',
            'discord_full_1', 'discord_full_12',
            'duolingo_ind_1', 'duolingo_ind_12', 'duolingo_fam_12',
            'picsart_plus_1', 'picsart_plus_12',
            'picsart_pro_1', 'picsart_pro_12'
        ]:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['selected_product'] = query.data
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∞
            product_info = self.get_product_info(query.data)
            
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ó–∞–º–æ–≤–∏—Ç–∏", callback_data='confirm_order')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=self.get_back_action(query.data))]
            ]
            
            await query.edit_message_text(
                f"üõí –í–∏ –æ–±—Ä–∞–ª–∏:\n\n"
                f"{product_info['name']}\n"
                f"üíµ –¶—ñ–Ω–∞: {product_info['price']} UAH\n\n"
                f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å \"‚úÖ –ó–∞–º–æ–≤–∏—Ç–∏\" –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        elif query.data == 'confirm_order':
            selected_product = context.user_data.get('selected_product')
            if not selected_product:
                await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –æ–±—Ä–∞–Ω–∏–π")
                return
                
            product_info = self.get_product_info(selected_product)
            order_text = f"üõçÔ∏è –•–æ—á—É –∑–∞–º–æ–≤–∏—Ç–∏: {product_info['name']} –∑–∞ {product_info['price']} UAH"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
            active_conversations[user_id] = {
                'type': 'order',
                'user_info': user,
                'assigned_owner': None,
                'order_details': order_text,
                'last_message': order_text
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            save_active_conversation(user_id, 'order', None, order_text)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            bot_statistics['total_orders'] += 1
            save_stats()
            
            await query.edit_message_text(
                "‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ! –ó–∞—Å–Ω–æ–≤–Ω–∏–∫ –º–∞–≥–∞–∑–∏–Ω—É –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.\n\n"
                "–í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑ —ñ–Ω—à–∏–º –∑–∞–ø–∏—Ç–∞–Ω–Ω—è–º –∞–±–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º.",
                reply_markup=None
            )
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∑–∞–∫–∞–∑ –æ–±–æ–∏–º –≤–ª–∞–¥–µ–ª—å—Ü–∞–º
            await self.forward_order_to_owners(
                context, 
                user_id, 
                user, 
                order_text
            )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "question"
        elif query.data == 'question':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
            if user_id in active_conversations:
                await query.answer(
                    "‚ùó –£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥.\n\n"
                    "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –ø–∏—Å–∞—Ç–∏ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –¥—ñ–∞–ª–æ–∑—ñ –∞–±–æ –∑–∞–≤–µ—Ä—à—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /stop, "
                    "—è–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥.",
                    show_alert=True
                )
                return
            
            active_conversations[user_id] = {
                'type': 'question',
                'user_info': user,
                'assigned_owner': None,
                'last_message': "–ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è"
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            save_active_conversation(user_id, 'question', None, "–ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            bot_statistics['total_questions'] += 1
            save_stats()
            
            await query.edit_message_text(
                "üìù –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. –Ø –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫—É –º–∞–≥–∞–∑–∏–Ω—É.\n\n"
                "–©–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ü–µ–π –¥—ñ–∞–ª–æ–≥ –ø—ñ–∑–Ω—ñ—à–µ, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop."
            )
        
        # –í–∑—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º
        elif query.data.startswith('take_order_'):
            client_id = int(query.data.split('_')[2])
            owner_id = user_id
            
            if client_id not in active_conversations:
                await query.answer("–î—ñ–∞–ª–æ–≥ –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", show_alert=True)
                return
                
            # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º –∑–∞–∫–∞–∑ –∑–∞ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º
            active_conversations[client_id]['assigned_owner'] = owner_id
            owner_client_map[owner_id] = client_id
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            save_active_conversation(
                client_id, 
                active_conversations[client_id]['type'], 
                owner_id, 
                active_conversations[client_id]['last_message']
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è
            client_info = active_conversations[client_id]['user_info']
            await query.edit_message_text(
                f"‚úÖ –í–∏ –≤–∑—è–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ {client_info.first_name}."
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–æ–≥–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è
            other_owner = OWNER_ID_2 if owner_id == OWNER_ID_1 else OWNER_ID_1
            try:
                await context.bot.send_message(
                    chat_id=other_owner,
                    text=f"‚ÑπÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ {client_info.first_name} –≤–∑—è–≤ —ñ–Ω—à–∏–π –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫."
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è: {e}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            try:
                await context.bot.send_message(
                    chat_id=client_id,
                    text=f"‚úÖ –í–∞—à –∑–∞–ø–∏—Ç –ø—Ä–∏–π–Ω—è–≤ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫ –º–∞–≥–∞–∑–∏–Ω—É. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å."
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        
        # –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∏–∞–ª–æ–≥–∞ –¥—Ä—É–≥–æ–º—É –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é
        elif query.data.startswith('transfer_'):
            client_id = int(query.data.split('_')[1])
            current_owner = user_id
            
            other_owner = OWNER_ID_2 if current_owner == OWNER_ID_1 else OWNER_ID_1
            other_owner_name = "@oc33t" if other_owner == OWNER_ID_2 else "@HiGki2pYYY"
            
            if client_id in active_conversations:
                active_conversations[client_id]['assigned_owner'] = other_owner
                owner_client_map[other_owner] = client_id
                if current_owner in owner_client_map:
                    del owner_client_map[current_owner]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
                save_active_conversation(
                    client_id, 
                    active_conversations[client_id]['type'], 
                    other_owner, 
                    active_conversations[client_id]['last_message']
                )
                
                client_info = active_conversations[client_id]['user_info']
                last_message = active_conversations[client_id].get('last_message', '–ù–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å')
                
                await query.edit_message_text(
                    f"‚úÖ –ß–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º {client_info.first_name} –ø–µ—Ä–µ–¥–∞–Ω {other_owner_name}"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥ –¥—Ä—É–≥–æ–º—É –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é
                await context.bot.send_message(
                    chat_id=other_owner,
                    text=f"üì® –í–∞–º –ø–µ—Ä–µ–¥–∞–Ω —á–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º:\n\n"
                         f"üë§ {client_info.first_name} (@{client_info.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'})\n"
                         f"üÜî ID: {client_info.id}\n\n"
                         f"–û—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n{last_message}\n\n"
                         f"–î–ª—è –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop"
                )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥" –∏–∑ –∫–æ–º–∞–Ω–¥—ã /chats
        elif query.data.startswith('continue_chat_'):
            client_id = int(query.data.split('_')[2])
            owner_id = user_id

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
            if client_id not in active_conversations:
                await query.answer("–î–∏–∞–ª–æ–≥ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω", show_alert=True)
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –ª–∏ –¥–∏–∞–ª–æ–≥ –¥—Ä—É–≥–æ–º—É –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é
            if 'assigned_owner' in active_conversations[client_id] and \
               active_conversations[client_id]['assigned_owner'] != owner_id:
                other_owner = active_conversations[client_id]['assigned_owner']
                other_owner_name = "@HiGki2pYYY" if other_owner == OWNER_ID_1 else "@oc33t"
                await query.answer(
                    f"–î–∏–∞–ª–æ–≥ —É–∂–µ –≤–µ–¥–µ—Ç {other_owner_name}.",
                    show_alert=True
                )
                return

            # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –¥–∏–∞–ª–æ–≥
            active_conversations[client_id]['assigned_owner'] = owner_id
            owner_client_map[owner_id] = client_id
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            save_active_conversation(
                client_id, 
                active_conversations[client_id]['type'], 
                owner_id, 
                active_conversations[client_id]['last_message']
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏
            history = get_conversation_history(client_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
            history_text = "üì® –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏:\n\n"
            for msg in reversed(history):  # –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
                sender = "üë§ –ö–ª–∏–µ–Ω—Ç" if msg['is_from_user'] else "üë®‚Äçüíº –ú–∞–≥–∞–∑–∏–Ω"
                history_text += f"{sender} [{msg['created_at'].strftime('%d.%m.%Y %H:%M')}]:\n{msg['message']}\n\n"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é
            try:
                await context.bot.send_message(
                    chat_id=owner_id,
                    text=history_text[:4096]  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
                )
                # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –¥–ª–∏–Ω–Ω–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏
                if len(history_text) > 4096:
                    parts = [history_text[i:i+4096] for i in range(4096, len(history_text), 4096)]
                    for part in parts:
                        await context.bot.send_message(chat_id=owner_id, text=part)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–≤–µ—Ç–∏—Ç—å
            await context.bot.send_message(
                chat_id=owner_id,
                text=f"üí¨ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:\n{active_conversations[client_id]['last_message']}\n\n"
                     "–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç:"
            )
            
            await query.edit_message_text(f"‚úÖ –í—ã –ø—Ä–æ–¥–æ–ª–∂–∏–ª–∏ –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º ID: {client_id}.")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        user_id = user.id
        
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        ensure_user_exists(user)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        if user_id not in active_conversations:
            keyboard = [
                [InlineKeyboardButton("üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data='order')],
                [InlineKeyboardButton("‚ùì –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')],
                [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏.",
                reply_markup=reply_markup
            )
            return
        
        if user_id in [OWNER_ID_1, OWNER_ID_2]:
            await self.handle_owner_message(update, context)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = update.message.text
        active_conversations[user_id]['last_message'] = message_text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        save_message(user_id, message_text, True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –≤ –ë–î
        save_active_conversation(
            user_id, 
            active_conversations[user_id]['type'], 
            active_conversations[user_id].get('assigned_owner'), 
            message_text
        )
        
        await self.forward_to_owner(update, context)
    
    async def forward_to_owner(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        if user_id not in active_conversations:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞: {user_id}")
            return
        
        user_info = active_conversations[user_id]['user_info']
        conversation_type = active_conversations[user_id]['type']
        
        assigned_owner = active_conversations[user_id].get('assigned_owner')
        
        # –ï—Å–ª–∏ –∑–∞–∫–∞–∑/–≤–æ–ø—Ä–æ—Å –µ—â–µ –Ω–µ –≤–∑—è—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–æ–∏–º –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è–º
        if not assigned_owner:
            await self.forward_to_both_owners(
                context, 
                user_id, 
                user_info, 
                conversation_type, 
                update.message.text
            )
            return
        
        # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ –≤–∑—è—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–º—É –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é
        await self.forward_to_specific_owner(
            context, 
            user_id, 
            user_info, 
            conversation_type, 
            update.message.text, 
            assigned_owner
        )
    
    async def forward_to_both_owners(self, context, client_id, client_info, conversation_type, message_text):
        """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–æ–∏–º –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è–º"""
        type_emoji = "üõí" if conversation_type == 'order' else "‚ùì"
        type_text = "–ó–ê–ö–ê–ó" if conversation_type == 'order' else "–í–û–ü–†–û–°"
        
        forward_message = f"""
{type_emoji} –ù–û–í–´–ô {type_text}!

üë§ –ö–ª–∏–µ–Ω—Ç: {client_info.first_name}
üì± Username: @{client_info.username if client_info.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üÜî ID: {client_info.id}
üåê –Ø–∑—ã–∫: {client_info.language_code or '–Ω–µ —É–∫–∞–∑–∞–Ω'}

üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:
{message_text}

---
–ù–∞–∂–º–∏—Ç–µ "‚úÖ –í–∑—è—Ç—å", —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å.
        """
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –í–∑—è—Ç—å", callback_data=f'take_order_{client_id}')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–æ–∏–º –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è–º
        for owner_id in [OWNER_ID_1, OWNER_ID_2]:
            try:
                await context.bot.send_message(
                    chat_id=owner_id,
                    text=forward_message.strip(),
                    reply_markup=reply_markup
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é {owner_id}: {e}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        await context.bot.send_message(
            chat_id=client_id,
            text="‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥–∞–Ω–æ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫–∞–º –º–∞–≥–∞–∑–∏–Ω—É. "
                 "–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
        )
    
    async def forward_to_specific_owner(self, context, client_id, client_info, conversation_type, message_text, owner_id):
        """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é"""
        type_emoji = "üõí" if conversation_type == 'order' else "‚ùì"
        type_text = "–ó–ê–ö–ê–ó" if conversation_type == 'order' else "–í–û–ü–†–û–°"
        owner_name = "@HiGki2pYYY" if owner_id == OWNER_ID_1 else "@oc33t"
        
        forward_message = f"""
{type_emoji} {type_text} –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {client_info.first_name}
üì± Username: @{client_info.username if client_info.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üÜî ID: {client_info.id}
üåê –Ø–∑—ã–∫: {client_info.language_code or '–Ω–µ —É–∫–∞–∑–∞–Ω'}

üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:
{message_text}

---
–î–ª—è –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç.
–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop.
–ù–∞–∑–Ω–∞—á–µ–Ω: {owner_name}
        """
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–¥–∞—Ç—å –¥—Ä—É–≥–æ–º—É –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é", callback_data=f'transfer_{client_id}')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await context.bot.send_message(
                chat_id=owner_id,
                text=forward_message.strip(),
                reply_markup=reply_markup
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            await context.bot.send_message(
                chat_id=client_id,
                text="‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥–∞–Ω–æ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫—É –º–∞–≥–∞–∑–∏–Ω—É. "
                     "–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é {owner_id}: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å - –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–º—É –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é
            other_owner = OWNER_ID_2 if owner_id == OWNER_ID_1 else OWNER_ID_1
            active_conversations[client_id]['assigned_owner'] = other_owner
            owner_client_map[other_owner] = client_id
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
            save_active_conversation(
                client_id, 
                conversation_type, 
                other_owner, 
                message_text
            )
            
            await self.forward_to_specific_owner(context, client_id, client_info, conversation_type, message_text, other_owner)
    
    async def forward_order_to_owners(self, context, client_id, client_info, order_text):
        """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –∑–∞–∫–∞–∑ –æ–±–æ–∏–º –≤–ª–∞–¥–µ–ª—å—Ü–∞–º"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        active_conversations[client_id]['last_message'] = order_text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        save_active_conversation(client_id, 'order', None, order_text)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –æ —Å–∞–π—Ç–µ, –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –æ—Ç—Ç—É–¥–∞
        source = "–∑ —Å–∞–π—Ç—É" if active_conversations[client_id].get('from_website', False) else ""
        
        forward_message = f"""
üõí –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø {source}!

üë§ –ö–ª—ñ—î–Ω—Ç: {client_info.first_name}
üì± Username: @{client_info.username if client_info.username else '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}
üÜî ID: {client_info.id}
üåê –Ø–∑—ã–∫: {client_info.language_code or '–Ω–µ —É–∫–∞–∑–∞–Ω'}

üìã –î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:
{order_text}

---
–ù–∞–∂–º–∏—Ç–µ "‚úÖ –í–∑—è—Ç—å", —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑.
        """
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –í–∑—è—Ç—å", callback_data=f'take_order_{client_id}')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–æ–∏–º –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è–º
        for owner_id in [OWNER_ID_1, OWNER_ID_2]:
            try:
                await context.bot.send_message(
                    chat_id=owner_id,
                    text=forward_message.strip(),
                    reply_markup=reply_markup
                )
                logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É {owner_id}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é {owner_id}: {e}")
    
    async def handle_owner_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è"""
        owner = update.effective_user
        owner_id = owner.id
        
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ –ë–î
        ensure_user_exists(owner)
        
        if owner_id not in owner_client_map:
            owner_name = "@HiGki2pYYY" if owner_id == OWNER_ID_1 else "@oc33t"
            await update.message.reply_text(
                f"–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞. ({owner_name})\n"
                f"–î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /dialog."
            )
            return
        
        client_id = owner_client_map[owner_id]
        
        if client_id not in active_conversations:
            del owner_client_map[owner_id]
            await update.message.reply_text(
                "–î–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω."
            )
            return
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è
            message_text = update.message.text
            save_message(client_id, message_text, False)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            active_conversations[client_id]['last_message'] = message_text
            save_active_conversation(
                client_id, 
                active_conversations[client_id]['type'], 
                owner_id, 
                message_text
            )
            
            await context.bot.send_message(
                chat_id=client_id,
                text=f"üì© –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –º–∞–≥–∞–∑–∏–Ω—É:\n\n{message_text}"
            )
            
            client_info = active_conversations[client_id]['user_info']
            await update.message.reply_text(
                f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {client_info.first_name}"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {client_id}: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É. "
                "–í–æ–∑–º–æ–∂–Ω–æ, –∫–ª–∏–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞."
            )
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.warning(f'Update {update} caused error {context.error}')
    
    def start_ping_service(self):
        """–ó–∞–ø—É—Å–∫ –ø–∏–Ω–≥–æ–≤–∞–ª–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if not self.ping_running:
            self.ping_running = True
            ping_thread = threading.Thread(target=self.ping_loop)
            ping_thread.daemon = True
            ping_thread.start()
            logger.info("üîÑ –ü–∏–Ω–≥–æ–≤–∞–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    
    def ping_loop(self):
        """–¶–∏–∫–ª –ø–∏–Ω–≥–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        import requests
        ping_url = f"{WEBHOOK_URL}/ping"
        
        while self.ping_running:
            try:
                response = requests.get(ping_url, timeout=10)
                if response.status_code == 200:
                    logger.info("‚úÖ Ping —É—Å–ø–µ—à–µ–Ω - —Å–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–µ–Ω")
                else:
                    logger.warning(f"‚ö†Ô∏è Ping –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
            except requests.exceptions.RequestException as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ ping: {e}")
            except Exception as e:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ ping: {e}")
            
            time.sleep(PING_INTERVAL)
    
    def get_product_info(self, product_code):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –ø–æ –µ–≥–æ –∫–æ–¥—É"""
        products = {
            'chatgpt_1': {'name': "ChatGPT Plus (1 –º—ñ—Å—è—Ü—å)", 'price': 650},
            'discord_basic_1': {'name': "Discord Nitro Basic (1 –º—ñ—Å—è—Ü—å)", 'price': 100},
            'discord_basic_12': {'name': "Discord Nitro Basic (12 –º—ñ—Å—è—Ü—ñ–≤)", 'price': 900},
            'discord_full_1': {'name': "Discord Nitro Full (1 –º—ñ—Å—è—Ü—å)", 'price': 170},
            'discord_full_12': {'name': "Discord Nitro Full (12 –º—ñ—Å—è—Ü—ñ–≤)", 'price': 1700},
            'duolingo_ind_1': {'name': "Duolingo Individual (1 –º—ñ—Å—è—Ü—å)", 'price': 200},
            'duolingo_ind_12': {'name': "Duolingo Individual (12 –º—ñ—Å—è—Ü—ñ–≤)", 'price': 1500},
            'duolingo_fam_12': {'name': "Duolingo Family (12 –º—ñ—Å—è—Ü—ñ–≤)", 'price': 380},
            'picsart_plus_1': {'name': "PicsArt Plus (1 –º—ñ—Å—è—Ü—å)", 'price': 130},
            'picsart_plus_12': {'name': "PicsArt Plus (12 –º—ñ—Å—è—Ü—ñ–≤)", 'price': 800},
            'picsart_pro_1': {'name': "PicsArt Pro (1 –º—ñ—Å—è—Ü—å)", 'price': 180},
            'picsart_pro_12': {'name': "PicsArt Pro (12 –º—ñ—Å—è—Ü—ñ–≤)", 'price': 1000},
        }
        return products.get(product_code, {'name': "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–æ–≤–∞—Ä", 'price': 0})
    
    def get_back_action(self, product_code):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≤–∞—Ä–∞"""
        category_map = {
            'chatgpt_1': 'category_chatgpt',
            'discord_basic_1': 'discord_basic',
            'discord_basic_12': 'discord_basic',
            'discord_full_1': 'discord_full',
            'discord_full_12': 'discord_full',
            'duolingo_ind_1': 'duolingo_individual',
            'duolingo_ind_12': 'duolingo_individual',
            'duolingo_fam_12': 'duolingo_family',
            'picsart_plus_1': 'picsart_plus',
            'picsart_plus_12': 'picsart_plus',
            'picsart_pro_1': 'picsart_pro',
            'picsart_pro_12': 'picsart_pro',
        }
        return category_map.get(product_code, 'order')

bot_instance = TelegramBot()

@flask_app.route('/ping', methods=['GET'])
def ping():
    return jsonify({
        'status': 'alive',
        'message': 'Bot is running',
        'timestamp': time.time(),
        'uptime': time.time() - datetime.fromisoformat(bot_statistics['first_start']).timestamp(),
        'bot_running': bot_running,
        'mode': 'polling' if USE_POLLING else 'webhook'
    }), 200

@flask_app.route('/health', methods=['GET'])
def health():
    return jsonify({
        'status': 'healthy',
        'bot_token': f"{BOT_TOKEN[:10]}..." if BOT_TOKEN else "Not set",
        'active_conversations': len(active_conversations),
        'owner_client_map': len(owner_client_map),
        'ping_interval': PING_INTERVAL,
        'webhook_url': WEBHOOK_URL,
        'initialized': bot_instance.initialized if bot_instance else False,
        'bot_running': bot_running,
        'mode': 'polling' if USE_POLLING else 'webhook',
        'stats': bot_statistics
    }), 200

@flask_app.route(f'/{BOT_TOKEN}', methods=['POST'])
def webhook():
    if USE_POLLING:
        return jsonify({'error': 'Webhook disabled in polling mode'}), 400
    
    global telegram_app
    
    if not telegram_app or not bot_instance.initialized:
        logger.error("Telegram app –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return jsonify({'error': 'Bot not initialized'}), 500
    
    try:
        json_data = request.get_json()
        if json_data:
            update = Update.de_json(json_data, telegram_app.bot)
            pass
        return '', 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return jsonify({'error': str(e)}), 500

@flask_app.route('/', methods=['GET'])
def index():
    return jsonify({
        'message': 'Telegram Bot SecureShop –∞–∫—Ç–∏–≤–µ–Ω',
        'status': 'running',
        'mode': 'polling' if USE_POLLING else 'webhook',
        'webhook_url': f"{WEBHOOK_URL}/{BOT_TOKEN}" if not USE_POLLING else None,
        'ping_interval': f"{PING_INTERVAL} —Å–µ–∫—É–Ω–¥",
        'owners': ['@HiGki2pYYY', '@oc33t'],
        'initialized': bot_instance.initialized if bot_instance else False,
        'bot_running': bot_running,
        'stats': bot_statistics
    }), 200

async def setup_webhook():
    if USE_POLLING:
        try:
            await telegram_app.bot.delete_webhook()
            logger.info("üóëÔ∏è Webhook —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling —Ä–µ–∂–∏–º")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: {e}")
        return True
    
    try:
        webhook_url = f"{WEBHOOK_URL}/{BOT_TOKEN}"
        await telegram_app.bot.set_webhook(webhook_url)
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
        return False

async def start_bot():
    global telegram_app, bot_running
    
    with bot_lock:
        if bot_running:
            logger.warning("üõë –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫")
            return
        
        try:
            await bot_instance.initialize()
            telegram_app = bot_instance.application
            
            if USE_POLLING:
                await setup_webhook()
                await bot_instance.start_polling()
                bot_running = True
                logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ polling —Ä–µ–∂–∏–º–µ")
            else:
                success = await setup_webhook()
                if success:
                    bot_running = True
                    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ webhook —Ä–µ–∂–∏–º–µ")
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å webhook")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            bot_running = False
            raise

def bot_thread():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    bot_instance.loop = loop
    
    try:
        loop.run_until_complete(start_bot())
        if USE_POLLING:
            loop.run_forever()
    except Conflict as e:
        logger.error(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç: {e}")
        logger.warning("üïí –û–∂–∏–¥–∞–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º...")
        time.sleep(30)
        bot_thread()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ bot_thread: {e}")
        logger.warning("üïí –û–∂–∏–¥–∞–µ–º 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º...")
        time.sleep(15)
        bot_thread()
    finally:
        try:
            if not loop.is_closed():
                loop.close()
        except:
            pass
        logger.warning("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –±–æ—Ç–∞...")
        time.sleep(5)
        bot_thread()

def auto_save_loop():
    """–§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    while True:
        time.sleep(300)  # 5 –º–∏–Ω—É—Ç
        save_stats()
        logger.info("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

def main():
    # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è Render.com, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    if os.environ.get('RENDER'):
        logger.info("‚è≥ –û–∂–∏–¥–∞–µ–º 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤...")
        time.sleep(10)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    auto_save_thread = threading.Thread(target=auto_save_loop)
    auto_save_thread.daemon = True
    auto_save_thread.start()
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ SecureShop Telegram Bot...")
    logger.info(f"üîë BOT_TOKEN: {BOT_TOKEN[:10]}...")
    logger.info(f"üåê PORT: {PORT}")
    logger.info(f"üì° WEBHOOK_URL: {WEBHOOK_URL}")
    logger.info(f"‚è∞ PING_INTERVAL: {PING_INTERVAL} —Å–µ–∫—É–Ω–¥")
    logger.info(f"üîÑ –†–ï–ñ–ò–ú: {'Polling' if USE_POLLING else 'Webhook'}")
    logger.info(f"üë§ –û—Å–Ω–æ–≤–∞—Ç–µ–ª—å 1: {OWNER_ID_1} (@HiGki2pYYY)")
    logger.info(f"üë§ –û—Å–Ω–æ–≤–∞—Ç–µ–ª—å 2: {OWNER_ID_2} (@oc33t)")
    logger.info(f"üíæ DATABASE_URL: {DATABASE_URL[:30]}...")
    
    bot_thread_instance = threading.Thread(target=bot_thread)
    bot_thread_instance.daemon = True
    bot_thread_instance.start()
    
    time.sleep(3)
    
    bot_instance.start_ping_service()
    
    logger.info("üåê –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞...")
    flask_app.run(
        host='0.0.0.0',
        port=PORT,
        debug=False,
        use_reloader=False,
        threaded=True
    )

if __name__ == '__main__':
    main()
