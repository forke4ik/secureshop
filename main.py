# main.py (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
import logging
import os
import asyncio
import threading
import time
import json
import re
from datetime import datetime
from typing import Dict, Any, Optional
import requests # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ NOWPayments

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, User, BotCommandScopeChat
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.error import Conflict, TelegramError
from flask import Flask, request, jsonify
from flask_cors import CORS
import psycopg
from psycopg.rows import dict_row

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
bot_running = False
bot_lock = threading.Lock()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
BOT_TOKEN = os.getenv('BOT_TOKEN')
OWNER_ID_1 = int(os.getenv('OWNER_ID_1', 0)) # @HiGki2pYYY
OWNER_ID_2 = int(os.getenv('OWNER_ID_2', 0)) # @oc33t
PORT = int(os.getenv('PORT', 8443))
WEBHOOK_URL = os.getenv('WEBHOOK_URL', f'https://your-app-name.onrender.com')
PING_INTERVAL = int(os.getenv('PING_INTERVAL', 840)) # 14 –º–∏–Ω—É—Ç
USE_POLLING = os.getenv('USE_POLLING', 'true').lower() == 'true'
DATABASE_URL = os.getenv('DATABASE_URL')
# --- –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
NOWPAYMENTS_API_KEY = os.getenv('NOWPAYMENTS_API_KEY')
EXCHANGE_RATE_UAH_TO_USD = float(os.getenv('EXCHANGE_RATE_UAH_TO_USD', 41.26)) # –ö—É—Ä—Å UAH –∫ USD

# --- –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ ---
STATS_FILE = "bot_stats.json"

# --- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î ---
BUFFER_FLUSH_INTERVAL = 300 # 5 –º–∏–Ω—É—Ç
message_buffer = []
buffer_lock = threading.Lock()

# --- –ö—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
user_cache = set()

# --- –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–ª—è NOWPayments ---
# –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã –Ω–∞ https://nowpayments.io
AVAILABLE_CURRENCIES = {
    "USDT (Solana)": "usdtsol",
    "USDT (TRC20)": "usdttrc20",
    "ETH": "eth",
    "USDT (Arbitrum)": "usdtarb",
    "USDT (Polygon)": "usdtmatic",
    "USDT (TON)": "usdtton",
    "AVAX (C-Chain)": "avax",
    "APTOS (APT)": "apt"
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –≤–∞–ª—é—Ç—ã –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
}

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def convert_uah_to_usd(uah_amount: float) -> float:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –∏–∑ UAH –≤ USD –ø–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º—É –∫—É—Ä—Å—É."""
    if EXCHANGE_RATE_UAH_TO_USD <= 0:
        logger.error("–ö—É—Ä—Å –æ–±–º–µ–Ω–∞ UAH –∫ USD –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
        return 0.0
    return round(uah_amount / EXCHANGE_RATE_UAH_TO_USD, 2)

def get_uah_amount_from_order_text(order_text: str) -> float:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—É–º–º—É –≤ UAH –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑–∞."""
    match = re.search(r'üí≥ –í—Å—å–æ–≥–æ: (\d+(?:\.\d+)?) UAH', order_text)
    if match:
        try:
            return float(match.group(1))
        except ValueError:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—É–º–º—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏: {match.group(1)}")
    logger.warning("–°—É–º–º–∞ –≤ UAH –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ –∑–∞–∫–∞–∑–∞.")
    return 0.0

# --- –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π (–≤–Ω–µ –∫–ª–∞—Å—Å–∞) ---
def load_stats() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(STATS_FILE):
            with open(STATS_FILE, 'r', encoding='utf-8') as f:
                stats = json.load(f)
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∞—Ç–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                if 'last_reset' in stats and isinstance(stats['last_reset'], str):
                    stats['last_reset'] = datetime.fromisoformat(stats['last_reset'])
                logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞")
                return stats
        else:
            logger.info("üÜï –§–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π")
            return {
                "total_orders": 0,
                "total_questions": 0,
                "total_users": 0,
                "last_reset": datetime.now()
            }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {
            "total_orders": 0,
            "total_questions": 0,
            "total_users": 0,
            "last_reset": datetime.now()
        }

# --- –ö–ª–∞—Å—Å –±–æ—Ç–∞ ---
class TelegramBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
        self.init_db()
        # --- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ __init__ ---
        self.bot_statistics = load_stats() # <-- –ü–†–ê–í–ò–õ–¨–ù–û: –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—É self
        # --- –ö–æ–Ω–µ—Ü –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä—É–≥–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        self.active_conversations = {} # {user_id: {...}}
        self.owner_client_map = {} # {owner_id: client_id}

    def setup_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # --- –ö–æ–º–∞–Ω–¥—ã ---
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("order", self.order_command))
        self.application.add_handler(CommandHandler("question", self.question_command))
        self.application.add_handler(CommandHandler("channel", self.channel_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("stop", self.stop_command))
        self.application.add_handler(CommandHandler("stats", self.stats_command))
        self.application.add_handler(CommandHandler("history", self.history_command))
        self.application.add_handler(CommandHandler("chats", self.chats_command))
        self.application.add_handler(CommandHandler("clear", self.clear_command))
        self.application.add_handler(CommandHandler("dialog", self.continue_dialog_command))
        self.application.add_handler(CommandHandler("pay", self.pay_command)) # –î–æ–±–∞–≤–ª–µ–Ω–æ

        # --- Callback –∫–Ω–æ–ø–∫–∏ ---
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
        
        # --- –î–æ–±–∞–≤–ª–µ–Ω–æ: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫ –æ–ø–ª–∞—Ç—ã ---
        self.application.add_handler(CallbackQueryHandler(self.payment_callback_handler, pattern='^(pay_|check_payment_status|manual_payment_confirmed|back_to_|proceed_to_payment)'))

        # --- –°–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã ---
        self.application.add_handler(MessageHandler(filters.Document.ALL, self.handle_document))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

        # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ---
        self.application.add_error_handler(self.error_handler)

    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with psycopg.connect(DATABASE_URL) as conn:
                with conn.cursor() as cur:
                    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    cur.execute("""
                        CREATE TABLE IF NOT EXISTS users (
                            id BIGINT PRIMARY KEY,
                            username VARCHAR(255),
                            first_name VARCHAR(255),
                            last_name VARCHAR(255),
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                        );
                    """)
                    # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                    cur.execute("""
                        CREATE TABLE IF NOT EXISTS messages (
                            id SERIAL PRIMARY KEY,
                            user_id BIGINT REFERENCES users(id),
                            message TEXT,
                            is_from_user BOOLEAN,
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                        );
                    """)
                    # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
                    cur.execute("""
                        CREATE TABLE IF NOT EXISTS active_conversations (
                            user_id BIGINT PRIMARY KEY REFERENCES users(id),
                            conversation_type VARCHAR(50), -- 'order', 'question', 'manual', 'subscription_order', 'digital_order'
                            assigned_owner BIGINT,
                            last_message TEXT,
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                        );
                    """)
                    # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                    cur.execute("CREATE INDEX IF NOT EXISTS idx_messages_user_id ON messages(user_id);")
                    cur.execute("CREATE INDEX IF NOT EXISTS idx_active_convs_type ON active_conversations(conversation_type);")
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

    # --- –ú–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å –ë–î ---
    def ensure_user_exists(self, user: User):
        """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users"""
        global user_cache
        if user.id in user_cache:
            return
        try:
            with psycopg.connect(DATABASE_URL) as conn:
                with conn.cursor() as cur:
                    cur.execute("""
                        INSERT INTO users (id, username, first_name, last_name)
                        VALUES (%s, %s, %s, %s)
                        ON CONFLICT (id) DO UPDATE
                        SET username = EXCLUDED.username,
                            first_name = EXCLUDED.first_name,
                            last_name = EXCLUDED.last_name
                    """, (user.id, user.username, user.first_name, user.last_name))
            user_cache.add(user.id)
            logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} ({user.id}) –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω –≤ –ë–î")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {e}")

    def save_message_to_db(self, user_id: int, message: str, is_from_user: bool):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∑–∞–ø–∏—Å–∏ –≤ –ë–î"""
        global message_buffer
        with buffer_lock:
            message_buffer.append((user_id, message, is_from_user))
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –∫–∞–∂–¥—ã–µ BUFFER_FLUSH_INTERVAL —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –±—É—Ñ–µ—Ä–∞
            # –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä, –∞–≤—Ç–æ–∑–∞–ø–∏—Å—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ

    def flush_message_buffer(self):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±—É—Ñ–µ—Ä–∞ –≤ –ë–î"""
        global message_buffer
        if not message_buffer:
            return
        try:
            with buffer_lock:
                local_buffer = message_buffer.copy()
                message_buffer.clear()
            if local_buffer:
                with psycopg.connect(DATABASE_URL) as conn:
                    with conn.cursor() as cur:
                        cur.execute("""
                            CREATE TEMP TABLE temp_messages (user_id BIGINT, message TEXT, is_from_user BOOLEAN) ON COMMIT DROP;
                        """)
                        cur.executemany("""
                            INSERT INTO temp_messages (user_id, message, is_from_user) VALUES (%s, %s, %s);
                        """, local_buffer)
                        cur.execute("""
                            INSERT INTO messages (user_id, message, is_from_user)
                            SELECT user_id, message, is_from_user FROM temp_messages;
                        """)
                        conn.commit()
                logger.info(f"üíæ –í –ë–î –∑–∞–ø–∏—Å–∞–Ω–æ {len(local_buffer)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±—É—Ñ–µ—Ä–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î: {e}")

    def save_active_conversation(self, user_id: int, conversation_type: str, assigned_owner: Optional[int], last_message: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –≤ –ë–î"""
        try:
            with psycopg.connect(DATABASE_URL) as conn:
                with conn.cursor() as cur:
                    cur.execute("""
                        INSERT INTO active_conversations (user_id, conversation_type, assigned_owner, last_message)
                        VALUES (%s, %s, %s, %s)
                        ON CONFLICT (user_id) DO UPDATE
                        SET conversation_type = EXCLUDED.conversation_type,
                            assigned_owner = EXCLUDED.assigned_owner,
                            last_message = EXCLUDED.last_message,
                            updated_at = CURRENT_TIMESTAMP
                    """, (user_id, conversation_type, assigned_owner, last_message))
            logger.info(f"üíæ –î–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω –≤ –ë–î")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –≤ –ë–î: {e}")

    def delete_active_conversation(self, user_id: int):
        """–£–¥–∞–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –∏–∑ –ë–î"""
        try:
            with psycopg.connect(DATABASE_URL) as conn:
                with conn.cursor() as cur:
                    cur.execute("DELETE FROM active_conversations WHERE user_id = %s", (user_id,))
            logger.info(f"üóëÔ∏è –î–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –ë–î")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏–∑ –ë–î: {e}")

    def save_stats(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª"""
        try:
            # –°–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É
            stats_to_save = self.bot_statistics.copy()
            if 'last_reset' in stats_to_save:
                stats_to_save['last_reset'] = stats_to_save['last_reset'].isoformat()
            with open(STATS_FILE, 'w', encoding='utf-8') as f:
                json.dump(stats_to_save, f, ensure_ascii=False, indent=4)
            logger.info("üíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    # --- –ö–æ–º–∞–Ω–¥—ã ---
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        self.ensure_user_exists(user)
        keyboard = [
            [InlineKeyboardButton("üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data='order')],
            [InlineKeyboardButton("‚ùì –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')],
            [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
        ]
        await update.message.reply_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=InlineKeyboardMarkup(keyboard))

    async def order_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /order"""
        user = update.effective_user
        self.ensure_user_exists(user)
        keyboard = [
            [InlineKeyboardButton("üí≥ –ü—ñ–¥–ø–∏—Å–∫–∏", callback_data='order_subscriptions')],
            [InlineKeyboardButton("üéÆ –¶–∏—Ñ—Ä–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏", callback_data='order_digital')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        await update.message.reply_text("üì¶ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç–æ–≤–∞—Ä—É:", reply_markup=InlineKeyboardMarkup(keyboard))

    async def question_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /question"""
        user = update.effective_user
        user_id = user.id
        self.ensure_user_exists(user)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
        if user_id in self.active_conversations:
            await update.message.reply_text(
                "‚ùó –£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥."
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –ø–∏—Å–∞—Ç–∏ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –¥—ñ–∞–ª–æ–∑—ñ –∞–±–æ –∑–∞–≤–µ—Ä—à—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /stop, "
                "—è–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥."
            )
            return
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤–æ–ø—Ä–æ—Å–µ
        self.active_conversations[user_id] = {
            'type': 'question',
            'user_info': user,
            'assigned_owner': None,
            'last_message': "–ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è"
        }
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        self.save_active_conversation(user_id, 'question', None, "–ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.bot_statistics['total_questions'] += 1
        self.save_stats()
        await update.message.reply_text(
            "üìù –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. –Ø –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫—É –º–∞–≥–∞–∑–∏–Ω—É."
            "–©–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ü–µ–π –¥—ñ–∞–ª–æ–≥ –ø—ñ–∑–Ω—ñ—à–µ, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop."
        )

    async def channel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /channel"""
        channel_text = """üì¢ –ù–∞—à –∫–∞–Ω–∞–ª: @SecureShopChannel
–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏:
- –ê—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä—ñ–≤
- –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–∞–≥–∞–∑–∏–Ω—É
- –†–æ–∑—ñ–≥—Ä–∞—à—ñ —Ç–∞ –∞–∫—Ü—ñ—ó

–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å, —â–æ–± –±—É—Ç–∏ –≤ –∫—É—Ä—Å—ñ –≤—Å—ñ—Ö –Ω–æ–≤–∏–Ω!"""
        await update.message.reply_text(channel_text)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ"""
        help_text = """üëã –î–æ–±—Ä–æ–≥–æ –¥–Ω—è! –Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω—É SecureShop.
ü§ñ –Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω—É SecureShop.
üîê –ù–∞—à —Å–µ—Ä–≤—ñ—Å –∫—É–ø—É—î –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤–∞—à –≥–æ—Ç–æ–≤–∏–π –∞–∫–∞—É–Ω—Ç, –∞ –Ω–µ –¥–∞—î –≤–∞–º —Å–≤—ñ–π.
–ú–∏ –¥—É–∂–µ —Å—Ç–∞—Ä–∞—î–º–æ—Å—å –±—É—Ç–∏ –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏, —Ç–æ–º—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –±—É–¥—å-—è–∫—ñ –ø–∏—Ç–∞–Ω–Ω—è –ø–æ –Ω–∞—à–æ–º—É —Å–µ—Ä–≤—ñ—Å—É –º–æ–∂–Ω–∞ –∑–∞–¥–∞–≤–∞—Ç–∏ —Ü—ñ–ª–æ–¥–æ–±–æ–≤–æ.

üìå –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:
/start - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
/order - –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
/question - –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
/channel - –ù–∞—à –∫–∞–Ω–∞–ª –∑ –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏ —Ç–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞–º–∏
/stop - –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –¥—ñ–∞–ª–æ–≥
/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞

üí¨ –Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è, –Ω–µ —Å–æ—Ä–æ–º—Ç–µ—Å—è –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è!"""
        await update.message.reply_text(help_text.strip())

    async def stop_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop"""
        user = update.effective_user
        user_id = user.id
        self.ensure_user_exists(user)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
        if user_id not in self.active_conversations:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.")
            return
        # –£–¥–∞–ª—è–µ–º –¥–∏–∞–ª–æ–≥ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö (–≤ –ø–∞–º—è—Ç–∏)
        conversation = self.active_conversations.pop(user_id, None)
        # –£–¥–∞–ª—è–µ–º –¥–∏–∞–ª–æ–≥ –∏–∑ –ë–î
        self.delete_active_conversation(user_id)
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å –≤–ª–∞–¥–µ–ª–µ—Ü-–∫–ª–∏–µ–Ω—Ç, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        owner_id = None
        if conversation and conversation.get('assigned_owner'):
            owner_id = conversation['assigned_owner']
        elif user_id in self.owner_client_map:
            owner_id = user_id
        if owner_id and owner_id in self.owner_client_map:
            client_id = self.owner_client_map.pop(owner_id)
            # –£–¥–∞–ª—è–µ–º –¥–∏–∞–ª–æ–≥ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö (–≤ –ø–∞–º—è—Ç–∏), –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —É–¥–∞–ª–µ–Ω
            if client_id in self.active_conversations:
                self.active_conversations.pop(client_id, None)
                self.delete_active_conversation(client_id)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text("‚úÖ –í–∞—à –¥—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        user = update.effective_user
        if user.id not in [OWNER_ID_1, OWNER_ID_2]:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
            return
        stats_text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:
–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å: {self.bot_statistics['total_orders']}
–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç–∞–Ω—å: {self.bot_statistics['total_questions']}
–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {self.bot_statistics['total_users']}
–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {self.bot_statistics['last_reset'].strftime('%Y-%m-%d %H:%M:%S')}
"""
        await update.message.reply_text(stats_text)

    async def history_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history"""
        user = update.effective_user
        if user.id not in [OWNER_ID_1, OWNER_ID_2]:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
            return
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ë–î
        try:
            with psycopg.connect(DATABASE_URL, row_factory=dict_row) as conn:
                with conn.cursor() as cur:
                    cur.execute("""
                        SELECT u.first_name, u.username, m.message, m.is_from_user, m.created_at
                        FROM messages m
                        JOIN users u ON m.user_id = u.id
                        ORDER BY m.created_at DESC
                        LIMIT 20
                    """)
                    messages = cur.fetchall()
            if not messages:
                await update.message.reply_text("üì≠ –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–æ—Ä–æ–∂–Ω—è.")
                return
            history_text = "üìú –û—Å—Ç–∞–Ω–Ω—ñ 20 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:\n\n"
            for msg in reversed(messages): # –û—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
                sender = msg['first_name'] or msg['username'] or f"ID:{msg['user_id']}"
                direction = "üë§" if msg['is_from_user'] else "ü§ñ"
                history_text += f"{direction} {sender} ({msg['created_at'].strftime('%Y-%m-%d %H:%M:%S')}): {msg['message']}\n---\n"
            await update.message.reply_text(history_text)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó.")

    async def chats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /chats"""
        user = update.effective_user
        if user.id not in [OWNER_ID_1, OWNER_ID_2]:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
            return
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –∏–∑ –ë–î
        try:
            with psycopg.connect(DATABASE_URL, row_factory=dict_row) as conn:
                with conn.cursor() as cur:
                    cur.execute("SELECT * FROM active_conversations")
                    active_conv_rows = cur.fetchall()
            if not active_conv_rows:
                await update.message.reply_text("üì≠ –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —á–∞—Ç—ñ–≤.")
                return
            chats_text = "üí¨ –ê–∫—Ç–∏–≤–Ω—ñ —á–∞—Ç–∏:\n\n"
            for conv in active_conv_rows:
                user_id = conv['user_id']
                conv_type = conv['conversation_type']
                last_msg = conv['last_message'][:50] + "..." if len(conv['last_message']) > 50 else conv['last_message']
                assigned = conv['assigned_owner'] if conv['assigned_owner'] else "–ù—ñ—Ö—Ç–æ"
                chats_text += f"ID: {user_id}\n–¢–∏–ø: {conv_type}\n–û—Å—Ç–∞–Ω–Ω—î: {last_msg}\n–í–ª–∞—Å–Ω–∏–∫: {assigned}\n---\n"
            await update.message.reply_text(chats_text)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —á–∞—Ç—ñ–≤.")

    async def clear_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear"""
        user = update.effective_user
        if user.id not in [OWNER_ID_1, OWNER_ID_2]:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
            return
        # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –≤ –ø–∞–º—è—Ç–∏
        self.active_conversations.clear()
        self.owner_client_map.clear()
        # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –≤ –ë–î
        try:
            with psycopg.connect(DATABASE_URL) as conn:
                with conn.cursor() as cur:
                    cur.execute("DELETE FROM active_conversations")
                    conn.commit()
            await update.message.reply_text("‚úÖ –ê–∫—Ç–∏–≤–Ω—ñ —á–∞—Ç–∏ –æ—á–∏—â–µ–Ω–æ.")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —á–∞—Ç—ñ–≤.")

    async def continue_dialog_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /dialog –¥–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π"""
        owner = update.effective_user
        owner_id = owner.id
        if owner_id not in [OWNER_ID_1, OWNER_ID_2]:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
        if owner_id in self.owner_client_map:
            client_id = self.owner_client_map[owner_id]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏–∞–ª–æ–≥ –∫–ª–∏–µ–Ω—Ç–∞
            if client_id in self.active_conversations:
                await update.message.reply_text(f"üí¨ –í–∏ –≤–∂–µ —Å–ø—ñ–ª–∫—É—î—Ç–µ—Å—å –∑ –∫–ª—ñ—î–Ω—Ç–æ–º {client_id}. –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –¥—ñ–∞–ª–æ–≥.")
                return
            else:
                # –î–∏–∞–ª–æ–≥ –∫–ª–∏–µ–Ω—Ç–∞ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω, –æ—á–∏—â–∞–µ–º —Å–≤—è–∑—å
                del self.owner_client_map[owner_id]
        # –ò—â–µ–º –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥
        assigned_client_id = None
        for client_id, conv_data in self.active_conversations.items():
            if conv_data.get('assigned_owner') is None:
                assigned_client_id = client_id
                break
        if not assigned_client_id:
            await update.message.reply_text("üì≠ –ù–µ–º–∞—î –Ω–æ–≤–∏—Ö –¥—ñ–∞–ª–æ–≥—ñ–≤ –¥–ª—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è.")
            return
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –¥–∏–∞–ª–æ–≥ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é
        self.active_conversations[assigned_client_id]['assigned_owner'] = owner_id
        self.owner_client_map[owner_id] = assigned_client_id
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
        self.save_active_conversation(assigned_client_id, self.active_conversations[assigned_client_id]['type'], owner_id, self.active_conversations[assigned_client_id]['last_message'])
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
        client_info = self.active_conversations[assigned_client_id]['user_info']
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            with psycopg.connect(DATABASE_URL, row_factory=dict_row) as conn:
                with conn.cursor() as cur:
                    cur.execute("""
                        SELECT message, is_from_user, created_at
                        FROM messages
                        WHERE user_id = %s
                        ORDER BY created_at DESC
                        LIMIT 10
                    """, (assigned_client_id,))
                    recent_msgs = cur.fetchall()
            history_text = f"üí¨ –Ü—Å—Ç–æ—Ä—ñ—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ {client_info.first_name} (@{client_info.username or '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}):\n\n"
            for msg in reversed(recent_msgs): # –û—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
                sender = "–ö–ª—ñ—î–Ω—Ç" if msg['is_from_user'] else "–ë–æ—Ç"
                history_text += f"{sender} ({msg['created_at'].strftime('%Y-%m-%d %H:%M:%S')}): {msg['message']}\n"
            await update.message.reply_text(history_text)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è /dialog: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó.")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–≤–µ—Ç–∏—Ç—å
        last_msg = self.active_conversations[assigned_client_id]['last_message']
        await update.message.reply_text(f"üí¨ –û—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞:\n{last_msg}\n–ù–∞–ø–∏—à—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å:")

    async def pay_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pay –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ —Å —Å–∞–π—Ç–∞ –∏–ª–∏ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞"""
        user = update.effective_user
        user_id = user.id
        self.ensure_user_exists(user)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if not context.args:
            # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
            if user_id in self.active_conversations and 'order_details' in self.active_conversations[user_id]:
                order_text = self.active_conversations[user_id]['order_details']
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –≤ UAH
                uah_amount = get_uah_amount_from_order_text(order_text)
                if uah_amount <= 0:
                     await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Å—É–º—É –¥–ª—è –æ–ø–ª–∞—Ç–∏.")
                     return
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ USD
                usd_amount = convert_uah_to_usd(uah_amount)
                if usd_amount <= 0:
                    await update.message.reply_text("‚ùå –°—É–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç–∏ –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∞.")
                    return
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ USD –∏ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                context.user_data['payment_amount_usd'] = usd_amount
                context.user_data['order_details_for_payment'] = order_text
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
                keyboard = [
                    [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é", callback_data='pay_card')],
                    [InlineKeyboardButton("ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data='pay_crypto')],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')],
                    [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text(f"üí≥ –û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏ –¥–ª—è —Å—É–º–∏ {usd_amount}$:", reply_markup=reply_markup)
            else:
                await update.message.reply_text("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–ø–æ—á–∞—Ç–∫—É –∑—Ä–æ–±—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–æ—é /order –∞–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª.")
            return
        else:
            # –ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç - ID –∑–∞–∫–∞–∑–∞
            order_id = context.args[0]
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
            items_str = " ".join(context.args[1:])
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
            # –§–æ—Ä–º–∞—Ç: <ServiceAbbr>-<PlanAbbr>-<Period>-<Price>
            # –î–ª—è Discord –ü—Ä–∏–∫—Ä–∞—Å–∏: DisU-BzN-6$-180
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: Dis-Ful-1–º-170
            item_pattern = r'(\w+)-(\w+)-([\w$]+)-(\d+)'
            items = re.findall(item_pattern, items_str)
            if not items:
                await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /pay <order_id> <—Ç–æ–≤–∞—Ä1> <—Ç–æ–≤–∞—Ä2> ... –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ü—é –∫–æ–º–∞–Ω–¥—É –ø—ñ—Å–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –±–æ—Ç—ñ.")
                return
            # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä
            service_map = {
                "Dis": "Discord",
                "DisU": "Discord –ü—Ä–∏–∫—Ä–∞—Å–∏",
                "ChG": "ChatGPT",
                "DuI": "Duolingo Individual",
                "DuF": "Duolingo Family",
                "PiP": "Picsart Pro",
                "CaP": "Canva Pro",
                "NeS": "Netflix Standard"
            }
            plan_map = {
                "Bas": "Basic",
                "Ful": "Full",
                "Plu": "Plus",
                "Ind": "Individual",
                "Fam": "Family",
                "Sta": "Standard",
                "Pro": "Pro",
                "Max": "Max",
                "BzN": "–ë–µ–∑ Nitro",
                "ZN": "–ó Nitro"
            }
            total = 0
            order_details = [] # –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Ä–≤–∏—Å–∞
            has_digital = False
            for item in items:
                service_abbr = item[0]
                plan_abbr = item[1]
                period = item[2].strip() # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                price = item[3]
                service_name = service_map.get(service_abbr, service_abbr)
                plan_name = plan_map.get(plan_abbr, plan_abbr)
                try:
                    price_num = int(price)
                    total += price_num
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Ä–≤–∏—Å–∞
                    if "–ü—Ä–∏–∫—Ä–∞—Å–∏" in service_name:
                        has_digital = True
                    order_details.append(f"‚ñ´Ô∏è {service_name} {plan_name} ({period}) - {price_num} UAH")
                except ValueError:
                    await update.message.reply_text(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Ü—ñ–Ω–∞ –¥–ª—è —Ç–æ–≤–∞—Ä—É: {service_abbr}-{plan_abbr}-{period}-{price}")
                    return
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
            order_text = f"üõçÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Å–∞–π—Ç—É (#{order_id}):"
            order_text += "\n" + "\n".join(order_details)
            order_text += f"\nüí≥ –í—Å—å–æ–≥–æ: {total} UAH"
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
            conversation_type = 'digital_order' if has_digital else 'subscription_order'
            self.active_conversations[user_id] = {
                'type': conversation_type,
                'user_info': user,
                'assigned_owner': None,
                'order_details': order_text,
                'last_message': order_text
            }
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            self.save_active_conversation(user_id, conversation_type, None, order_text)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.bot_statistics['total_orders'] += 1
            self.save_stats()
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤ USD –¥–ª—è –æ–ø–ª–∞—Ç—ã
            uah_amount = float(total)
            usd_amount = convert_uah_to_usd(uah_amount)
            if usd_amount <= 0:
                 await update.message.reply_text("‚ùå –°—É–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç–∏ –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∞.")
                 return
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ USD –∏ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context.user_data['payment_amount_usd'] = usd_amount
            context.user_data['order_details_for_payment'] = order_text
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
            keyboard = [
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é", callback_data='pay_card')],
                [InlineKeyboardButton("ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data='pay_crypto')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')],
                [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            confirmation_text = f"""‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ!
{order_text}
–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏ üëá"""
            await update.message.reply_text(confirmation_text.strip(), reply_markup=reply_markup)

    # --- Callback –∫–Ω–æ–ø–∫–∏ ---
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        user = query.from_user
        user_id = user.id
        self.ensure_user_exists(user)

        # --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
        if query.data == 'order':
            keyboard = [
                [InlineKeyboardButton("üí≥ –ü—ñ–¥–ø–∏—Å–∫–∏", callback_data='order_subscriptions')],
                [InlineKeyboardButton("üéÆ –¶–∏—Ñ—Ä–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏", callback_data='order_digital')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
            ]
            await query.edit_message_text("üì¶ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç–æ–≤–∞—Ä—É:", reply_markup=InlineKeyboardMarkup(keyboard))

        elif query.data == 'question':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
            if user_id in self.active_conversations:
                await query.answer(
                    "‚ùó –£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥."
                    "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –ø–∏—Å–∞—Ç–∏ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –¥—ñ–∞–ª–æ–∑—ñ –∞–±–æ –∑–∞–≤–µ—Ä—à—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /stop, "
                    "—è–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥.",
                    show_alert=True
                )
                return
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤–æ–ø—Ä–æ—Å–µ
            self.active_conversations[user_id] = {
                'type': 'question',
                'user_info': user,
                'assigned_owner': None,
                'last_message': "–ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è"
            }
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            self.save_active_conversation(user_id, 'question', None, "–ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.bot_statistics['total_questions'] += 1
            self.save_stats()
            await query.edit_message_text(
                "üìù –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. –Ø –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫—É –º–∞–≥–∞–∑–∏–Ω—É."
                "–©–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ü–µ–π –¥—ñ–∞–ª–æ–≥ –ø—ñ–∑–Ω—ñ—à–µ, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop."
            )

        elif query.data == 'help':
            help_text = """üëã –î–æ–±—Ä–æ–≥–æ –¥–Ω—è! –Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω—É SecureShop.
ü§ñ –Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω—É SecureShop.
üîê –ù–∞—à —Å–µ—Ä–≤—ñ—Å –∫—É–ø—É—î –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤–∞—à –≥–æ—Ç–æ–≤–∏–π –∞–∫–∞—É–Ω—Ç, –∞ –Ω–µ –¥–∞—î –≤–∞–º —Å–≤—ñ–π.
–ú–∏ –¥—É–∂–µ —Å—Ç–∞—Ä–∞—î–º–æ—Å—å –±—É—Ç–∏ –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏, —Ç–æ–º—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –±—É–¥—å-—è–∫—ñ –ø–∏—Ç–∞–Ω–Ω—è –ø–æ –Ω–∞—à–æ–º—É —Å–µ—Ä–≤—ñ—Å—É –º–æ–∂–Ω–∞ –∑–∞–¥–∞–≤–∞—Ç–∏ —Ü—ñ–ª–æ–¥–æ–±–æ–≤–æ.

üìå –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:
/start - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
/order - –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
/question - –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
/channel - –ù–∞—à –∫–∞–Ω–∞–ª –∑ –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏ —Ç–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞–º–∏
/stop - –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –¥—ñ–∞–ª–æ–≥
/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞

üí¨ –Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è, –Ω–µ —Å–æ—Ä–æ–º—Ç–µ—Å—è –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è!"""
            await query.edit_message_text(help_text.strip())

        elif query.data == 'back_to_main':
            keyboard = [
                [InlineKeyboardButton("üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data='order')],
                [InlineKeyboardButton("‚ùì –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')],
                [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
            ]
            await query.edit_message_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=InlineKeyboardMarkup(keyboard))

        # --- –ú–µ–Ω—é –ü—ñ–¥–ø–∏—Å–æ–∫ ---
        elif query.data == 'order_subscriptions':
            keyboard = [
                [InlineKeyboardButton("üí¨ ChatGPT Plus", callback_data='category_chatgpt')],
                [InlineKeyboardButton("üéÆ Discord Nitro", callback_data='category_discord')],
                [InlineKeyboardButton("üéì Duolingo Max", callback_data='category_duolingo')],
                [InlineKeyboardButton("üé® Picsart AI", callback_data='category_picsart')],
                [InlineKeyboardButton("üìä Canva Pro", callback_data='category_canva')],
                [InlineKeyboardButton("üì∫ Netflix", callback_data='category_netflix')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
            ]
            await query.edit_message_text("üí≥ –û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É:", reply_markup=InlineKeyboardMarkup(keyboard))

        # --- –ú–µ–Ω—é –¶–∏—Ñ—Ä–æ–≤–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ ---
        elif query.data == 'order_digital':
            keyboard = [
                [InlineKeyboardButton("üéÆ Discord –ü—Ä–∏–∫—Ä–∞—Å–∏", callback_data='category_discord_decor')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
            ]
            await query.edit_message_text("üéÆ –û–±–µ—Ä—ñ—Ç—å —Ü–∏—Ñ—Ä–æ–≤–∏–π —Ç–æ–≤–∞—Ä:", reply_markup=InlineKeyboardMarkup(keyboard))

        # --- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ü—ñ–¥–ø–∏—Å–æ–∫ ---
        elif query.data == 'category_chatgpt':
            keyboard = [
                [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 650 UAH", callback_data='chatgpt_1')],
                [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 6500 UAH", callback_data='chatgpt_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order_subscriptions')]
            ]
            await query.edit_message_text("üí¨ ChatGPT Plus:", reply_markup=InlineKeyboardMarkup(keyboard))

        elif query.data == 'category_discord':
            keyboard = [
                [InlineKeyboardButton("Discord Nitro Basic 1–º - 170 UAH", callback_data='discord_basic_1')],
                [InlineKeyboardButton("Discord Nitro Basic 12–º - 1700 UAH", callback_data='discord_basic_12')],
                [InlineKeyboardButton("Discord Nitro Full 1–º - 300 UAH", callback_data='discord_full_1')],
                [InlineKeyboardButton("Discord Nitro Full 12–º - 3000 UAH", callback_data='discord_full_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order_subscriptions')]
            ]
            await query.edit_message_text("üéÆ Discord Nitro:", reply_markup=InlineKeyboardMarkup(keyboard))

        elif query.data == 'category_duolingo':
            keyboard = [
                [InlineKeyboardButton("Duolingo Individual 1–º - 300 UAH", callback_data='duolingo_ind_1')],
                [InlineKeyboardButton("Duolingo Individual 12–º - 3000 UAH", callback_data='duolingo_ind_12')],
                [InlineKeyboardButton("Duolingo Family 12–º - 2100 UAH", callback_data='duolingo_fam_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order_subscriptions')]
            ]
            await query.edit_message_text("üéì Duolingo Max:", reply_markup=InlineKeyboardMarkup(keyboard))

        elif query.data == 'category_picsart':
            keyboard = [
                [InlineKeyboardButton("Picsart Pro 1–º - 350 UAH", callback_data='picsart_plus_1')],
                [InlineKeyboardButton("Picsart Pro 12–º - 3500 UAH", callback_data='picsart_plus_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order_subscriptions')]
            ]
            await query.edit_message_text("üé® Picsart AI:", reply_markup=InlineKeyboardMarkup(keyboard))

        elif query.data == 'category_canva':
            keyboard = [
                [InlineKeyboardButton("Canva Pro 1–º - 350 UAH", callback_data='canva_pro_1')],
                [InlineKeyboardButton("Canva Pro 12–º - 3500 UAH", callback_data='canva_pro_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order_subscriptions')]
            ]
            await query.edit_message_text("üìä Canva Pro:", reply_markup=InlineKeyboardMarkup(keyboard))

        elif query.data == 'category_netflix':
            keyboard = [
                [InlineKeyboardButton("Netflix Standard 1–º - 400 UAH", callback_data='netflix_std_1')],
                [InlineKeyboardButton("Netflix Standard 12–º - 4000 UAH", callback_data='netflix_std_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order_subscriptions')]
            ]
            await query.edit_message_text("üì∫ Netflix:", reply_markup=InlineKeyboardMarkup(keyboard))

        # --- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¶–∏—Ñ—Ä–æ–≤–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ ---
        elif query.data == 'category_discord_decor':
            keyboard = [
                [InlineKeyboardButton("Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ (–ë–µ–∑ Nitro)", callback_data='discord_decor_bzn')],
                [InlineKeyboardButton("Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ (–ó Nitro)", callback_data='discord_decor_zn')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order_digital')]
            ]
            await query.edit_message_text("üéÆ Discord –ü—Ä–∏–∫—Ä–∞—Å–∏:", reply_markup=InlineKeyboardMarkup(keyboard))

        elif query.data == 'discord_decor_bzn':
            keyboard = [
                [InlineKeyboardButton("5$ - 145 UAH", callback_data='discord_decor_bzn_5')],
                [InlineKeyboardButton("10$ - 295 UAH", callback_data='discord_decor_bzn_10')],
                [InlineKeyboardButton("15$ - 440 UAH", callback_data='discord_decor_bzn_15')],
                [InlineKeyboardButton("20$ - 590 UAH", callback_data='discord_decor_bzn_20')],
                [InlineKeyboardButton("25$ - 740 UAH", callback_data='discord_decor_bzn_25')],
                [InlineKeyboardButton("30$ - 885 UAH", callback_data='discord_decor_bzn_30')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='category_discord_decor')]
            ]
            await query.edit_message_text("üéÆ Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ (–ë–µ–∑ Nitro):", reply_markup=InlineKeyboardMarkup(keyboard))

        elif query.data == 'discord_decor_zn':
            keyboard = [
                [InlineKeyboardButton("5$ - 295 UAH", callback_data='discord_decor_zn_5')],
                [InlineKeyboardButton("10$ - 590 UAH", callback_data='discord_decor_zn_10')],
                [InlineKeyboardButton("15$ - 885 UAH", callback_data='discord_decor_zn_15')],
                [InlineKeyboardButton("20$ - 1180 UAH", callback_data='discord_decor_zn_20')],
                [InlineKeyboardButton("25$ - 1475 UAH", callback_data='discord_decor_zn_25')],
                [InlineKeyboardButton("30$ - 1770 UAH", callback_data='discord_decor_zn_30')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='category_discord_decor')]
            ]
            await query.edit_message_text("üéÆ Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ (–ó Nitro):", reply_markup=InlineKeyboardMarkup(keyboard))

        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ (–ü–æ–¥–ø–∏—Å–∫–∏) ---
        elif query.data in ['chatgpt_1', 'discord_basic_1', 'discord_basic_12',
                            'discord_full_1', 'discord_full_12',
                            'duolingo_ind_1', 'duolingo_ind_12', 'duolingo_fam_12',
                            'picsart_plus_1', 'picsart_plus_12',
                            'canva_pro_1', 'canva_pro_12',
                            'netflix_std_1', 'netflix_std_12']:
            # –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏, –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
            item_map = {
                'chatgpt_1': ("ChatGPT Plus", "1 –º—ñ—Å—è—Ü—å", "650"),
                'chatgpt_12': ("ChatGPT Plus", "12 –º—ñ—Å—è—Ü—ñ–≤", "6500"),
                'discord_basic_1': ("Discord Nitro Basic", "1 –º—ñ—Å—è—Ü—å", "170"),
                'discord_basic_12': ("Discord Nitro Basic", "12 –º—ñ—Å—è—Ü—ñ–≤", "1700"),
                'discord_full_1': ("Discord Nitro Full", "1 –º—ñ—Å—è—Ü—å", "300"),
                'discord_full_12': ("Discord Nitro Full", "12 –º—ñ—Å—è—Ü—ñ–≤", "3000"),
                'duolingo_ind_1': ("Duolingo Individual", "1 –º—ñ—Å—è—Ü—å", "300"),
                'duolingo_ind_12': ("Duolingo Individual", "12 –º—ñ—Å—è—Ü—ñ–≤", "3000"),
                'duolingo_fam_12': ("Duolingo Family", "12 –º—ñ—Å—è—Ü—ñ–≤", "2100"),
                'picsart_plus_1': ("Picsart Pro", "1 –º—ñ—Å—è—Ü—å", "350"),
                'picsart_plus_12': ("Picsart Pro", "12 –º—ñ—Å—è—Ü—ñ–≤", "3500"),
                'canva_pro_1': ("Canva Pro", "1 –º—ñ—Å—è—Ü—å", "350"),
                'canva_pro_12': ("Canva Pro", "12 –º—ñ—Å—è—Ü—ñ–≤", "3500"),
                'netflix_std_1': ("Netflix Standard", "1 –º—ñ—Å—è—Ü—å", "400"),
                'netflix_std_12': ("Netflix Standard", "12 –º—ñ—Å—è—Ü—ñ–≤", "4000"),
            }
            service, period, price = item_map.get(query.data, ("–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–æ–≤–∞—Ä", "–ù–µ–≤—ñ–¥–æ–º–∏–π –ø–µ—Ä—ñ–æ–¥", "0"))
            order_text = f"üõçÔ∏è –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n‚ñ´Ô∏è {service} ({period}) - {price} UAH\nüí≥ –í—Å—å–æ–≥–æ: {price} UAH"
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
            self.active_conversations[user_id] = {
                'type': 'subscription_order',
                'user_info': user,
                'assigned_owner': None,
                'order_details': order_text,
                'last_message': order_text
            }
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            self.save_active_conversation(user_id, 'subscription_order', None, order_text)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.bot_statistics['total_orders'] += 1
            self.save_stats()
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤ USD –¥–ª—è –æ–ø–ª–∞—Ç—ã
            uah_amount = float(price)
            usd_amount = convert_uah_to_usd(uah_amount)
            if usd_amount <= 0:
                 await query.edit_message_text("‚ùå –°—É–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç–∏ –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∞.")
                 return
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ USD –∏ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context.user_data['payment_amount_usd'] = usd_amount
            context.user_data['order_details_for_payment'] = order_text
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
            keyboard = [
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é", callback_data='pay_card')],
                [InlineKeyboardButton("ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data='pay_crypto')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')],
                [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            confirmation_text = f"""‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ!
{order_text}
–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏ üëá"""
            await query.edit_message_text(confirmation_text.strip(), reply_markup=reply_markup)

        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ (–¶–∏—Ñ—Ä–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã) ---
        elif query.data.startswith('discord_decor_'):
            # –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏, –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
            item_map = {
                'discord_decor_bzn_5': ("Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ (–ë–µ–∑ Nitro)", "5$", "145"),
                'discord_decor_bzn_10': ("Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ (–ë–µ–∑ Nitro)", "10$", "295"),
                'discord_decor_bzn_15': ("Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ (–ë–µ–∑ Nitro)", "15$", "440"),
                'discord_decor_bzn_20': ("Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ (–ë–µ–∑ Nitro)", "20$", "590"),
                'discord_decor_bzn_25': ("Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ (–ë–µ–∑ Nitro)", "25$", "740"),
                'discord_decor_bzn_30': ("Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ (–ë–µ–∑ Nitro)", "30$", "885"),
                'discord_decor_zn_5': ("Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ (–ó Nitro)", "5$", "295"),
                'discord_decor_zn_10': ("Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ (–ó Nitro)", "10$", "590"),
                'discord_decor_zn_15': ("Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ (–ó Nitro)", "15$", "885"),
                'discord_decor_zn_20': ("Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ (–ó Nitro)", "20$", "1180"),
                'discord_decor_zn_25': ("Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ (–ó Nitro)", "25$", "1475"),
                'discord_decor_zn_30': ("Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ (–ó Nitro)", "30$", "1770"),
            }
            service, period, price = item_map.get(query.data, ("–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–æ–≤–∞—Ä", "–ù–µ–≤—ñ–¥–æ–º–∏–π –ø–µ—Ä—ñ–æ–¥", "0"))
            order_text = f"üõçÔ∏è –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n‚ñ´Ô∏è {service} ({period}) - {price} UAH\nüí≥ –í—Å—å–æ–≥–æ: {price} UAH"
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
            self.active_conversations[user_id] = {
                'type': 'digital_order',
                'user_info': user,
                'assigned_owner': None,
                'order_details': order_text,
                'last_message': order_text
            }
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            self.save_active_conversation(user_id, 'digital_order', None, order_text)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.bot_statistics['total_orders'] += 1
            self.save_stats()
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤ USD –¥–ª—è –æ–ø–ª–∞—Ç—ã
            uah_amount = float(price)
            usd_amount = convert_uah_to_usd(uah_amount)
            if usd_amount <= 0:
                 await query.edit_message_text("‚ùå –°—É–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç–∏ –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∞.")
                 return
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ USD –∏ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context.user_data['payment_amount_usd'] = usd_amount
            context.user_data['order_details_for_payment'] = order_text
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
            keyboard = [
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é", callback_data='pay_card')],
                [InlineKeyboardButton("ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data='pay_crypto')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')],
                [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            confirmation_text = f"""‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ!
{order_text}
–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏ üëá"""
            await query.edit_message_text(confirmation_text.strip(), reply_markup=reply_markup)

        # --- –î–æ–±–∞–≤–ª–µ–Ω–æ: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏—Ç—å" –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞ –∏–∑ —Ñ–∞–π–ª–∞ ---
        elif query.data == 'proceed_to_payment':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
            if user_id in self.active_conversations and 'order_details' in self.active_conversations[user_id]:
                order_text = self.active_conversations[user_id]['order_details']
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –≤ UAH
                uah_amount = get_uah_amount_from_order_text(order_text)
                if uah_amount <= 0:
                     await query.edit_message_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Å—É–º—É –¥–ª—è –æ–ø–ª–∞—Ç–∏.")
                     return
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ USD
                usd_amount = convert_uah_to_usd(uah_amount)
                if usd_amount <= 0:
                    await query.edit_message_text("‚ùå –°—É–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç–∏ –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∞.")
                    return
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ USD –∏ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                context.user_data['payment_amount_usd'] = usd_amount
                context.user_data['order_details_for_payment'] = order_text
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
                keyboard = [
                    [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é", callback_data='pay_card')],
                    [InlineKeyboardButton("ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data='pay_crypto')],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')],
                    [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(f"üí≥ –û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏ –¥–ª—è —Å—É–º–∏ {usd_amount}$:", reply_markup=reply_markup)
            else:
                await query.edit_message_text("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")

        # --- –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ ---
        elif query.data == 'cancel_order':
            # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context.user_data.pop('selected_item', None)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            keyboard = [
                [InlineKeyboardButton("üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data='order')],
                [InlineKeyboardButton("‚ùì –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')],
                [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
            ]
            await query.edit_message_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=InlineKeyboardMarkup(keyboard))

    # --- –î–æ–±–∞–≤–ª–µ–Ω–æ/–û–±–Ω–æ–≤–ª–µ–Ω–æ: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –æ–ø–ª–∞—Ç–æ–π ---
    async def payment_callback_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –æ–ø–ª–∞—Ç–æ–π"""
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        data = query.data

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—É–º–º–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ (–¥–ª—è –æ–ø–ª–∞—Ç—ã –∏–∑ –±–æ—Ç–∞)
        usd_amount = context.user_data.get('payment_amount_usd')
        order_details = context.user_data.get('order_details_for_payment')

        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏—Ç—å" –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞ –∏–∑ —Ñ–∞–π–ª–∞ ---
        if data == 'proceed_to_payment':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
            if user_id in self.active_conversations and 'order_details' in self.active_conversations[user_id]:
                order_text = self.active_conversations[user_id]['order_details']
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –≤ UAH
                uah_amount = get_uah_amount_from_order_text(order_text)
                if uah_amount <= 0:
                     await query.edit_message_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Å—É–º—É –¥–ª—è –æ–ø–ª–∞—Ç–∏.")
                     return
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ USD
                usd_amount = convert_uah_to_usd(uah_amount)
                if usd_amount <= 0:
                    await query.edit_message_text("‚ùå –°—É–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç–∏ –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∞.")
                    return
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ USD –∏ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                context.user_data['payment_amount_usd'] = usd_amount
                context.user_data['order_details_for_payment'] = order_text
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
                keyboard = [
                    [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é", callback_data='pay_card')],
                    [InlineKeyboardButton("ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data='pay_crypto')],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')],
                    [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(f"üí≥ –û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏ –¥–ª—è —Å—É–º–∏ {usd_amount}$:", reply_markup=reply_markup)
            else:
                await query.edit_message_text("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –æ–ø–ª–∞—Ç–∏.")
            return

        # --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø–ª–∞—Ç—ã ---
        if not usd_amount or not order_details:
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–ª–∞—Ç—ñ–∂ –≤—Ç—Ä–∞—á–µ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return

        # --- –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ–π ---
        if data == 'pay_card':
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
            # –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º —Å—É–º–º—É –∏ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—á–µ–Ω–æ"
            keyboard = [
                [InlineKeyboardButton("‚úÖ –û–ø–ª–∞—á–µ–Ω–æ", callback_data='manual_payment_confirmed')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_payment_methods')],
                [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                f"üí≥ –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–¥—ñ–π—Å–Ω—ñ—Ç—å –æ–ø–ª–∞—Ç—É {usd_amount}$ –∫–∞—Ä—Ç–∫–æ—é –Ω–∞ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –º–∞–≥–∞–∑–∏–Ω—É."
                f"\n(–¢—É—Ç –±—É–¥—É—Ç—å —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏)"
                f"\n–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '‚úÖ –û–ø–ª–∞—á–µ–Ω–æ'.",
                reply_markup=reply_markup
            )
            context.user_data['awaiting_manual_payment_confirmation'] = True

        # --- –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é ---
        elif data == 'pay_crypto':
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
            keyboard = []
            for currency_name, currency_code in AVAILABLE_CURRENCIES.items():
                keyboard.append([InlineKeyboardButton(currency_name, callback_data=f'pay_crypto_{currency_code}')])
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_payment_methods')])
            keyboard.append([InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')])
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(f"ü™ô –û–±–µ—Ä—ñ—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç–∏ {usd_amount}$:", reply_markup=reply_markup)
            context.user_data.pop('nowpayments_invoice_id', None) # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π ID

        # --- –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã ---
        elif data.startswith('pay_crypto_'):
            currency_code = data.split('_', 2)[2] # pay_crypto_usdttrc20 -> usdttrc20
            currency_name = next((name for name, code in AVAILABLE_CURRENCIES.items() if code == currency_code), currency_code)

            try:
                # --- –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã NOWPayments ---
                pay_url, invoice_id = await self.pay_with_nowpayments(usd_amount, currency_code, order_details)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
                context.user_data['nowpayments_invoice_id'] = invoice_id
                keyboard = [
                    [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏", url=pay_url)],
                    [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å", callback_data='check_payment_status')],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_crypto_selection')],
                    [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(f"ü™ô –û–ø–ª–∞—Ç–∞ {usd_amount}$ –≤ {currency_name}:", reply_markup=reply_markup)
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–≤–æ–π—Å—É NOWPayments: {e}")
                await query.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –æ–ø–ª–∞—Ç–∏: {e}")

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã NOWPayments ---
        elif data == 'check_payment_status':
            invoice_id = context.user_data.get('nowpayments_invoice_id')
            if not invoice_id:
                await query.edit_message_text("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ ID —Ä–∞—Ö—É–Ω–∫—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.")
                return
            try:
                headers = {
                    'Authorization': f'Bearer {NOWPAYMENTS_API_KEY}',
                    'Content-Type': 'application/json'
                }
                response = requests.get(f"https://api.nowpayments.io/v1/invoice/{invoice_id}", headers=headers)
                response.raise_for_status()
                status_data = response.json()
                payment_status = status_data.get('payment_status', 'unknown')

                if payment_status == 'finished':
                    await query.edit_message_text("‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–π—à–ª–∞!")
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞
                    await self.request_account_data(query, context) # –ü–µ—Ä–µ–¥–∞–µ–º query
                elif payment_status in ['pending', 'waiting']:
                     # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã
                    currency_code = "usdttrc20" # –ò–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–¥ –≤–∞–ª—é—Ç—ã –≤ context
                    currency_name = next((name for name, code in AVAILABLE_CURRENCIES.items() if code == currency_code), currency_code)
                    pay_url = status_data.get("invoice_url", "#")
                    keyboard = [
                        [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏", url=pay_url)],
                        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å", callback_data='check_payment_status')],
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_crypto_selection')],
                        [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.edit_message_text(f"‚è≥ –û–ø–ª–∞—Ç–∞ —â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—Ç–∞—Ç—É—Å: {payment_status}.\nü™ô –û–ø–ª–∞—Ç–∞ {usd_amount}$ –≤ {currency_name}:", reply_markup=reply_markup)
                else:
                    # –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞
                    keyboard = [
                        [InlineKeyboardButton("üí≥ –Ü–Ω—à–∏–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏", callback_data='back_to_payment_methods')],
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')],
                        [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.edit_message_text(f"‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ–π—à–ª–∞ –∞–±–æ –±—É–ª–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –°—Ç–∞—Ç—É—Å: {payment_status}.", reply_markup=reply_markup)
            except requests.exceptions.RequestException as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Å—Ç–∞—Ç—É—Å—É NOWPayments: {e}")
                await query.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É –æ–ø–ª–∞—Ç–∏: –ø—Ä–æ–±–ª–µ–º–∞ –∑ –º–µ—Ä–µ–∂–µ—é.")
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É NOWPayments: {e}")
                await query.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É –æ–ø–ª–∞—Ç–∏: {e}")

        # --- –†—É—á–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ ---
        elif data == 'manual_payment_confirmed':
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
            await query.edit_message_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ –≤—Ä—É—á–Ω—É.")
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞
            await self.request_account_data(query, context) # –ü–µ—Ä–µ–¥–∞–µ–º query

        # --- –ù–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É –º–µ—Ç–æ–¥—É –æ–ø–ª–∞—Ç–∏ ---
        elif data == 'back_to_payment_methods':
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
            keyboard = [
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é", callback_data='pay_card')],
                [InlineKeyboardButton("ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ça", callback_data='pay_crypto')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')],
                [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(f"üí≥ –û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏ –¥–ª—è —Å—É–º–∏ {usd_amount}$:", reply_markup=reply_markup)
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            context.user_data.pop('awaiting_manual_payment_confirmation', None)
            context.user_data.pop('awaiting_crypto_currency_selection', None)
            context.user_data.pop('nowpayments_invoice_id', None)

        # --- –ù–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏ ---
        elif data == 'back_to_crypto_selection':
             # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
            keyboard = []
            for currency_name, currency_code in AVAILABLE_CURRENCIES.items():
                keyboard.append([InlineKeyboardButton(currency_name, callback_data=f'pay_crypto_{currency_code}')])
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_payment_methods')])
            keyboard.append([InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')])
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(f"ü™ô –û–±–µ—Ä—ñ—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç–∏ {usd_amount}$:", reply_markup=reply_markup)
            context.user_data.pop('nowpayments_invoice_id', None) # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π ID

    # --- –î–æ–±–∞–≤–ª–µ–Ω–æ: –§—É–Ω–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ NOWPayments ---
    async def pay_with_nowpayments(self, amount: float, currency: str, order_description: str) -> tuple[str, str]:
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–≤–æ–π—Å –≤ NOWPayments –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏ ID –∏–Ω–≤–æ–π—Å–∞."""
        if not NOWPAYMENTS_API_KEY:
            raise ValueError("NOWPAYMENTS_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

        url = "https://api.nowpayments.io/v1/invoice"
        payload = {
            "price_amount": amount,
            "price_currency": "usd",
            "order_id": f"order_{int(time.time())}", # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
            "order_description": order_description,
            "pay_currency": currency,
            "ipn_callback_url": f"{WEBHOOK_URL}/ipn", # URL –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç NOWPayments (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
            "success_url": f"{WEBHOOK_URL}/success", # URL –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
            "cancel_url": f"{WEBHOOK_URL}/cancel", # URL –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –æ–ø–ª–∞—Ç—ã (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
        }
        headers = {
            "Authorization": f"Bearer {NOWPAYMENTS_API_KEY}",
            "Content-Type": "application/json"
        }

        response = requests.post(url, json=payload, headers=headers)
        response.raise_for_status()
        invoice = response.json()
        pay_url = invoice.get("invoice_url", "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è")
        invoice_id = invoice.get("invoice_id", "–ù–µ–≤—ñ–¥–æ–º–∏–π ID —Ä–∞—Ö—É–Ω–∫—É")
        return pay_url, invoice_id

    # --- –î–æ–±–∞–≤–ª–µ–Ω–æ: –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ ---
    async def request_account_data(self, query_or_update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ (query –∏–ª–∏ update)
        if hasattr(query_or_update, 'from_user'):
            user_id = query_or_update.from_user.id
            is_query = True
        else: # –≠—Ç–æ Update (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ manual_payment_confirmed)
            user_id = query_or_update.effective_user.id
            is_query = False
            
        order_details = context.user_data.get('order_details_for_payment', '')

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞, –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ —Å–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
        is_digital = 'digital_order' in self.active_conversations.get(user_id, {}).get('type', '') or 'Discord –ü—Ä–∏–∫—Ä–∞—Å–∏' in order_details
        item_type = "–∞–∫–∞—É–Ω—Ç—É Discord" if is_digital else "–∞–∫–∞—É–Ω—Ç—É"

        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        message_text = (
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ!\n"
            f"–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –ª–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å –≤—ñ–¥ {item_type}.\n"
            f"–ù–∞–ø—Ä–∏–∫–ª–∞–¥: `login:password` –∞–±–æ `login password`"
        )
        if is_query:
            await query_or_update.edit_message_text(message_text, parse_mode='Markdown')
        else:
            await query_or_update.message.reply_text(message_text, parse_mode='Markdown')

        context.user_data['awaiting_account_data'] = True
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è–º –ø–æ–∑–∂–µ
        context.user_data['account_details_order'] = order_details

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        user_id = user.id
        message_text = update.message.text

        self.ensure_user_exists(user)
        self.save_message_to_db(user_id, message_text, True)

        # üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if user_id in [OWNER_ID_1, OWNER_ID_2]:
            await self.handle_owner_message(update, context)
            return

        # --- –î–æ–±–∞–≤–ª–µ–Ω–æ: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ ---
        if context.user_data.get('awaiting_account_data'):
            await self.handle_account_data_message(update, context)
            return
        # --- –ö–æ–Ω–µ—Ü –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ---

        # --- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ ---
        if user_id not in self.active_conversations:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –º–µ–Ω—é –¥–ª—è –ø–æ—á–∞—Ç–∫—É –¥—ñ–∞–ª–æ–≥—É.")
            return

        # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ---
        self.active_conversations[user_id]['last_message'] = message_text
        self.save_active_conversation(user_id, self.active_conversations[user_id]['type'], self.active_conversations[user_id].get('assigned_owner'), message_text)

        # --- –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é ---
        assigned_owner = self.active_conversations[user_id].get('assigned_owner')
        if assigned_owner:
            try:
                client_info = self.active_conversations[user_id]['user_info']
                forward_text = f"–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ {client_info.first_name} (@{client_info.username or '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}):\n{message_text}"
                await context.bot.send_message(chat_id=assigned_owner, text=forward_text)
                self.save_message_to_db(assigned_owner, forward_text, False)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é {assigned_owner}: {e}")
                await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞—Å–Ω–æ–≤–Ω–∏–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")
        else:
            # –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –¥–∏–∞–ª–æ–≥
            assigned = False
            for owner_id in [OWNER_ID_1, OWNER_ID_2]:
                if owner_id not in self.owner_client_map:
                    self.active_conversations[user_id]['assigned_owner'] = owner_id
                    self.owner_client_map[owner_id] = user_id
                    self.save_active_conversation(user_id, self.active_conversations[user_id]['type'], owner_id, message_text)
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é
                    try:
                        client_info = self.active_conversations[user_id]['user_info']
                        notification_text = f"üîî –ù–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥ –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ {client_info.first_name} (@{client_info.username or '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}):\n{message_text}"
                        await context.bot.send_message(chat_id=owner_id, text=notification_text)
                        self.save_message_to_db(owner_id, notification_text, False)
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        try:
                            with psycopg.connect(DATABASE_URL, row_factory=dict_row) as conn:
                                with conn.cursor() as cur:
                                    cur.execute("""
                                        SELECT message, is_from_user, created_at
                                        FROM messages
                                        WHERE user_id = %s
                                        ORDER BY created_at DESC
                                        LIMIT 5
                                    """, (user_id,))
                                    recent_msgs = cur.fetchall()
                            history_text = f"üí¨ –Ü—Å—Ç–æ—Ä—ñ—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞:\n\n"
                            for msg in reversed(recent_msgs): # –û—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
                                sender = "–ö–ª—ñ—î–Ω—Ç" if msg['is_from_user'] else "–ë–æ—Ç"
                                history_text += f"{sender} ({msg['created_at'].strftime('%Y-%m-%d %H:%M:%S')}): {msg['message']}\n"
                            await context.bot.send_message(chat_id=owner_id, text=history_text)
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞: {e}")
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–≤–µ—Ç–∏—Ç—å
                        await context.bot.send_message(chat_id=owner_id, text=f"üí¨ –û—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞:\n{message_text}\n–ù–∞–ø–∏—à—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å:")
                        assigned = True
                        break
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è {owner_id}: {e}")
                        # –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è
            if not assigned:
                await update.message.reply_text("‚è≥ –í—Å—ñ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫–∏ –∑–∞—Ä–∞–∑ –∑–∞–π–Ω—è—Ç—ñ. –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ —á–µ—Ä–≥—É. –ó–∞—Å–Ω–æ–≤–Ω–∏–∫ –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")

    # --- –î–æ–±–∞–≤–ª–µ–Ω–æ: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ª–æ–≥–∏–Ω–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º ---
    async def handle_account_data_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–≥–∏–Ω–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.effective_user
        user_id = user.id
        message_text = update.message.text

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not context.user_data.get('awaiting_account_data'):
            # –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ (–∏–ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º)
            await update.message.reply_text("‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –Ø–∫—â–æ —É –≤–∞—Å —î –ø–∏—Ç–∞–Ω–Ω—è, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –º–µ–Ω—é.")
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å (–ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞, –º–æ–∂–Ω–æ —É—Å–ª–æ–∂–Ω–∏—Ç—å)
        # –ü—Ä–∏–º–µ—Ä—ã: "user:pass", "user pass"
        parts = re.split(r'[:\s]+', message_text.strip(), maxsplit=1)
        if len(parts) < 2:
            await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ª–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å —É —Ñ–æ—Ä–º–∞—Ç—ñ `login:password` –∞–±–æ `login password`.", parse_mode='Markdown')
            return

        login, password = parts[0], parts[1]

        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
        order_details = context.user_data.get('account_details_order', '–ù–µ–≤—ñ–¥–æ–º–∏–π –∑–∞–∫–∞–∑')

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π
        account_info_message = (
            f"üîê –ù–æ–≤—ñ –¥–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç—É –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞!\n"
            f"üë§ –ö–ª—ñ—î–Ω—Ç: {user.first_name}\n"
            f"üÜî ID: {user_id}\n"
            f"üõçÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order_details}\n"
            f"üîë –õ–æ–≥—ñ–Ω: `{login}`\n"
            f"üîì –ü–∞—Ä–æ–ª—å: `{password}`"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è–º
        success_count = 0
        for owner_id in [OWNER_ID_1, OWNER_ID_2]:
            try:
                await context.bot.send_message(chat_id=owner_id, text=account_info_message, parse_mode='Markdown')
                success_count += 1
            except Exception as e:
                logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é {owner_id}: {e}")

        if success_count > 0:
            await update.message.reply_text("‚úÖ –î–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç—É —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ! –ó–∞—Å–Ω–æ–≤–Ω–∏–∫ –º–∞–≥–∞–∑–∏–Ω—É –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")
        else:
            await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É.")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.pop('awaiting_account_data', None)
        context.user_data.pop('payment_amount_usd', None)
        context.user_data.pop('order_details_for_payment', None)
        context.user_data.pop('account_details_order', None)
        context.user_data.pop('nowpayments_invoice_id', None)
        # –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω
        if user_id in self.active_conversations:
            del self.active_conversations[user_id]
        self.delete_active_conversation(user_id) # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ë–î

    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤)"""
        user = update.effective_user
        user_id = user.id
        document = update.message.document

        self.ensure_user_exists(user)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
        if user_id in self.active_conversations:
            await update.message.reply_text(
                "‚ùó –£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥."
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –ø–∏—Å–∞—Ç–∏ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –¥—ñ–∞–ª–æ–∑—ñ –∞–±–æ –∑–∞–≤–µ—Ä—à—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /stop, "
                "—è–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥."
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if document.mime_type != 'application/json':
            await update.message.reply_text("‚ùå –ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ JSON —Ñ–∞–π–ª–∏.")
            return

        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file = await context.bot.get_file(document.file_id)
            file_bytes = await file.download_as_bytearray()
            file_content = file_bytes.decode('utf-8')
            order_data = json.loads(file_content)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç JSON.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if 'items' not in order_data or 'total' not in order_data:
            await update.message.reply_text("‚ùå –£ —Ñ–∞–π–ª—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è (items, total).")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
        order_text = "üõçÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Å–∞–π—Ç—É (–∑ —Ñ–∞–π–ª—É):"
        for item in order_data['items']:
            order_text += f"\n‚ñ´Ô∏è {item['service']} {item.get('plan', '')} ({item['period']}) - {item['price']} UAH"
        order_text += f"\nüí≥ –í—Å—å–æ–≥–æ: {order_data['total']} UAH"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞ (–ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞, –º–æ–∂–Ω–æ —É—Å–ª–æ–∂–Ω–∏—Ç—å)
        has_digital = any("–ü—Ä–∏–∫—Ä–∞—Å–∏" in item.get('service', '') for item in order_data['items']) # –û–±–Ω–æ–≤–ª–µ–Ω–æ
        conversation_type = 'digital_order' if has_digital else 'subscription_order'

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–∫–∞–∑–µ
        self.active_conversations[user_id] = {
            'type': conversation_type,
            'user_info': user,
            'assigned_owner': None,
            'order_details': order_text,
            'last_message': order_text
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        self.save_active_conversation(user_id, conversation_type, None, order_text)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.bot_statistics['total_orders'] += 1
        self.save_stats()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏", callback_data='proceed_to_payment')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        confirmation_text = f"""‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ!
{order_text}
–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é üëá"""
        await update.message.reply_text(confirmation_text.strip(), reply_markup=reply_markup)

    async def handle_owner_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π"""
        owner = update.effective_user
        owner_id = owner.id
        message_text = update.message.text

        self.save_message_to_db(owner_id, message_text, True)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∑–Ω–∞—á–µ–Ω –ª–∏ –∫–ª–∏–µ–Ω—Ç –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é
        if owner_id not in self.owner_client_map:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É –∑ –∫–ª—ñ—î–Ω—Ç–æ–º.")
            return

        client_id = self.owner_client_map[owner_id]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏–∞–ª–æ–≥ –∫–ª–∏–µ–Ω—Ç–∞
        if client_id not in self.active_conversations:
            del self.owner_client_map[owner_id]
            await update.message.reply_text("‚ùå –î—ñ–∞–ª–æ–≥ —ñ–∑ –∫–ª—ñ—î–Ω—Ç–æ–º –±—É–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        try:
            await context.bot.send_message(chat_id=client_id, text=message_text)
            self.save_message_to_db(client_id, message_text, False)
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥–µ
            self.active_conversations[client_id]['last_message'] = message_text
            self.save_active_conversation(client_id, self.active_conversations[client_id]['type'], owner_id, message_text)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {client_id}: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É.")

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ---
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(msg="Exception while handling an update:", exc_info=context.error)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –≤–æ–∑–Ω–∏–∫—à–µ–π –æ—à–∏–±–∫–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        # try:
        #     if isinstance(update, Update) and update.effective_message:
        #         await update.effective_message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")
        # except:
        #     pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ

    # --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ ---
    async def set_commands_menu(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥"""
        owner_commands = [BotCommandScopeChat(chat_id=OWNER_ID_1), BotCommandScopeChat(chat_id=OWNER_ID_2)]
        user_commands = [BotCommandScopeChat(chat_id='*')] # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö

        try:
            # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π
            await self.application.bot.set_my_commands([
                ('start', '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é'),
                ('stop', '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥'),
                ('stats', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞'),
                ('history', '–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å'),
                ('chats', '–ê–∫—Ç–∏–≤–Ω—ñ —á–∞—Ç–∏'),
                ('clear', '–û—á–∏—Å—Ç–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ —á–∞—Ç–∏'),
                ('channel', '–ù–∞—à –∫–∞–Ω–∞–ª'),
                ('help', '–î–æ–ø–æ–º–æ–≥–∞'),
                ('dialog', '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥ (–¥–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π)')
            ], scope=owner_commands[0])

            await self.application.bot.set_my_commands([
                ('start', '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é'),
                ('stop', '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥'),
                ('order', '–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'),
                ('question', '–ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è'),
                ('channel', '–ù–∞—à –∫–∞–Ω–∞–ª'),
                ('help', '–î–æ–ø–æ–º–æ–≥–∞'),
                ('pay', '–û–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Å–∞–π—Ç—É') # –ö–æ–º–∞–Ω–¥–∞ /pay
            ], scope=user_commands[0])

            logger.info("‚úÖ –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥: {e}")

    # --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
    async def start_application(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram"""
        try:
            await self.set_commands_menu()
            await self.application.initialize()
            logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram: {e}")
            raise

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ polling"""
        try:
            if self.application.running:
                logger.warning("üõë –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫")
                return
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ polling —Ä–µ–∂–∏–º–∞...")
            await self.application.start()
            await self.application.updater.start_polling(
                poll_interval=1.0,
                timeout=10,
                bootstrap_retries=-1,
                read_timeout=10,
                write_timeout=10,
                connect_timeout=10,
                pool_timeout=10
            )
            logger.info("‚úÖ Polling –∑–∞–ø—É—â–µ–Ω")
        except Conflict as e:
            logger.error(f"üö® –ö–æ–Ω—Ñ–ª–∏–∫—Ç: {e}")
            logger.warning("üïí –û–∂–∏–¥–∞–µ–º 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
            await asyncio.sleep(15)
            await self.start_polling()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ polling: {e}")
            raise

    async def stop_polling(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling"""
        try:
            if self.application.updater and self.application.updater.running:
                await self.application.updater.stop()
            if self.application.running:
                await self.application.stop()
            if self.application.post_init:
                await self.application.shutdown()
            logger.info("üõë Polling –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ polling: {e}")

# --- Flask –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
flask_app = Flask(__name__)
CORS(flask_app) # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤

@flask_app.route('/', methods=['GET'])
def index():
    return '<h1>‚úÖ SecureShop Telegram Bot is running!</h1><p>Webhook is active.</p>'

@flask_app.route('/webhook', methods=['POST'])
async def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram"""
    # –õ–æ–≥–∏–∫–∞ webhook –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    return '', 200

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ ---
bot_instance = TelegramBot()

async def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
    try:
        if not WEBHOOK_URL:
            logger.error("‚ùå WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π webhook
        await bot_instance.application.bot.delete_webhook()
        logger.info("üóëÔ∏è –°—Ç–∞—Ä—ã–π webhook —É–¥–∞–ª–µ–Ω")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
        await bot_instance.application.bot.set_webhook(WEBHOOK_URL)
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")
        return False

def bot_thread():
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    global bot_running
    with bot_lock:
        if bot_running:
            logger.warning("üîÑ –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ –¥—Ä—É–≥–æ–º –ø–æ—Ç–æ–∫–µ")
            return
        bot_running = True

    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        loop.run_until_complete(bot_instance.start_application())
        logger.info("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")

        if USE_POLLING:
            logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Polling...")
            loop.run_until_complete(bot_instance.start_polling())
        else:
            logger.info("üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Webhook...")
            success = loop.run_until_complete(setup_webhook())
            if success:
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ Flask —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –Ω—É–∂–µ–Ω
                # –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—É—Å–∫ flask_app.run(port=PORT) –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                pass
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Webhook. –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω.")

    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã (Ctrl+C)")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ bot_thread: {e}")
        logger.warning("üïí –û–∂–∏–¥–∞–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
        time.sleep(30)
        bot_thread() # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫
    finally:
        try:
            if not loop.is_closed():
                loop.close()
        except:
            pass
        with bot_lock:
            bot_running = False
        logger.warning("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –±–æ—Ç–∞...")
        time.sleep(5)
        bot_thread() # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞

def auto_save_stats():
    """–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –±—É—Ñ–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    while True:
        time.sleep(BUFFER_FLUSH_INTERVAL)
        try:
            bot_instance.save_stats()
            bot_instance.flush_message_buffer()
            logger.info("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –±—É—Ñ–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

def main():
    # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è Render.com, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    if os.environ.get('RENDER'):
        logger.info("‚è≥ –û–∂–∏–¥–∞–µ–º 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤...")
        time.sleep(10)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    autosave_thread = threading.Thread(target=auto_save_stats)
    autosave_thread.daemon = True
    autosave_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_t = threading.Thread(target=bot_thread)
    bot_t.daemon = True
    bot_t.start()

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
    try:
        while True:
            time.sleep(PING_INTERVAL)
            logger.info("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")

if __name__ == '__main__':
    main()
