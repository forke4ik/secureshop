import logging
import os
import asyncio
import threading
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from flask import Flask, request, jsonify

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', '8181378677:AAFullvwrNhPJMi_HxgC75qSEKWdKOtCpbw')
OWNER_ID_1 = 7106925462  # @HiGki2pYYY
OWNER_ID_2 = 6279578957  # @oc33t
PORT = int(os.getenv('PORT', 8443))
WEBHOOK_URL = os.getenv('WEBHOOK_URL', 'https://secureshop-3obw.onrender.com')
PING_INTERVAL = int(os.getenv('PING_INTERVAL', 840))  # 14 –º–∏–Ω—É—Ç

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
active_conversations = {}
owner_client_map = {}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
telegram_app = None
flask_app = Flask(__name__)

class TelegramBot:
    def __init__(self):
        global telegram_app
        self.application = Application.builder().token(BOT_TOKEN).build()
        telegram_app = self.application
        self.setup_handlers()
        self.ping_running = False
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_error_handler(self.error_handler)
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º
        if user.id in [OWNER_ID_1, OWNER_ID_2]:
            owner_name = "@HiGki2pYYY" if user.id == OWNER_ID_1 else "@oc33t"
            await update.message.reply_text(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}! ({owner_name})\n"
                f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å –º–∞–≥–∞–∑–∏–Ω–∞."
            )
            return
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        keyboard = [
            [InlineKeyboardButton("üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data='order')],
            [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_message = f"""
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}! üëã

–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:
        """
        
        await update.message.reply_text(
            welcome_message.strip(),
            reply_markup=reply_markup
        )
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        if query.data in ['order', 'question']:
            active_conversations[user_id] = {
                'type': 'order' if query.data == 'order' else 'question',
                'user_info': query.from_user,
                'assigned_owner': None
            }
            
            action_text = "–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑" if query.data == 'order' else "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
            
            await query.edit_message_text(
                f"–û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã {action_text}. "
                f"–Ø –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é –º–∞–≥–∞–∑–∏–Ω–∞."
            )
        
        elif query.data.startswith('transfer_'):
            client_id = int(query.data.split('_')[1])
            current_owner = user_id
            
            other_owner = OWNER_ID_2 if current_owner == OWNER_ID_1 else OWNER_ID_1
            other_owner_name = "@oc33t" if other_owner == OWNER_ID_2 else "@HiGki2pYYY"
            
            if client_id in active_conversations:
                active_conversations[client_id]['assigned_owner'] = other_owner
                owner_client_map[other_owner] = client_id
                if current_owner in owner_client_map:
                    del owner_client_map[current_owner]
                
                client_info = active_conversations[client_id]['user_info']
                
                await query.edit_message_text(
                    f"‚úÖ –ß–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º {client_info.first_name} –ø–µ—Ä–µ–¥–∞–Ω {other_owner_name}"
                )
                
                await context.bot.send_message(
                    chat_id=other_owner,
                    text=f"üì® –í–∞–º –ø–µ—Ä–µ–¥–∞–Ω —á–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º:\n\n"
                         f"üë§ {client_info.first_name} (@{client_info.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'})\n"
                         f"üÜî ID: {client_info.id}\n\n"
                         f"–î–ª—è –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
                )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        
        if user_id in [OWNER_ID_1, OWNER_ID_2]:
            await self.handle_owner_message(update, context)
            return
        
        if user_id in active_conversations:
            await self.forward_to_owner(update, context)
        else:
            keyboard = [
                [InlineKeyboardButton("üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data='order')],
                [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
    
    async def forward_to_owner(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é"""
        user_id = update.effective_user.id
        user_info = active_conversations[user_id]['user_info']
        conversation_type = active_conversations[user_id]['type']
        
        assigned_owner = active_conversations[user_id]['assigned_owner']
        if not assigned_owner:
            assigned_owner = OWNER_ID_1
            active_conversations[user_id]['assigned_owner'] = assigned_owner
        
        owner_client_map[assigned_owner] = user_id
        
        type_emoji = "üõí" if conversation_type == 'order' else "‚ùì"
        type_text = "–ó–ê–ö–ê–ó" if conversation_type == 'order' else "–í–û–ü–†–û–°"
        owner_name = "@HiGki2pYYY" if assigned_owner == OWNER_ID_1 else "@oc33t"
        
        forward_message = f"""
{type_emoji} {type_text} –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info.first_name}
üì± Username: @{user_info.username if user_info.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üÜî ID: {user_info.id}

üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:
{update.message.text}

---
–î–ª—è –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç.
–ù–∞–∑–Ω–∞—á–µ–Ω: {owner_name}
        """
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–¥–∞—Ç—å –¥—Ä—É–≥–æ–º—É –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é", callback_data=f'transfer_{user_id}')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_message(
            chat_id=assigned_owner,
            text=forward_message.strip(),
            reply_markup=reply_markup
        )
        
        await update.message.reply_text(
            "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é –º–∞–≥–∞–∑–∏–Ω–∞. "
            "–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
    
    async def handle_owner_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è"""
        owner_id = update.effective_user.id
        
        if owner_id not in owner_client_map:
            owner_name = "@HiGki2pYYY" if owner_id == OWNER_ID_1 else "@oc33t"
            await update.message.reply_text(
                f"–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞. ({owner_name})\n"
                f"–î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞."
            )
            return
        
        client_id = owner_client_map[owner_id]
        
        if client_id not in active_conversations:
            del owner_client_map[owner_id]
            await update.message.reply_text(
                "–î–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω."
            )
            return
        
        try:
            await context.bot.send_message(
                chat_id=client_id,
                text=f"üì© –û—Ç–≤–µ—Ç –æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞:\n\n{update.message.text}"
            )
            
            client_info = active_conversations[client_id]['user_info']
            await update.message.reply_text(
                f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {client_info.first_name}"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {client_id}: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É. "
                "–í–æ–∑–º–æ–∂–Ω–æ, –∫–ª–∏–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞."
            )
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.warning(f'Update {update} caused error {context.error}')
    
    def start_ping_service(self):
        """–ó–∞–ø—É—Å–∫ –ø–∏–Ω–≥–æ–≤–∞–ª–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if not self.ping_running:
            self.ping_running = True
            ping_thread = threading.Thread(target=self.ping_loop)
            ping_thread.daemon = True
            ping_thread.start()
            logger.info("üîÑ –ü–∏–Ω–≥–æ–≤–∞–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    
    def ping_loop(self):
        """–¶–∏–∫–ª –ø–∏–Ω–≥–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        import requests
        ping_url = f"{WEBHOOK_URL}/ping"
        
        while self.ping_running:
            try:
                response = requests.get(ping_url, timeout=10)
                if response.status_code == 200:
                    logger.info("‚úÖ Ping —É—Å–ø–µ—à–µ–Ω - —Å–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–µ–Ω")
                else:
                    logger.warning(f"‚ö†Ô∏è Ping –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
            except requests.exceptions.RequestException as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ ping: {e}")
            except Exception as e:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ ping: {e}")
            
            time.sleep(PING_INTERVAL)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot_instance = TelegramBot()

# Flask –º–∞—Ä—à—Ä—É—Ç—ã
@flask_app.route('/ping', methods=['GET'])
def ping():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    return jsonify({
        'status': 'alive',
        'message': 'Bot is running',
        'timestamp': time.time(),
        'uptime': time.time() - flask_app.start_time if hasattr(flask_app, 'start_time') else 0
    }), 200

@flask_app.route('/health', methods=['GET'])
def health():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    return jsonify({
        'status': 'healthy',
        'bot_token': f"{BOT_TOKEN[:10]}..." if BOT_TOKEN else "Not set",
        'active_conversations': len(active_conversations),
        'owner_client_map': len(owner_client_map),
        'ping_interval': PING_INTERVAL,
        'webhook_url': WEBHOOK_URL
    }), 200

@flask_app.route(f'/{BOT_TOKEN}', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –¥–ª—è Telegram"""
    global telegram_app
    
    if not telegram_app:
        logger.error("Telegram app –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return jsonify({'error': 'Bot not initialized'}), 500
    
    try:
        json_data = request.get_json()
        if json_data:
            update = Update.de_json(json_data, telegram_app.bot)
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                loop.run_until_complete(telegram_app.process_update(update))
            finally:
                loop.close()
        return '', 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return jsonify({'error': str(e)}), 500

@flask_app.route('/', methods=['GET'])
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return jsonify({
        'message': 'Telegram Bot SecureShop –∞–∫—Ç–∏–≤–µ–Ω',
        'status': 'running',
        'webhook_url': f"{WEBHOOK_URL}/{BOT_TOKEN}",
        'ping_interval': f"{PING_INTERVAL} —Å–µ–∫—É–Ω–¥",
        'owners': ['@HiGki2pYYY', '@oc33t']
    }), 200

async def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
    try:
        webhook_url = f"{WEBHOOK_URL}/{BOT_TOKEN}"
        await telegram_app.bot.set_webhook(webhook_url)
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    flask_app.start_time = time.time()
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ SecureShop Telegram Bot...")
    logger.info(f"üîë BOT_TOKEN: {BOT_TOKEN[:10]}...")
    logger.info(f"üåê PORT: {PORT}")
    logger.info(f"üì° WEBHOOK_URL: {WEBHOOK_URL}")
    logger.info(f"‚è∞ PING_INTERVAL: {PING_INTERVAL} —Å–µ–∫—É–Ω–¥")
    logger.info(f"üë§ –û—Å–Ω–æ–≤–∞—Ç–µ–ª—å 1: {OWNER_ID_1} (@HiGki2pYYY)")
    logger.info(f"üë§ –û—Å–Ω–æ–≤–∞—Ç–µ–ª—å 2: {OWNER_ID_2} (@oc33t)")
    
    global telegram_app
    telegram_app = bot_instance.application
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
    def setup_webhook_thread():
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            success = loop.run_until_complete(setup_webhook())
            if success:
                logger.info("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å webhook")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ webhook: {e}")
        finally:
            loop.close()
    
    webhook_thread = threading.Thread(target=setup_webhook_thread)
    webhook_thread.daemon = True
    webhook_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∏–Ω–≥–æ–≤–∞–ª–∫—É
    bot_instance.start_ping_service()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
    logger.info("üåê –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞...")
    flask_app.run(
        host='0.0.0.0',
        port=PORT,
        debug=False,
        use_reloader=False,
        threaded=True
    )

if __name__ == '__main__':
    main()
