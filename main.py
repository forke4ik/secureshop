# main.py

import os
import logging
import asyncio
import threading
import requests
import json
import re
from datetime import datetime, timedelta
from urllib.parse import urljoin
import time
import signal
import sys
import random

from http.server import HTTPServer, BaseHTTPRequestHandler
import socketserver
from threading import Thread

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    BotCommand,
    BotCommandScopeChat,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)
import psycopg
from psycopg.rows import dict_row

# --- –ò–ú–ü–û–†–¢–´ –ò–ó –í–ê–®–ò–• –§–ê–ô–õ–û–í ---
from config import (
    BOT_TOKEN,
    DATABASE_URL,
    OWNER_ID_1,
    OWNER_ID_2,
    NOWPAYMENTS_API_KEY,
    NOWPAYMENTS_IPN_SECRET,
    PAYMENT_CURRENCY,
    CARD_NUMBER,
)
from products_config import SUBSCRIPTIONS, DIGITAL_PRODUCTS, DIGITAL_PRODUCT_MAP
from pay_rules import (
    parse_pay_command,
    get_full_product_info,
    generate_pay_command_from_selection,
    generate_pay_command_from_digital_product,
)

# --- –ù–ê–°–¢–†–û–ô–ö–ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ httpx, –æ–Ω–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ—Å–ª–æ–≤–Ω—ã–µ
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ---
bot_running = False
bot_lock = threading.Lock()

OWNER_IDS = [id for id in [OWNER_ID_1, OWNER_ID_2] if id is not None]

NOWPAYMENTS_API_URL = "https://api.nowpayments.io/v1"

# --- –°–ò–ú–£–õ–Ø–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–• –í –ü–ê–ú–Ø–¢–ò (–≤—Ä–µ–º–µ–Ω–Ω–æ, –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â—É—é –ë–î) ---
users_db = {}
active_conversations = {}  # {client_id: {assigned_owner, user_info, type, order_details}}
owner_client_map = {}       # {owner_id: client_id}

# --- –ü–ò–ù–ì–û–í–ê–õ–ö–ê ---
PING_INTERVAL = 60 * 5  # 5 –º–∏–Ω—É—Ç
WEBHOOK_URL = os.environ.get('RENDER_EXTERNAL_URL') or "http://localhost:10000" # URL –≤–∞—à–µ–≥–æ Render —Å–µ—Ä–≤–∏—Å–∞
ping_running = False
ping_thread = None

def ping_loop():
    """–¶–∏–∫–ª –ø–∏–Ω–≥–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ Render."""
    global ping_running
    ping_url = f"{WEBHOOK_URL}/health" # –ü–∏–Ω–≥—É–µ–º –Ω–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π health-check endpoint
    logger.info(f"üîÅ –ü–∏–Ω–≥–æ–≤–∞–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞. –ò–Ω—Ç–µ—Ä–≤–∞–ª: {PING_INTERVAL}—Å. –¶–µ–ª—å: {ping_url}")
    
    while ping_running:
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏ –≤ User-Agent, —á—Ç–æ–±—ã –∑–∞–ø—Ä–æ—Å—ã –≤—ã–≥–ª—è–¥–µ–ª–∏ –ø–æ-—Ä–∞–∑–Ω–æ–º—É
            user_agent = random.choice([
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
                "python-requests/2.31.0",
                "Render-Keepalive-Bot/1.0",
                "TelegramBot-Pinger/2.0"
            ])
            headers = {'User-Agent': user_agent}
            
            response = requests.get(ping_url, timeout=10, headers=headers)
            if response.status_code == 200:
                logger.debug(f"‚úÖ Ping —É—Å–ø–µ—à–µ–Ω: {response.status_code}")
            else:
                logger.warning(f"‚ö†Ô∏è Ping –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ ping (requests): {e}")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ ping: {e}")
        
        # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∏–Ω–≥–∞
        time.sleep(PING_INTERVAL)

def start_ping_service():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∏–Ω–≥–æ–≤–∞–ª–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
    global ping_running, ping_thread
    if not ping_running:
        ping_running = True
        ping_thread = threading.Thread(target=ping_loop, daemon=True)
        ping_thread.start()
        logger.info("üîÅ –°–µ—Ä–≤–∏—Å –ø–∏–Ω–≥–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω.")

def stop_ping_service():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∏–Ω–≥–æ–≤–∞–ª–∫—É."""
    global ping_running
    ping_running = False
    logger.info("‚èπÔ∏è –°–µ—Ä–≤–∏—Å –ø–∏–Ω–≥–æ–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# --- HTTP –°–ï–†–í–ï–† –î–õ–Ø HEALTH CHECK ---
class HealthCheckHandler(BaseHTTPRequestHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    def do_GET(self):
        if self.path == '/health':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            response = json.dumps({
                'status': 'ok', 
                'bot': 'running', 
                'timestamp': datetime.now().isoformat()
            }).encode('utf-8')
            self.wfile.write(response)
        elif self.path == '/':
            self.send_response(200)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b"Telegram Bot SecureShop is running. Use /health for status.")
        else:
            self.send_response(404)
            self.end_headers()

def start_http_server(port):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è health check."""
    try:
        httpd = socketserver.TCPServer(("", port), HealthCheckHandler)
        logger.info(f"üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        httpd.serve_forever()
    except OSError as e:
        if e.errno == 48: # Address already in use
            logger.warning(f"üåê –ü–æ—Ä—Ç {port} –∑–∞–Ω—è—Ç, HTTP —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞: {e}")

# --- –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ---
def ensure_user_exists(user):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î.
    –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏.
    """
    try:
        # –í —Ä–µ–∞–ª—å–Ω–æ–π –ë–î –∑–¥–µ—Å—å –±—ã–ª –±—ã SQL-–∑–∞–ø—Ä–æ—Å
        if user.id not in users_db:
            logger.info(f"üë§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.id}")
        users_db[user.id] = {
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name,
            'language_code': user.language_code,
            'is_bot': user.is_bot,
            'created_at': datetime.now(),
            'updated_at': datetime.now(),
        }
        # logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")

# --- –§–£–ù–ö–¶–ò–ò NOWPAYMENTS ---
def create_nowpayments_invoice(amount_uah, order_id, product_name):
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–≤–æ–π—Å –≤ NOWPayments.
    """
    logger.info(
        f"üßæ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ NOWPayments: —Å—É–º–º–∞ {amount_uah} {PAYMENT_CURRENCY}, –∑–∞–∫–∞–∑ {order_id}"
    )

    if not NOWPAYMENTS_API_KEY or NOWPAYMENTS_API_KEY in ['YOUR_NOWPAYMENTS_API_KEY_HERE', '']:
        logger.error("üîë NOWPayments API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!")
        return {"error": "API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}

    url = f"{NOWPAYMENTS_API_URL}/invoice"

    headers = {
        "x-api-key": NOWPAYMENTS_API_KEY,
        "Content-Type": "application/json",
        "Accept": "application/json",
    }

    payload = {
        "price_amount": amount_uah,
        "price_currency": PAYMENT_CURRENCY, # –ì—Ä–∏–≤–Ω–∞
        "order_id": order_id,
        "order_description": f"–û–ø–ª–∞—Ç–∞ –∑–∞ {product_name}",
        # URL –¥–ª—è Instant Payment Notification - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç NOWPayments –æ —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞—Ç–µ–∂–∞
        "ipn_callback_url": f"{WEBHOOK_URL}/ipn", 
        "success_url": "https://t.me/SecureShopBot", # URL —É—Å–ø–µ—Ö–∞
        "cancel_url": "https://t.me/SecureShopBot",   # URL –æ—Ç–º–µ–Ω—ã
    }

    try:
        response = requests.post(url, json=payload, headers=headers, timeout=10)
        logger.info(f"üßæ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ NOWPayments: {response.status_code}")
        # logger.debug(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ NOWPayments: {response.text}")

        if response.status_code in [200, 201]:
            return response.json()
        else:
            logger.error(
                f"üßæ –û—à–∏–±–∫–∞ NOWPayments –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {response.status_code} - {response.text}"
            )
            return {"error": f"–û—à–∏–±–∫–∞ API: {response.status_code}"}
    except Exception as e:
        logger.error(f"üßæ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞ NOWPayments: {e}")
        return {"error": f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}"}

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    logger.info(f"üöÄ –í—ã–∑–æ–≤ /start –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user = update.effective_user
    ensure_user_exists(user)
    is_owner = user.id in OWNER_IDS

    if is_owner:
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton("üë• –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã", callback_data="chats")],
            [InlineKeyboardButton("üõçÔ∏è –ó–∞–∫–∞–∑—ã", callback_data="orders")],
            [InlineKeyboardButton("‚ùì –í–æ–ø—Ä–æ—Å—ã", callback_data="questions")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        greeting = f"üëã –ü—Ä–∏–≤—ñ—Ç, {user.first_name}!\n–í–∏ —î –≤–ª–∞—Å–Ω–∏–∫–æ–º —Ü—å–æ–≥–æ –±–æ—Ç–∞."
        await update.message.reply_text(greeting, reply_markup=reply_markup)
    else:
        keyboard = [
            [InlineKeyboardButton("üõí –ó–∞–º–æ–≤–∏—Ç–∏", callback_data="order")],
            [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="question")],
            [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")],
            [InlineKeyboardButton("üì¢ –ö–∞–Ω–∞–ª", callback_data="channel")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        greeting = f"üëã –ü—Ä–∏–≤—ñ—Ç, {user.first_name}!\n–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ SecureShop!"
        await update.message.reply_text(greeting, reply_markup=reply_markup)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–∫—É."""
    logger.info(f"üìñ –í—ã–∑–æ–≤ /help –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    help_text = (
        "üëã –î–æ–±—Ä–æ–≥–æ –¥–Ω—è! –Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω—É SecureShop.\n\n"
        "üîê –ù–∞—à —Å–µ—Ä–≤—ñ—Å –∫—É–ø—É—î –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤–∞—à –≥–æ—Ç–æ–≤–∏–π –∞–∫–∞—É–Ω—Ç, –∞ –Ω–µ –¥–∞—î –≤–∞–º —Å–≤—ñ–π. "
        "–ú–∏ –¥—É–∂–µ —Å—Ç–∞—Ä–∞—î–º–æ—Å—å –±—É—Ç–∏ –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏, —Ç–æ–º—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –±—É–¥—å-—è–∫—ñ –ø–∏—Ç–∞–Ω–Ω—è "
        "–ø–æ –Ω–∞—à–æ–º—É —Å–µ—Ä–≤—ñ—Å—É –º–æ–∂–Ω–∞ –∑–∞–¥–∞–≤–∞—Ç–∏ —Ü—ñ–ª–æ–¥–æ–±–æ–≤–æ.\n\n"
        "üìå –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/start - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
        "/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞\n"
        "/order - –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n"
        "/question - –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è\n"
        "/channel - –ù–∞—à –≥–æ–ª–æ–≤–Ω–∏–π –∫–∞–Ω–∞–ª\n"
        "/stop - –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –¥—ñ–∞–ª–æ–≥\n\n"
        "–¢–∞–∫–æ–∂ –≤–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É `/pay` –∑ —Å–∞–π—Ç—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."
    )
    await update.message.reply_text(help_text)

async def channel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª."""
    logger.info(f"üì¢ –í—ã–∑–æ–≤ /channel –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    keyboard = [
        [InlineKeyboardButton("üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ SecureShopUA", url="https://t.me/SecureShopUA")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    message_text = (
        "üì¢ –ù–∞—à –≥–æ–ª–æ–≤–Ω–∏–π –∫–∞–Ω–∞–ª –∑ –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏ —Ç–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞–º–∏:\n"
        "üëâ –¢—É—Ç –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ:\n"
        "- üÜï –ê–∫—Ç—É–∞–ª—å–Ω—ñ —Ç–æ–≤–∞—Ä–∏ —Ç–∞ –ø–æ—Å–ª—É–≥–∏\n"
        "- üî• –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —Ç–∞ –∑–Ω–∏–∂–∫–∏\n"
        "- üéÅ –†–æ–∑—ñ–≥—Ä–∞—à—ñ —Ç–∞ –∞–∫—Ü—ñ—ó\n"
        "- ‚ÑπÔ∏è –í–∞–∂–ª–∏–≤—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—É\n\n"
        "–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å, —â–æ–± –±—É—Ç–∏ –≤ –∫—É—Ä—Å—ñ –≤—Å—ñ—Ö –Ω–æ–≤–∏–Ω! üëá"
    )
    await update.message.reply_text(message_text, reply_markup=reply_markup)

async def order_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞."""
    logger.info(f"üì¶ –í—ã–∑–æ–≤ /order –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    keyboard = [
        [InlineKeyboardButton("üí≥ –ü—ñ–¥–ø–∏—Å–∫–∏", callback_data="order_subscriptions")],
        [InlineKeyboardButton("üéÆ –¶–∏—Ñ—Ä–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏", callback_data="order_digital")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")],
    ]
    await update.message.reply_text(
        "üì¶ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç–æ–≤–∞—Ä—É:", reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def question_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞."""
    logger.info(f"‚ùì –í—ã–∑–æ–≤ /question –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user = update.effective_user
    ensure_user_exists(user)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    context.user_data["conversation_type"] = "question"
    await update.message.reply_text(
        "üìù –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. –Ø –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫—É –º–∞–≥–∞–∑–∏–Ω—É.\n"
        "–©–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ü–µ–π –¥—ñ–∞–ª–æ–≥ –ø—ñ–∑–Ω—ñ—à–µ, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop."
    )

async def stop_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥."""
    logger.info(f"‚èπÔ∏è –í—ã–∑–æ–≤ /stop –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name

    # –ï—Å–ª–∏ —ç—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü, –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
    if user_id in OWNER_IDS and user_id in owner_client_map:
        client_id = owner_client_map[user_id]
        # client_info = active_conversations.get(client_id, {}).get('user_info')
        if client_id in active_conversations:
            del active_conversations[client_id]
        del owner_client_map[user_id]
        try:
            await context.bot.send_message(chat_id=client_id, text="üë§ –ú–∞–≥–∞–∑–∏–Ω –∑–∞–≤–µ—Ä—à–∏–≤ –¥—ñ–∞–ª–æ–≥.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {client_id}: {e}")
            await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ (–º–æ–∂–ª–∏–≤–æ, –≤—ñ–Ω –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞), –∞–ª–µ –¥—ñ–∞–ª–æ–≥ –±—É–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑ –≤–∞—à–æ–≥–æ –±–æ–∫—É.")
        else:
            await update.message.reply_text(f"–î—ñ–∞–ª–æ–≥ –∑ –∫–ª—ñ—î–Ω—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –∫–ª–∏–µ–Ω—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º –µ–≥–æ –¥–∏–∞–ª–æ–≥
    if user_id in active_conversations:
        owner_id = active_conversations[user_id].get("assigned_owner")
        if owner_id and owner_id in owner_client_map:
            del owner_client_map[owner_id]
        del active_conversations[user_id]
        try:
            if owner_id:
                await context.bot.send_message(chat_id=owner_id, text=f"–ö–ª—ñ—î–Ω—Ç {user_name} –∑–∞–≤–µ—Ä—à–∏–≤ –¥—ñ–∞–ª–æ–≥.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ {owner_id}: {e}")
        await update.message.reply_text("–í–∞—à –¥—ñ–∞–ª–æ–≥ —ñ–∑ –º–∞–≥–∞–∑–∏–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É.")

async def dialog_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä—É—á–Ω–æ–π –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º (–¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤)."""
    logger.info(f"üí¨ –í—ã–∑–æ–≤ /dialog –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    owner_id = update.effective_user.id
    if owner_id not in OWNER_IDS:
        return # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç –Ω–µ-–≤–ª–∞–¥–µ–ª—å—Ü–µ–≤

    if not context.args:
        await update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /dialog <user_id>")
        return
    try:
        client_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    if client_id in active_conversations:
        await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç —É–∂–µ –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç—Å—è.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –∏–∑ –ë–î (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞)
    try:
        # –í —Ä–µ–∞–ª—å–Ω–æ–π –ë–î –∑–¥–µ—Å—å –±—ã–ª –±—ã SQL-–∑–∞–ø—Ä–æ—Å
        client_info = users_db.get(client_id, {})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {client_id}: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")
        return

    if not client_info:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥
    active_conversations[client_id] = {
        "assigned_owner": owner_id,
        "user_info": client_info,
        "type": "manual_dialog",
        "last_message": "–î—ñ–∞–ª–æ–≥ —Ä–æ–∑–ø–æ—á–∞—Ç–æ –≤—Ä—É—á–Ω—É"
    }
    owner_client_map[owner_id] = client_id

    try:
        await context.bot.send_message(
            chat_id=client_id,
            text="üë§ –ü—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫ –º–∞–≥–∞–∑–∏–Ω—É —Ä–æ–∑–ø–æ—á–∞–≤ –∑ –≤–∞–º–∏ –¥—ñ–∞–ª–æ–≥ –≤—Ä—É—á–Ω—É.\n\n"
                 "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /stop."
        )
        await update.message.reply_text(
            f"‚úÖ –í–∏ —Ä–æ–∑–ø–æ—á–∞–ª–∏ –¥—ñ–∞–ª–æ–≥ –∑ –∫–ª—ñ—î–Ω—Ç–æ–º {client_info.get('first_name', '–ù–µ–≤—ñ–¥–æ–º–∏–π')} (ID: {client_id}).\n\n"
            "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ü—å–æ–º—É –∫–ª—ñ—î–Ω—Ç—É. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /stop."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä—É—á–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞: {e}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—á–∞—Ç–∫—É –¥—ñ–∞–ª–æ–≥—É.")

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤)."""
    logger.info(f"üìà –í—ã–∑–æ–≤ /stats –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    owner_id = update.effective_user.id
    if owner_id not in OWNER_IDS:
        return # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç –Ω–µ-–≤–ª–∞–¥–µ–ª—å—Ü–µ–≤

    # –í —Ä–µ–∞–ª—å–Ω–æ–π –ë–î –∑–¥–µ—Å—å –±—ã–ª–∏ –±—ã SQL-–∑–∞–ø—Ä–æ—Å—ã
    # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏
    try:
        total_users = len(users_db)
        completed_orders = len([c for c in active_conversations.values() if c.get('type') == 'order'])
        active_questions = len([c for c in active_conversations.values() if c.get('type') == 'question'])
        active_chats = len(active_conversations)
        
        stats_message = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
            f"üë§ –£—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}\n"
            f"üõí –£—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å: {completed_orders}\n"
            f"‚ùì –ê–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Ç–∞–Ω–Ω—å: {active_questions}\n"
            f"üë• –ê–∫—Ç–∏–≤–Ω–∏—Ö —á–∞—Ç—ñ–≤: {active_chats}"
        )
        await update.message.reply_text(stats_message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK-–ó–ê–ü–†–û–°–û–í ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Å—Ç–∞–ª–∞ "–º–∏–≥–∞—Ç—å"
    user = query.from_user
    user_id = user.id
    ensure_user_exists(user)
    
    logger.info(f"üîò –ü–æ–ª—É—á–µ–Ω callback –∑–∞–ø—Ä–æ—Å: {query.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    # --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è ---
    if query.data == "order":
        keyboard = [
            [InlineKeyboardButton("üí≥ –ü—ñ–¥–ø–∏—Å–∫–∏", callback_data="order_subscriptions")],
            [InlineKeyboardButton("üéÆ –¶–∏—Ñ—Ä–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏", callback_data="order_digital")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        await query.message.edit_text("üì¶ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç–æ–≤–∞—Ä—É:", reply_markup=InlineKeyboardMarkup(keyboard))
    elif query.data == "question":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        context.user_data["conversation_type"] = "question"
        await query.message.edit_text(
            "üìù –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. –Ø –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫—É –º–∞–≥–∞–∑–∏–Ω—É.\n"
            "–©–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ü–µ–π –¥—ñ–∞–ª–æ–≥ –ø—ñ–∑–Ω—ñ—à–µ, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop."
        )
    elif query.data == "help":
        help_text = (
            "üëã –î–æ–±—Ä–æ–≥–æ –¥–Ω—è! –Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω—É SecureShop.\n\n"
            "üîê –ù–∞—à —Å–µ—Ä–≤—ñ—Å –∫—É–ø—É—î –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤–∞—à –≥–æ—Ç–æ–≤–∏–π –∞–∫–∞—É–Ω—Ç, –∞ –Ω–µ –¥–∞—î –≤–∞–º —Å–≤—ñ–π. "
            "–ú–∏ –¥—É–∂–µ —Å—Ç–∞—Ä–∞—î–º–æ—Å—å –±—É—Ç–∏ –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏, —Ç–æ–º—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –±—É–¥—å-—è–∫—ñ –ø–∏—Ç–∞–Ω–Ω—è "
            "–ø–æ –Ω–∞—à–æ–º—É —Å–µ—Ä–≤—ñ—Å—É –º–æ–∂–Ω–∞ –∑–∞–¥–∞–≤–∞—Ç–∏ —Ü—ñ–ª–æ–¥–æ–±–æ–≤–æ.\n\n"
            "üìå –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:\n"
            "/start - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
            "/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞\n"
            "/order - –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n"
            "/question - –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è\n"
            "/channel - –ù–∞—à –≥–æ–ª–æ–≤–Ω–∏–π –∫–∞–Ω–∞–ª\n"
            "/stop - –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –¥—ñ–∞–ª–æ–≥\n\n"
            "–¢–∞–∫–æ–∂ –≤–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É `/pay` –∑ —Å–∞–π—Ç—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."
        )
        await query.message.edit_text(help_text)
    elif query.data == "channel":
        keyboard = [[InlineKeyboardButton("üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ SecureShopUA", url="https://t.me/SecureShopUA")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        message_text = (
            "üì¢ –ù–∞—à –≥–æ–ª–æ–≤–Ω–∏–π –∫–∞–Ω–∞–ª –∑ –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏ —Ç–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞–º–∏:\n"
            "üëâ –¢—É—Ç –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ:\n"
            "- üÜï –ê–∫—Ç—É–∞–ª—å–Ω—ñ —Ç–æ–≤–∞—Ä–∏ —Ç–∞ –ø–æ—Å–ª—É–≥–∏\n"
            "- üî• –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —Ç–∞ –∑–Ω–∏–∂–∫–∏\n"
            "- üéÅ –†–æ–∑—ñ–≥—Ä–∞—à—ñ —Ç–∞ –∞–∫—Ü—ñ—ó\n"
            "- ‚ÑπÔ∏è –í–∞–∂–ª–∏–≤—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—É\n\n"
            "–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å, —â–æ–± –±—É—Ç–∏ –≤ –∫—É—Ä—Å—ñ –≤—Å—ñ—Ö –Ω–æ–≤–∏–Ω! üëá"
        )
        await query.message.edit_text(message_text, reply_markup=reply_markup)
    elif query.data == "back_to_main":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_owner = user.id in OWNER_IDS
        if is_owner:
            keyboard = [
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
                [InlineKeyboardButton("üë• –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã", callback_data="chats")], # –ó–∞–≥–ª—É—à–∫–∞
                [InlineKeyboardButton("üõçÔ∏è –ó–∞–∫–∞–∑—ã", callback_data="orders")],      # –ó–∞–≥–ª—É—à–∫–∞
                [InlineKeyboardButton("‚ùì –í–æ–ø—Ä–æ—Å—ã", callback_data="questions")],   # –ó–∞–≥–ª—É—à–∫–∞
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            greeting = f"üëã –ü—Ä–∏–≤—ñ—Ç, {user.first_name}!\n–í–∏ —î –≤–ª–∞—Å–Ω–∏–∫–æ–º —Ü—å–æ–≥–æ –±–æ—Ç–∞."
            await query.message.edit_text(greeting, reply_markup=reply_markup)
        else:
            keyboard = [
                [InlineKeyboardButton("üõí –ó–∞–º–æ–≤–∏—Ç–∏", callback_data="order")],
                [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="question")],
                [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")],
                [InlineKeyboardButton("üì¢ –ö–∞–Ω–∞–ª", callback_data="channel")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            greeting = f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SecureShop!"
            await query.message.edit_text(greeting, reply_markup=reply_markup)
    
    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ ---
    elif query.data == "order_subscriptions":
        keyboard = []
        for service_key, service_data in SUBSCRIPTIONS.items():
            keyboard.append([InlineKeyboardButton(service_data['name'], callback_data=f'service_{service_key}')])
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order')])
        await query.message.edit_text("üí≥ –û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É:", reply_markup=InlineKeyboardMarkup(keyboard))
    elif query.data.startswith('service_'):
        service_key = query.data.split('_')[1]
        service = SUBSCRIPTIONS.get(service_key)
        if service:
            keyboard = []
            for plan_key, plan_data in service['plans'].items():
                keyboard.append([InlineKeyboardButton(plan_data['name'], callback_data=f'plan_{service_key}_{plan_key}')])
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order_subscriptions')])
            await query.message.edit_text(f"üìã –û–±–µ—Ä—ñ—Ç—å –ø–ª–∞–Ω –¥–ª—è {service['name']}:", reply_markup=InlineKeyboardMarkup(keyboard))
    elif query.data.startswith('plan_'):
        parts = query.data.split('_')
        if len(parts) == 3:
            service_key, plan_key = parts[1], parts[2]
            service = SUBSCRIPTIONS.get(service_key)
            if service and plan_key in service['plans']:
                plan_data = service['plans'][plan_key]
                keyboard = []
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –ø–ª–∞–Ω–∞ –µ—Å—Ç—å –ø–æ–ª–µ 'options' —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–µ—Ä–∏–æ–¥–æ–≤ –∏ —Ü–µ–Ω
                for option in plan_data.get('options', []):
                    # –°–æ–∑–¥–∞–µ–º callback_data –≤ —Ñ–æ—Ä–º–∞—Ç–µ add_service_plan_period_price
                    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –ø–µ—Ä–∏–æ–¥–µ –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
                    callback_data = f"add_{service_key}_{plan_key}_{option['period'].replace(' ', '_')}_{option['price']}"
                    keyboard.append([InlineKeyboardButton(f"{option['period']} - {option['price']} UAH", callback_data=callback_data)])
                keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'service_{service_key}')])
                await query.message.edit_text(
                    f"üõí {service['name']} {plan_data['name']}\n–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
    elif query.data.startswith('add_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        parts = query.data.split('_')
        # parts = ['add', 'service_key', 'plan_key', 'period_part1', 'period_part2', ..., 'price']
        # –ú–∏–Ω–∏–º—É–º 5 —á–∞—Å—Ç–µ–π: add_service_plan_period_price
        if len(parts) < 5 or not parts[-1].isdigit():
             logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data 'add_': {query.data}")
             await query.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É.")
             return

        service_key = parts[1]
        plan_key = parts[2]
        # –¶–µ–Ω–∞ –≤—Å–µ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å
        price_str = parts[-1] 
        # –ü–µ—Ä–∏–æ–¥ - —ç—Ç–æ –≤—Å—ë, —á—Ç–æ –º–µ–∂–¥—É plan_key –∏ price_str
        period_parts = parts[3:-1] 
        period_key = "_".join(period_parts) # –°–æ–±–∏—Ä–∞–µ–º "1_–º—ñ—Å—è—Ü—å"
        period = period_key.replace('_', ' ') # –ü–æ–ª—É—á–∞–µ–º "1 –º—ñ—Å—è—Ü—å"
        
        try:
            price = int(price_str)
            service = SUBSCRIPTIONS.get(service_key)
            
            if service and plan_key in service['plans']:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /pay –¥–ª—è –æ–ø–ª–∞—Ç—ã
                # order_id –º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –æ—Å–Ω–æ–≤–µ user_id –∏ —Ü–µ–Ω—ã
                service_abbr = service_key[:3].capitalize() # –ü–µ—Ä–≤—ã–µ 3 –±—É–∫–≤—ã + –∑–∞–≥–ª–∞–≤–Ω–∞—è
                plan_abbr = plan_key.upper()
                # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
                period_abbr = period.replace('–º—ñ—Å—è—Ü—å', '–º').replace('–º—ñ—Å—è—Ü—ñ–≤', '–º')
                order_id = 'O' + str(user_id)[-4:] + str(price)[-2:] # –ü—Ä–∏–º–µ—Ä: O12345678901234567890
                command = f"/pay {order_id} {service_abbr}-{plan_abbr}-{period_abbr}-{price}"
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –≤ user_data –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                context.user_data['pending_order'] = {
                    'order_id': order_id,
                    'service': service['name'],
                    'plan': service['plans'][plan_key]['name'],
                    'period': period,
                    'price': price,
                    'command': command
                }
                
                message = (
                    f"üõçÔ∏è –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≥–æ—Ç–æ–≤–µ!\n\n"
                    f"–°–∫–æ–ø—ñ—é–π—Ç–µ —Ü—é –∫–æ–º–∞–Ω–¥—É —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —ó—ó –±–æ—Ç—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:\n"
                    f"<code>{command}</code>\n\n"
                    f"–ê–±–æ –æ–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏ –Ω–∏–∂—á–µ."
                )
                
                keyboard = [
                    [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ –∫–∞—Ä—Ç–∫–æ—é", callback_data=f"pay_card_{price}")],
                    [InlineKeyboardButton("‚Çø –û–ø–ª–∞—Ç–∏—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é", callback_data=f"pay_crypto_{price}")],
                    [InlineKeyboardButton("üìã –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='back_to_main')]
                ]
                
                await query.message.edit_text(message, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(keyboard))
            else:
                await query.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞: —Å–µ—Ä–≤—ñ—Å –∞–±–æ –ø–ª–∞–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ add_ callback: {e}")
            await query.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É.")

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –ö–ê–†–¢–û–ô ---
    elif query.data.startswith('pay_card_'):
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É –∏–∑ callback_data, –Ω–∞–ø—Ä–∏–º–µ—Ä, "pay_card_100" -> 100
            price_str = query.data.split('_')[2]
            price = int(price_str)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏–∑ user_data
            pending_order = context.user_data.get('pending_order')
            
            if not pending_order:
                await query.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞: —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—è.")
                return
                
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º Markdown)
            # –¢–µ–ª–µ–≥—Ä–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–ª–∞–µ—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ ``
            formatted_card_number = f"`{CARD_NUMBER}`"
            
            message = (
                f"üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é:\n"
                f"–°—É–º–∞: {price} UAH\n"
                f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏: {formatted_card_number}\n"
                f"(–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –Ω–æ–º–µ—Ä, —â–æ–± —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏)\n"
                f"–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É: –û–ø–ª–∞—Ç–∞ –∑–∞ {pending_order['service']} {pending_order['plan']} ({pending_order['period']})\n\n"
                f"–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ."
            )
            
            keyboard = [
                [InlineKeyboardButton("‚úÖ –û–ø–ª–∞—á–µ–Ω–æ", callback_data='paid_card')],
                [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data='cancel_payment')]
            ]
            
            await query.message.edit_text(
                message, 
                parse_mode='Markdown', # –í–∞–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è `–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã`
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π: {e}")
            await query.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –æ–ø–ª–∞—Ç–∏ –∫–∞—Ä—Ç–∫–æ—é.")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π: {e}")
            await query.message.edit_text("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –æ–ø–ª–∞—Ç–∏ –∫–∞—Ä—Ç–∫–æ—é.")

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–û–ô ---
    elif query.data.startswith('pay_crypto_'):
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É –∏–∑ callback_data, –Ω–∞–ø—Ä–∏–º–µ—Ä, "pay_crypto_100" -> 100
            price_str = query.data.split('_')[2]
            price = int(price_str)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏–∑ user_data
            pending_order = context.user_data.get('pending_order')
            
            if not pending_order:
                await query.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞: —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—è.")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –≤ NOWPayments
            invoice_data = create_nowpayments_invoice(
                price, 
                pending_order['order_id'], 
                f"{pending_order['service']} {pending_order['plan']} ({pending_order['period']})"
            )
            
            if invoice_data and 'invoice_url' in invoice_data:
                pay_url = invoice_data['invoice_url']
                message = (
                    f"‚Çø –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é:\n"
                    f"–°—É–º–∞: {price} UAH\n"
                    f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –æ–ø–ª–∞—Ç–∏.\n\n"
                    f"–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É \"‚úÖ –û–ø–ª–∞—á–µ–Ω–æ\"."
                )
                
                keyboard = [
                    [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏", url=pay_url)],
                    [InlineKeyboardButton("‚úÖ –û–ø–ª–∞—á–µ–Ω–æ", callback_data='paid_crypto')],
                    [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data='cancel_payment')]
                ]
                
                await query.message.edit_text(message, reply_markup=InlineKeyboardMarkup(keyboard))
            else:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                error_msg = invoice_data.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞') if invoice_data else '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
                await query.message.edit_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–≤–æ–π—Å—É –¥–ª—è –æ–ø–ª–∞—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é: {error_msg}")
        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π: {e}")
            await query.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –æ–ø–ª–∞—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é.")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π: {e}")
            await query.message.edit_text("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –æ–ø–ª–∞—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é.")

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û–ü–õ–ê–ß–ï–ù–û" (–∫–∞—Ä—Ç–∞ –∏–ª–∏ –∫—Ä–∏–ø—Ç–∞) ---
    elif query.data in ['paid_card', 'paid_crypto']:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏–∑ user_data
        pending_order = context.user_data.get('pending_order')
        if pending_order:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
            order_summary = (
                f"üõçÔ∏è –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø #{pending_order['order_id']}\n\n"
                f"üë§ –ö–ª—ñ—î–Ω—Ç: @{user.username or user.first_name} (ID: {user_id})\n\n"
                f"üì¶ –î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n"
                f"‚ñ´Ô∏è –°–µ—Ä–≤—ñ—Å: {pending_order['service']}\n"
                f"‚ñ´Ô∏è –ü–ª–∞–Ω: {pending_order['plan']}\n"
                f"‚ñ´Ô∏è –ü–µ—Ä—ñ–æ–¥: {pending_order['period']}\n"
                f"‚ñ´Ô∏è –°—É–º–∞: {pending_order['price']} UAH\n\n"
                f"üí≥ –ó–ê–ì–ê–õ–¨–ù–ê –°–£–ú–ê: {pending_order['price']} UAH\n\n"
                f"–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: <code>{pending_order['command']}</code>\n\n"
                f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚úÖ –í–∑—è—Ç–∏', —â–æ–± –æ–±—Ä–æ–±–∏—Ç–∏ —Ü–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."
            )
            
            # –ö–Ω–æ–ø–∫–∞ "–í–∑—è—Ç—å" –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
            keyboard = [
                [InlineKeyboardButton("‚úÖ –í–∑—è—Ç–∏", callback_data=f"take_order_{user_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞–º
            success = False
            for owner_id in OWNER_IDS:
                try:
                    await context.bot.send_message(
                        chat_id=owner_id, 
                        text=order_summary, 
                        parse_mode='HTML', # –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è <code>
                        reply_markup=reply_markup
                    )
                    success = True
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É {owner_id}: {e}")
            
            if success:
                await query.message.edit_text("‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
            else:
                await query.message.edit_text("‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è, –∞–ª–µ –æ–ø–ª–∞—Ç–∞ –ø—Ä–∏–π–Ω—è—Ç–∞.")
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ user_data
            context.user_data.pop('pending_order', None)
        else:
            await query.message.edit_text("‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ–ø–ª–∞—Ç—É –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞ –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—è.")

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–°–ö–ê–°–£–í–ê–¢–ò" –æ–ø–ª–∞—Ç—É ---
    elif query.data == 'cancel_payment':
        pending_order = context.user_data.get('pending_order')
        if pending_order:
            await query.message.edit_text(
                f"‚ùå –û–ø–ª–∞—Ç–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞.\n"
                f"–°–µ—Ä–≤—ñ—Å: {pending_order['service']}\n"
                f"–ü–ª–∞–Ω: {pending_order['plan']}\n"
                f"–ü–µ—Ä—ñ–æ–¥: {pending_order['period']}\n"
                f"–°—É–º–∞: {pending_order['price']} UAH\n\n"
                f"–í–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ /start."
            )
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
            context.user_data.pop('pending_order', None)
        else:
            await query.message.edit_text("‚ùå –û–ø–ª–∞—Ç–∞ –≤–∂–µ —Å–∫–∞—Å–æ–≤–∞–Ω–∞ –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—è.")

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ ---
    elif query.data == "order_digital":
        keyboard = [
            [InlineKeyboardButton("üéÆ Discord –£–∫—Ä–∞—à–µ–Ω–Ω—è", callback_data="digital_discord_decor")],
            [InlineKeyboardButton("üéÆ PSN Gift Cards", callback_data="digital_psn_cards")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="order")],
        ]
        await query.message.edit_text("üéÆ –û–±–µ—Ä—ñ—Ç—å —Ü–∏—Ñ—Ä–æ–≤–∏–π —Ç–æ–≤–∞—Ä:", reply_markup=InlineKeyboardMarkup(keyboard))
        
    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ Discord –£–∫—Ä–∞—à–µ–Ω–Ω—è —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ ---
    elif query.data == "digital_discord_decor":
        keyboard = [
            [InlineKeyboardButton("üé® –£–∫—Ä–∞—à–µ–Ω–Ω—è –ë–µ–∑ Nitro", callback_data="discord_decor_bzn")],
            [InlineKeyboardButton("‚ú® –£–∫—Ä–∞—à–µ–Ω–Ω—è –ó Nitro", callback_data="discord_decor_zn")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="order_digital")],
        ]
        await query.message.edit_text("üéÆ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø Discord –£–∫—Ä–∞—à–µ–Ω–Ω—è:", reply_markup=InlineKeyboardMarkup(keyboard))
    elif query.data == "discord_decor_bzn":
        keyboard = []
        for product_callback, product_id in DIGITAL_PRODUCT_MAP.items():
            product_data = DIGITAL_PRODUCTS[product_id]
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 'bzn'
            if product_data.get('category') == 'bzn':
                keyboard.append([InlineKeyboardButton(f"{product_data['name']} - {product_data['price']} UAH", callback_data=product_callback)])
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="digital_discord_decor")])
        await query.message.edit_text("üé® Discord –£–∫—Ä–∞—à–µ–Ω–Ω—è (–ë–µ–∑ Nitro):", reply_markup=InlineKeyboardMarkup(keyboard))
    elif query.data == "discord_decor_zn":
        keyboard = []
        for product_callback, product_id in DIGITAL_PRODUCT_MAP.items():
            product_data = DIGITAL_PRODUCTS[product_id]
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 'zn'
            if product_data.get('category') == 'zn':
                keyboard.append([InlineKeyboardButton(f"{product_data['name']} - {product_data['price']} UAH", callback_data=product_callback)])
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="digital_discord_decor")])
        await query.message.edit_text("‚ú® Discord –£–∫—Ä–∞—à–µ–Ω–Ω—è (–ó Nitro):", reply_markup=InlineKeyboardMarkup(keyboard))
        
    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ PSN Gift Cards ---
    elif query.data == "digital_psn_cards":
        keyboard = []
        for product_callback, product_id in DIGITAL_PRODUCT_MAP.items():
            product_data = DIGITAL_PRODUCTS[product_id]
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 'psn'
            if product_data.get('category') == 'psn':
                keyboard.append([InlineKeyboardButton(f"{product_data['name']} - {product_data['price']} UAH", callback_data=product_callback)])
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="order_digital")])
        await query.message.edit_text("üéÆ PSN Gift Cards:", reply_markup=InlineKeyboardMarkup(keyboard))
        
    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ ---
    elif query.data.startswith('digital_'):
        product_id = DIGITAL_PRODUCT_MAP.get(query.data) # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –ø—Ä–æ–¥—É–∫—Ç–∞
        if product_id:
            product_data = DIGITAL_PRODUCTS[product_id]
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /pay –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            order_id = 'D' + str(user_id)[-4:] + str(product_data['price'])[-2:] # –ü—Ä–∏–º–µ—Ä: D12345678901234567890
            service_abbr = "Dis" if "Discord" in product_data['name'] else "Dig"
            plan_abbr = "Dec" if "–£–∫—Ä–∞—à–µ–Ω–Ω—è" in product_data['name'] else "Prod"
            price = product_data['price']
            command = f"/pay {order_id} {service_abbr}-{plan_abbr}-1—à—Ç-{price}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –≤ user_data
            context.user_data['pending_order'] = {
                'order_id': order_id,
                'service': "–¶–∏—Ñ—Ä–æ–≤–∏–π —Ç–æ–≤–∞—Ä",
                'plan': product_data['name'],
                'period': "1 —à—Ç",
                'price': price,
                'command': command
            }
            
            message = (
                f"üõçÔ∏è –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≥–æ—Ç–æ–≤–µ!\n\n"
                f"–°–∫–æ–ø—ñ—é–π—Ç–µ —Ü—é –∫–æ–º–∞–Ω–¥—É —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —ó—ó –±–æ—Ç—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:\n"
                f"<code>{command}</code>\n\n"
                f"–ê–±–æ –æ–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏ –Ω–∏–∂—á–µ."
            )
            
            keyboard = [
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ –∫–∞—Ä—Ç–∫–æ—é", callback_data=f"pay_card_{price}")],
                [InlineKeyboardButton("‚Çø –û–ø–ª–∞—Ç–∏—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é", callback_data=f"pay_crypto_{price}")],
                [InlineKeyboardButton("üìã –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='back_to_main')]
            ]
            
            await query.message.edit_text(message, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await query.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞: —Ü–∏—Ñ—Ä–æ–≤–∏–π —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑—è—Ç–∏—è –∑–∞–∫–∞–∑–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º ---
    elif query.data.startswith('take_order_'):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ callback_data, –Ω–∞–ø—Ä–∏–º–µ—Ä, "take_order_123456789" -> 123456789
        try:
            client_id = int(query.data.split('_')[-1])
            owner_id = user_id # –í–ª–∞–¥–µ–ª–µ—Ü, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–∑—è—Ç –ª–∏ —É–∂–µ –∑–∞–∫–∞–∑ –¥—Ä—É–≥–∏–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
            if client_id in active_conversations and active_conversations[client_id].get('assigned_owner'):
                await query.answer("‚ùå –¶–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —ñ–Ω—à–∏–º –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫–æ–º –º–∞–≥–∞–∑–∏–Ω—É.", show_alert=True)
                return

            # –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π –ë–î –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å)
            client_info = users_db.get(client_id, {})
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞–ª–æ–≥–µ
            active_conversations[client_id] = {
                'assigned_owner': owner_id,
                'user_info': client_info,
                'type': 'order', # –∏–ª–∏ "subscription_order", "digital_order" –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Ç–æ—á–Ω–µ–µ
                'order_details': context.user_data.get('pending_order', {}) # –ü–µ—Ä–µ–¥–∞–µ–º –¥–µ—Ç–∞–ª–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –µ—Å—Ç—å
            }
            owner_client_map[owner_id] = client_id

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            try:
                await context.bot.send_message(
                    chat_id=client_id,
                    text="‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ! –ü—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫ –º–∞–≥–∞–∑–∏–Ω—É –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.\n\n"
                         "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /stop."
                )
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ)
                await query.message.edit_text(
                    f"‚úÖ –í–∏ –≤–∑—è–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ {client_info.get('first_name', '–ù–µ–≤—ñ–¥–æ–º–∏–π')} (ID: {client_id}).\n\n"
                    "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ü—å–æ–º—É –∫–ª—ñ—î–Ω—Ç—É. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /stop."
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–∏–∞–ª–æ–≥–∞: {e}")
                await query.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—á–∞—Ç–∫—É –¥—ñ–∞–ª–æ–≥—É.")
        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ take_order_: {e}")
            await query.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É.")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ take_order_: {e}")
            await query.message.edit_text("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –ø–æ–º–∏–ª–∫–∞.")

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    user = update.effective_user
    user_id = user.id
    message_text = update.message.text
    ensure_user_exists(user)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
    is_owner = user_id in OWNER_IDS

    # --- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –≤–ª–∞–¥–µ–ª–µ—Ü ---
    if is_owner:
        # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç—É –≤ —Ä–∞–º–∫–∞—Ö –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
        if user_id in owner_client_map:
            client_id = owner_client_map[user_id]
            try:
                await context.bot.send_message(
                    chat_id=client_id,
                    text=f"üì© –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –º–∞–≥–∞–∑–∏–Ω—É:\n{message_text}",
                )
                # –ú–æ–∂–Ω–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤–ª–∞–¥–µ–ª—å—Ü—É, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                # await update.message.reply_text("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç—É.")
            except Exception as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ {user_id} –∫–ª–∏–µ–Ω—Ç—É {client_id}: {e}"
                )
                await update.message.reply_text(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É. –ú–æ–∂–ª–∏–≤–æ, –∫–ª—ñ—î–Ω—Ç –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞."
                )
        else:
            await update.message.reply_text(
                "‚ÑπÔ∏è –í–∏ –Ω–µ –≤–µ–¥–µ—Ç–µ –¥—ñ–∞–ª–æ–≥ –∑ –∂–æ–¥–Ω–∏–º –∫–ª—ñ—î–Ω—Ç–æ–º. –û—á—ñ–∫—É–π—Ç–µ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ—é /dialog."
            )
        return # –í–∞–∂–Ω–æ: –≤—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª –≤–ª–∞–¥–µ–ª–µ—Ü

    # --- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –≤–ª–∞–¥–µ–ª–µ—Ü ---

    # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /pay
    if message_text.startswith('/pay'):
        await pay_command(update, context)
        return # –í–∞–∂–Ω–æ: –≤—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –∫–æ–º–∞–Ω–¥–∞ /pay

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–≤–æ–ø—Ä–æ—Å—ã, –∑–∞–∫–∞–∑—ã)
    conversation_type = context.user_data.get('conversation_type')

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ ---
    if conversation_type == 'question':
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤–æ–ø—Ä–æ—Å –≤–ª–∞–¥–µ–ª—å—Ü–∞–º
        forward_message = (
            f"‚ùì –ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞:\n"
            f"üë§ –ö–ª—ñ—î–Ω—Ç: {user.first_name}\n"
            f"üì± Username: @{user.username if user.username else '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
            f"üÜî ID: {user.id}\n"
            f"üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n{message_text}"
        )
        keyboard = [[InlineKeyboardButton("‚úÖ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f'take_question_{user_id}')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        success = False
        for owner_id in OWNER_IDS:
            try:
                await context.bot.send_message(
                    chat_id=owner_id, 
                    text=forward_message, 
                    reply_markup=reply_markup
                )
                success = True
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤–ª–∞–¥–µ–ª—å—Ü—É {owner_id}: {e}")
        
        if success:
            await update.message.reply_text("‚úÖ –í–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")
        else:
            await update.message.reply_text("‚ùå –ù–∞ –∂–∞–ª—å, –Ω–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return # –í–∞–∂–Ω–æ: –≤—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª –≤–æ–ø—Ä–æ—Å

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –∫–ª–∏–µ–Ω—Ç–∞ —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º ---
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ
    if user_id in active_conversations:
        assigned_owner_id = active_conversations[user_id].get('assigned_owner')
        if assigned_owner_id:
            # –≠—Ç–æ –∫–ª–∏–µ–Ω—Ç –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
            try:
                await context.bot.send_message(
                    chat_id=assigned_owner_id,
                    text=f"üì© –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞:\n{message_text}",
                )
                # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
                # await update.message.reply_text("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫—É –º–∞–≥–∞–∑–∏–Ω—É.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {user_id} –≤–ª–∞–¥–µ–ª—å—Ü—É {assigned_owner_id}: {e}")
                await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            return # –í–∞–∂–Ω–æ: –≤—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª –∫–ª–∏–µ–Ω—Ç –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ

    # --- –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –º–µ–Ω—é ---
    await start(update, context)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /PAY ---
async def pay_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /pay."""
    logger.info(f"üí∞ –í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /pay –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user = update.effective_user
    ensure_user_exists(user)

    if not context.args:
        await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /pay <order_id> <—Ç–æ–≤–∞—Ä1> <—Ç–æ–≤–∞—Ä2> ...")
        return

    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    order_id = context.args[0]
    items_str = " ".join(context.args[1:])
    
    # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞: ServiceAbbr-PlanAbbr-Period-Price
    # –ü—Ä–∏–º–µ—Ä: Cha-Bas-1–º-100 –∏–ª–∏ DisU-Dec-1—à—Ç-220
    pattern = r'(\w{2,4})-(\w{2,4})-([\w\s$]+?)-(\d+)'
    items = re.findall(pattern, items_str)

    if not items:
        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏ —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    order_text = f"üõçÔ∏è –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –≤—ñ–¥ @{user.username or user.first_name} (ID: {user.id})\n\n"
    total_uah = 0
    order_details = []
    for service_abbr, plan_abbr, period, price_str in items:
        price = int(price_str)
        total_uah += price
        order_details.append(f"‚ñ´Ô∏è {service_abbr}-{plan_abbr}-{period} - {price} UAH")
    
    order_text += "\n".join(order_details)
    order_text += f"\n\nüí≥ –í—Å—å–æ–≥–æ: {total_uah} UAH"

    success = False
    for owner_id in OWNER_IDS:
        try:
            await context.bot.send_message(chat_id=owner_id, text=order_text)
            success = True
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤–ª–∞–¥–µ–ª—å—Ü—É {owner_id}: {e}")

    if success:
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –≤ NOWPayments
        invoice_data = create_nowpayments_invoice(total_uah, order_id, "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ /pay")
        
        if invoice_data and 'invoice_url' in invoice_data:
            pay_url = invoice_data['invoice_url']
            payment_message = (
                f"‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}!\n"
                f"üí≥ –°—É–º–∞ –¥–æ —Å–ø–ª–∞—Ç–∏: {total_uah} UAH\n\n"
                f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –æ–ø–ª–∞—Ç–∏:\n"
                f"üîó [–û–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞—Ä–∞–∑]({pay_url})"
            )
            keyboard = [[InlineKeyboardButton("üîó –û–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞—Ä–∞–∑", url=pay_url)]]
            await update.message.reply_text(payment_message, parse_mode='Markdown', reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            error_msg = invoice_data.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞') if invoice_data else '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
            await update.message.reply_text(
                f"‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}!\n"
                f"üí≥ –°—É–º–∞ –¥–æ —Å–ø–ª–∞—Ç–∏: {total_uah} UAH\n"
                f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –æ–ø–ª–∞—Ç–∏: {error_msg}\n\n"
                f"–ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."
            )
    else:
        await update.message.reply_text("‚ùå –ù–∞ –∂–∞–ª—å, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

# --- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê ---
def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if not BOT_TOKEN or BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        logger.critical("üîë BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!")
        return
    if not DATABASE_URL or DATABASE_URL == "YOUR_DATABASE_URL_HERE":
        logger.warning("üíæ DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.")

    # --- –ó–ê–ü–£–°–ö HTTP –°–ï–†–í–ï–†–ê ---
    port = int(os.environ.get('PORT', 10000)) # Render –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç PORT
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    http_thread = Thread(target=start_http_server, args=(port,), daemon=True)
    http_thread.start()
    logger.info(f"üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ –ø–æ—Ç–æ–∫–µ –Ω–∞ –ø–æ—Ä—Ç—É {port}")

    # --- –°–û–ó–î–ê–ù–ò–ï Application ---
    application = Application.builder().token(BOT_TOKEN).build()

    # --- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í ---
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("order", order_command))
    application.add_handler(CommandHandler("question", question_command))
    application.add_handler(CommandHandler("channel", channel_command))
    application.add_handler(CommandHandler("stop", stop_conversation))
    application.add_handler(CommandHandler("dialog", dialog_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("pay", pay_command))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(button_handler))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–ò–ì–ù–ê–õ–û–í –ó–ê–í–ï–†–®–ï–ù–ò–Ø ---
    def signal_handler(signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Ctrl+C, SIGTERM)."""
        logger.info("üõë –ü—Ä–∏–Ω—è—Ç–æ —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        stop_ping_service() # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∏–Ω–≥–æ–≤–∞–ª–∫—É
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π, –ë–î –∏ —Ç.–¥.
        sys.exit(0)

    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGINT, signal_handler) # Ctrl+C

    # --- –ó–ê–ü–£–°–ö –ü–ò–ù–ì–û–í–ê–õ–ö–ò ---
    start_ping_service()

    # --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
