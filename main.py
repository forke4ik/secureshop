import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', '8181378677:AAFullvwrNhPJMi_HxgC75qSEKWdKOtCpbw')  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
OWNER_ID_1 = 7106925462  # ID –ø–µ—Ä–≤–æ–≥–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è @HiGki2pYYY
OWNER_ID_2 = 6279578957  # ID –≤—Ç–æ—Ä–æ–≥–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è @oc33t
PORT = int(os.getenv('PORT', 8443))  # –ü–æ—Ä—Ç –¥–ª—è webhook

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
active_conversations = {}  # {client_id: {'type': 'order/question', 'user_info': user, 'assigned_owner': owner_id}}
owner_client_map = {}  # {owner_id: client_id} - —Ç–µ–∫—É—â–∏–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è

class TelegramBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º
        if user.id in [OWNER_ID_1, OWNER_ID_2]:
            owner_name = "@HiGki2pYYY" if user.id == OWNER_ID_1 else "@oc33t"
            await update.message.reply_text(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}! ({owner_name})\n"
                f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å –º–∞–≥–∞–∑–∏–Ω–∞."
            )
            return
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        keyboard = [
            [InlineKeyboardButton("üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data='order')],
            [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_message = f"""
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}! üëã

–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:
        """
        
        await update.message.reply_text(
            welcome_message.strip(),
            reply_markup=reply_markup
        )
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        if query.data in ['order', 'question']:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
            active_conversations[user_id] = {
                'type': 'order' if query.data == 'order' else 'question',
                'user_info': query.from_user,
                'assigned_owner': None
            }
            
            action_text = "–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑" if query.data == 'order' else "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
            
            await query.edit_message_text(
                f"–û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã {action_text}. "
                f"–Ø –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é –º–∞–≥–∞–∑–∏–Ω–∞."
            )
        
        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ —á–∞—Ç–∞ –¥—Ä—É–≥–æ–º—É –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é
        elif query.data.startswith('transfer_'):
            client_id = int(query.data.split('_')[1])
            current_owner = user_id
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥—Ä—É–≥–æ–≥–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è
            other_owner = OWNER_ID_2 if current_owner == OWNER_ID_1 else OWNER_ID_1
            other_owner_name = "@oc33t" if other_owner == OWNER_ID_2 else "@HiGki2pYYY"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
            if client_id in active_conversations:
                active_conversations[client_id]['assigned_owner'] = other_owner
                owner_client_map[other_owner] = client_id
                if current_owner in owner_client_map:
                    del owner_client_map[current_owner]
                
                client_info = active_conversations[client_id]['user_info']
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è
                await query.edit_message_text(
                    f"‚úÖ –ß–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º {client_info.first_name} –ø–µ—Ä–µ–¥–∞–Ω {other_owner_name}"
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–æ–≥–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è
                await context.bot.send_message(
                    chat_id=other_owner,
                    text=f"üì® –í–∞–º –ø–µ—Ä–µ–¥–∞–Ω —á–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º:\n\n"
                         f"üë§ {client_info.first_name} (@{client_info.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'})\n"
                         f"üÜî ID: {client_info.id}\n\n"
                         f"–î–ª—è –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
                )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        message_text = update.message.text
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è - —ç—Ç–æ –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
        if user_id in [OWNER_ID_1, OWNER_ID_2]:
            await self.handle_owner_message(update, context)
            return
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
        if user_id in active_conversations:
            await self.forward_to_owner(update, context)
        else:
            # –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å
            keyboard = [
                [InlineKeyboardButton("üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data='order')],
                [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
    
    async def forward_to_owner(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é"""
        user_id = update.effective_user.id
        user_info = active_conversations[user_id]['user_info']
        conversation_type = active_conversations[user_id]['type']
        
        # –í—ã–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–µ—Ä–≤–æ–º—É, –µ—Å–ª–∏ –Ω–µ –∑–∞–Ω—è—Ç)
        assigned_owner = active_conversations[user_id]['assigned_owner']
        if not assigned_owner:
            # –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
            assigned_owner = OWNER_ID_1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤—ã–π
            active_conversations[user_id]['assigned_owner'] = assigned_owner
        
        owner_client_map[assigned_owner] = user_id
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è
        type_emoji = "üõí" if conversation_type == 'order' else "‚ùì"
        type_text = "–ó–ê–ö–ê–ó" if conversation_type == 'order' else "–í–û–ü–†–û–°"
        owner_name = "@HiGki2pYYY" if assigned_owner == OWNER_ID_1 else "@oc33t"
        
        forward_message = f"""
{type_emoji} {type_text} –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info.first_name}
üì± Username: @{user_info.username if user_info.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üÜî ID: {user_info.id}

üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:
{update.message.text}

---
–î–ª—è –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç.
–ù–∞–∑–Ω–∞—á–µ–Ω: {owner_name}
        """
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥—Ä—É–≥–æ–º—É –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–¥–∞—Ç—å –¥—Ä—É–≥–æ–º—É –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é", callback_data=f'transfer_{user_id}')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é
        await context.bot.send_message(
            chat_id=assigned_owner,
            text=forward_message.strip(),
            reply_markup=reply_markup
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
        await update.message.reply_text(
            "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é –º–∞–≥–∞–∑–∏–Ω–∞. "
            "–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
    
    async def handle_owner_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è"""
        owner_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
        if owner_id not in owner_client_map:
            owner_name = "@HiGki2pYYY" if owner_id == OWNER_ID_1 else "@oc33t"
            await update.message.reply_text(
                f"–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞. ({owner_name})\n"
                f"–î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞."
            )
            return
        
        client_id = owner_client_map[owner_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –µ—â–µ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–∞—Ö
        if client_id not in active_conversations:
            del owner_client_map[owner_id]
            await update.message.reply_text(
                "–î–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω."
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
        try:
            await context.bot.send_message(
                chat_id=client_id,
                text=f"üì© –û—Ç–≤–µ—Ç –æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞:\n\n{update.message.text}"
            )
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é
            client_info = active_conversations[client_id]['user_info']
            await update.message.reply_text(
                f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {client_info.first_name}"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {client_id}: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É. "
                "–í–æ–∑–º–æ–∂–Ω–æ, –∫–ª–∏–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞."
            )
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.warning(f'Update {update} caused error {context.error}')
    
    def run_webhook(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å webhook –¥–ª—è Render.com"""
        self.application.add_error_handler(self.error_handler)
        
        # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è webhook
        webhook_url = os.getenv('WEBHOOK_URL', 'https://secureshop-3obw.onrender.com')
        
        logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º webhook –Ω–∞ {webhook_url}")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
        self.application.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=BOT_TOKEN,
            webhook_url=f"{webhook_url}/{BOT_TOKEN}"
        )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    logger.info(f"BOT_TOKEN: {BOT_TOKEN[:10]}...")
    logger.info(f"PORT: {PORT}")
    logger.info(f"–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å 1: {OWNER_ID_1}")
    logger.info(f"–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å 2: {OWNER_ID_2}")
    
    bot = TelegramBot()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.run_webhook()

if __name__ == '__main__':
    main()
