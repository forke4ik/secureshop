import logging
import os
import asyncio
import threading
import time
import json
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.error import Conflict, RetryAfter
from flask import Flask, request, jsonify

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', '8181378677:AAFullvwrNhPJMi_HxgC75qSEKWdKOtCpbw')
OWNER_ID_1 = 7106925462  # @HiGki2pYYY
OWNER_ID_2 = 6279578957  # @oc33t
PORT = int(os.getenv('PORT', 8443))
WEBHOOK_URL = os.getenv('WEBHOOK_URL', 'https://secureshop-3obw.onrender.com')
PING_INTERVAL = int(os.getenv('PING_INTERVAL', 840))  # 14 –º–∏–Ω—É—Ç
USE_POLLING = os.getenv('USE_POLLING', 'true').lower() == 'true'

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏
STATS_FILE = "bot_stats.json"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def load_stats():
    if os.path.exists(STATS_FILE):
        try:
            with open(STATS_FILE, 'r') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return default_stats()
    return default_stats()

def default_stats():
    return {
        'total_users': 0,
        'active_users': [],
        'total_orders': 0,
        'total_questions': 0,
        'first_start': datetime.now().isoformat(),
        'last_save': datetime.now().isoformat()
    }

def save_stats():
    try:
        bot_statistics['last_save'] = datetime.now().isoformat()
        with open(STATS_FILE, 'w') as f:
            json.dump(bot_statistics, f, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
bot_statistics = load_stats()

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
active_conversations = {}
owner_client_map = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
telegram_app = None
flask_app = Flask(__name__)
bot_running = False
bot_lock = threading.Lock()  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º –∫ –±–æ—Ç—É

class TelegramBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
        self.ping_running = False
        self.initialized = False
        self.polling_task = None
        self.loop = None
    
    async def set_commands_menu(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥"""
        commands = [
            ("start", "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"),
            ("help", "–î–æ–ø–æ–º–æ–≥–∞ —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"),
            ("order", "–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"),
            ("question", "–ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è"),
            ("channel", "–ù–∞—à –≥–æ–ª–æ–≤–Ω–∏–π –∫–∞–Ω–∞–ª")
        ]
        await self.application.bot.set_my_commands(commands)
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("stop", self.stop_conversation))
        self.application.add_handler(CommandHandler("stats", self.show_stats))
        self.application.add_handler(CommandHandler("help", self.show_help))
        self.application.add_handler(CommandHandler("channel", self.channel_command))
        self.application.add_handler(CommandHandler("order", self.order_command))
        # –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /question
        self.application.add_handler(CommandHandler("question", self.question_command))
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_error_handler(self.error_handler)
    
    async def initialize(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
            try:
                await self.application.bot.delete_webhook()
                logger.info("üóëÔ∏è –í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫: {e}")
                
            await self.application.initialize()
            await self.set_commands_menu()
            self.initialized = True
            logger.info("‚úÖ Telegram Application –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Application: {e}")
            raise
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ polling —Ä–µ–∂–∏–º–∞"""
        try:
            if self.application.updater and self.application.updater.running:
                logger.warning("üõë –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫")
                return
            
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ polling —Ä–µ–∂–∏–º–∞...")
            
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω
            try:
                await self.application.bot.delete_webhook()
                logger.info("üóëÔ∏è –í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞: {e}")
            
            await self.application.start()
            await self.application.updater.start_polling(
                poll_interval=1.0,
                timeout=10,
                bootstrap_retries=-1,
                read_timeout=10,
                write_timeout=10,
                connect_timeout=10,
                pool_timeout=10
            )
            logger.info("‚úÖ Polling –∑–∞–ø—É—â–µ–Ω")
        except Conflict as e:
            logger.error(f"üö® –ö–æ–Ω—Ñ–ª–∏–∫—Ç: {e}")
            logger.warning("üïí –û–∂–∏–¥–∞–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
            await asyncio.sleep(30)
            await self.start_polling()
        except RetryAfter as e:
            logger.warning(f"üö¶ Rate limit: {e}")
            wait_time = e.retry_after + 5
            logger.warning(f"üïí –û–∂–∏–¥–∞–µ–º {wait_time} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(wait_time)
            await self.start_polling()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ polling: {e}")
            raise
    
    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫—Ä–æ–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ)

    async def order_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /order"""
        keyboard = [
            [InlineKeyboardButton("üì∫ YouTube", callback_data='category_youtube')],
            [InlineKeyboardButton("üí¨ ChatGPT", callback_data='category_chatgpt')],
            [InlineKeyboardButton("üéµ Spotify", callback_data='category_spotify')],
            [InlineKeyboardButton("üéÆ Discord", callback_data='category_discord')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        await update.message.reply_text(
            "üì¶ –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def question_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /question"""
        user_id = update.effective_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å
        active_conversations[user_id] = {
            'type': 'question',
            'user_info': update.effective_user,
            'assigned_owner': None,
            'last_message': "–ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è"
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        bot_statistics['total_questions'] += 1
        save_stats()
        
        await update.message.reply_text(
            "üìù –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. –Ø –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫—É –º–∞–≥–∞–∑–∏–Ω—É."
        )
    
    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ —Ñ—É–Ω–∫—Ü–∏–∏ main)

def main():
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è Render.com
    if os.environ.get('RENDER'):
        logger.info("‚è≥ –û–∂–∏–¥–∞–µ–º 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤...")
        time.sleep(15)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 15 —Å–µ–∫—É–Ω–¥
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    auto_save_thread = threading.Thread(target=auto_save_loop)
    auto_save_thread.daemon = True
    auto_save_thread.start()
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ SecureShop Telegram Bot...")
    logger.info(f"üîë BOT_TOKEN: {BOT_TOKEN[:10]}...")
    logger.info(f"üåê PORT: {PORT}")
    logger.info(f"üì° WEBHOOK_URL: {WEBHOOK_URL}")
    logger.info(f"‚è∞ PING_INTERVAL: {PING_INTERVAL} —Å–µ–∫—É–Ω–¥")
    logger.info(f"üîÑ –†–ï–ñ–ò–ú: {'Polling' if USE_POLLING else 'Webhook'}")
    logger.info(f"üë§ –û—Å–Ω–æ–≤–∞—Ç–µ–ª—å 1: {OWNER_ID_1} (@HiGki2pYYY)")
    logger.info(f"üë§ –û—Å–Ω–æ–≤–∞—Ç–µ–ª—å 2: {OWNER_ID_2} (@oc33t)")
    
    bot_thread_instance = threading.Thread(target=bot_thread)
    bot_thread_instance.daemon = True
    bot_thread_instance.start()
    
    time.sleep(3)
    
    bot_instance.start_ping_service()
    
    logger.info("üåê –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞...")
    flask_app.run(
        host='0.0.0.0',
        port=PORT,
        debug=False,
        use_reloader=False,
        threaded=True
    )

if __name__ == '__main__':
    main()
