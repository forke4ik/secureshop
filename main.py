import logging
import os
import asyncio
import threading
import time
import json
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.error import Conflict, RetryAfter
from flask import Flask, request, jsonify

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', 'YOUR_DEFAULT_BOT_TOKEN')  # –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
OWNER_ID_1 = 7106925462  # @HiGki2pYYY
OWNER_ID_2 = 6279578957  # @oc33t
PORT = int(os.getenv('PORT', 10000))  # Render.com –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Ä—Ç 10000
WEBHOOK_URL = os.getenv('WEBHOOK_URL', 'https://your-render-app.onrender.com')
PING_INTERVAL = int(os.getenv('PING_INTERVAL', 840))  # 14 –º–∏–Ω—É—Ç
USE_POLLING = os.getenv('USE_POLLING', 'true').lower() == 'true'

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏
STATS_FILE = "bot_stats.json"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def load_stats():
    if os.path.exists(STATS_FILE):
        try:
            with open(STATS_FILE, 'r') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return default_stats()
    return default_stats()

def default_stats():
    return {
        'total_users': 0,
        'active_users': [],
        'total_orders': 0,
        'total_questions': 0,
        'first_start': datetime.now().isoformat(),
        'last_save': datetime.now().isoformat()
    }

def save_stats():
    try:
        bot_statistics['last_save'] = datetime.now().isoformat()
        with open(STATS_FILE, 'w') as f:
            json.dump(bot_statistics, f, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
bot_statistics = load_stats()

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
active_conversations = {}
owner_client_map = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
bot_instance = None
flask_app = Flask(__name__)
bot_running = False
bot_lock = threading.Lock()

# –î–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
def auto_save_loop():
    while True:
        time.sleep(60)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        save_stats()
        logger.info("–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ –ø–æ—Ç–æ–∫–µ
def bot_thread():
    global bot_running, bot_instance
    with bot_lock:
        if bot_running:
            return
        bot_running = True
    
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    try:
        loop.run_until_complete(bot_instance.initialize())
        if USE_POLLING:
            loop.run_until_complete(bot_instance.start_polling())
        else:
            # –†–µ–∂–∏–º –≤–µ–±—Ö—É–∫–∞
            pass
        loop.run_forever()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        loop.close()
        bot_running = False

class TelegramBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
        self.ping_running = False
        self.initialized = False
        self.polling_task = None
        self.loop = None
    
    async def set_commands_menu(self):
        commands = [
            ("start", "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"),
            ("help", "–î–æ–ø–æ–º–æ–≥–∞ —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"),
            ("order", "–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"),
            ("question", "–ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è"),
            ("channel", "–ù–∞—à –≥–æ–ª–æ–≤–Ω–∏–π –∫–∞–Ω–∞–ª")
        ]
        await self.application.bot.set_my_commands(commands)
    
    def setup_handlers(self):
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("stop", self.stop_conversation))
        self.application.add_handler(CommandHandler("stats", self.show_stats))
        self.application.add_handler(CommandHandler("help", self.show_help))
        self.application.add_handler(CommandHandler("channel", self.channel_command))
        self.application.add_handler(CommandHandler("order", self.order_command))
        self.application.add_handler(CommandHandler("question", self.question_command))
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_error_handler(self.error_handler)
    
    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç SecureShop.")
    
    async def stop_conversation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–î–∏–∞–ª–æ–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    
    async def show_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –∑–¥–µ—Å—å.")
    
    async def show_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–ü–æ–º–æ—â—å: /start, /order, /question")
    
    async def channel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–ù–∞—à –∫–∞–Ω–∞–ª: https://t.me/your_channel")
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.callback_query.answer()
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ.")
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤
    async def order_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [
            [InlineKeyboardButton("üì∫ YouTube", callback_data='category_youtube')],
            [InlineKeyboardButton("üí¨ ChatGPT", callback_data='category_chatgpt')],
            [InlineKeyboardButton("üéµ Spotify", callback_data='category_spotify')],
            [InlineKeyboardButton("üéÆ Discord", callback_data='category_discord')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        await update.message.reply_text(
            "üì¶ –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def question_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        active_conversations[user_id] = {
            'type': 'question',
            'user_info': update.effective_user,
            'assigned_owner': None,
            'last_message': "–ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è"
        }
        bot_statistics['total_questions'] += 1
        save_stats()
        await update.message.reply_text("üìù –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è.")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫
    async def initialize(self):
        try:
            await self.application.bot.delete_webhook()
            logger.info("üóëÔ∏è –í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω")
            await self.application.initialize()
            await self.set_commands_menu()
            self.initialized = True
            logger.info("‚úÖ Telegram Application –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise
    
    async def start_polling(self):
        try:
            await self.application.start()
            await self.application.updater.start_polling()
            logger.info("‚úÖ Polling –∑–∞–ø—É—â–µ–Ω")
        except Conflict as e:
            logger.error(f"üö® –ö–æ–Ω—Ñ–ª–∏–∫—Ç: {e}")
            await asyncio.sleep(30)
            await self.start_polling()
        except RetryAfter as e:
            wait_time = e.retry_after + 5
            logger.warning(f"üïí –û–∂–∏–¥–∞–µ–º {wait_time} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(wait_time)
            await self.start_polling()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ polling: {e}")
            raise
    
    # –ü–∏–Ω–≥-—Å–µ—Ä–≤–∏—Å –¥–ª—è Render.com
    def start_ping_service(self):
        if not self.ping_running:
            self.ping_running = True
            threading.Thread(target=self.ping_loop, daemon=True).start()
            logger.info("üîÑ –°–ª—É–∂–±–∞ –ø–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    
    def ping_loop(self):
        while self.ping_running:
            time.sleep(PING_INTERVAL)
            logger.info("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏–Ω–≥–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...")
            if not USE_POLLING and WEBHOOK_URL:
                try:
                    import requests
                    response = requests.get(WEBHOOK_URL)
                    logger.info(f"–ü–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∏–Ω–≥–µ: {e}")

def main():
    global bot_instance
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è Render.com
    if os.environ.get('RENDER'):
        logger.info("‚è≥ –û–∂–∏–¥–∞–µ–º 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤...")
        time.sleep(15)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    auto_save_thread = threading.Thread(target=auto_save_loop)
    auto_save_thread.daemon = True
    auto_save_thread.start()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot_instance = TelegramBot()
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ SecureShop Telegram Bot...")
    logger.info(f"üîë BOT_TOKEN: {BOT_TOKEN[:10]}...")
    logger.info(f"üåê PORT: {PORT}")
    logger.info(f"üì° WEBHOOK_URL: {WEBHOOK_URL}")
    logger.info(f"‚è∞ PING_INTERVAL: {PING_INTERVAL} —Å–µ–∫—É–Ω–¥")
    logger.info(f"üîÑ –†–ï–ñ–ò–ú: {'Polling' if USE_POLLING else 'Webhook'}")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread_instance = threading.Thread(target=bot_thread)
    bot_thread_instance.daemon = True
    bot_thread_instance.start()
    
    time.sleep(3)
    
    # –ó–∞–ø—É—Å–∫ –ø–∏–Ω–≥-—Å–µ—Ä–≤–∏—Å–∞
    bot_instance.start_ping_service()
    
    # –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞
    logger.info("üåê –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞...")
    flask_app.run(
        host='0.0.0.0',
        port=PORT,
        debug=False,
        use_reloader=False,
        threaded=True
    )

if __name__ == '__main__':
    main()
