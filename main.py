# main.py (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π /payout, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏)
import logging
import os
import asyncio
import threading
import time
import json
import re
import requests
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, User, BotCommandScopeChat, BotCommandScopeDefault, InputFile
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.error import Conflict, BadRequest
from flask import Flask, request, jsonify
from flask_cors import CORS
import psycopg
from psycopg.rows import dict_row

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# URL –≤–µ–±—Ö—É–∫–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è webhook)
WEBHOOK_URL = os.getenv("WEBHOOK_URL") # –ù–∞–ø—Ä–∏–º–µ—Ä: https://yourdomain.com/webhook
WEBHOOK_PORT = int(os.getenv("PORT", "8443")) # –ü–æ—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–ª—É—à–∞–µ—Ç Flask

# URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL
DATABASE_URL = os.getenv("DATABASE_URL")
if not DATABASE_URL:
    raise ValueError("DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# ID –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
OWNER_ID_1 = int(os.getenv("OWNER_ID_1"))
OWNER_ID_2 = int(os.getenv("OWNER_ID_2"))

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å polling –∏–ª–∏ webhook
USE_POLLING = os.getenv("USE_POLLING", "True").lower() == "true"

# NOWPayments API
NOWPAYMENTS_API_KEY = os.getenv("NOWPAYMENTS_API_KEY")
if not NOWPAYMENTS_API_KEY:
    raise ValueError("NOWPAYMENTS_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç
EXCHANGE_RATE_UAH_TO_USD = float(os.getenv('EXCHANGE_RATE_UAH_TO_USD', 41.26)) # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è NOWPayments (–∏–∑ –æ–ø–ª–∞—Ç–∞.txt)
AVAILABLE_CURRENCIES = {
    "USDT (Solana)": "usdtsol",
    "USDT (TRC20)": "usdttrc20",
    "ETH": "eth",
    "USDT (Arbitrum)": "usdtarb",
    "USDT (Polygon)": "usdtmatic",
    "USDT (TON)": "usdtton",
    "AVAX (C-Chain)": "avax",
    "APTOS (APT)": "apt"
}

# –†–µ–∫–≤–∏–∑–∏—Ç—ã –∫–∞—Ä—Ç—ã (–∏–∑ –æ–ø–ª–∞—Ç–∞.txt)
CARD_DETAILS = "1234 5678 9012 3456" # –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
flask_app = Flask(__name__)
CORS(flask_app) # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
bot_statistics = {'total_users': 0, 'total_orders': 0, 'total_questions': 0, 'last_reset': datetime.now().isoformat()}
active_conversations = {}
owner_client_map = {}
telegram_app = None
bot_running = False

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î ---
def get_db_connection():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î."""
    return psycopg.connect(DATABASE_URL, row_factory=dict_row)

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cur:
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                cur.execute("""
                    CREATE TABLE IF NOT EXISTS users (
                        id BIGINT PRIMARY KEY,
                        first_name TEXT,
                        last_name TEXT,
                        username TEXT,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
                cur.execute("""
                    CREATE TABLE IF NOT EXISTS active_conversations (
                        user_id BIGINT PRIMARY KEY REFERENCES users(id),
                        type TEXT NOT NULL, -- 'question', 'subscription_order', 'digital_order'
                        assigned_owner BIGINT REFERENCES users(id),
                        last_message TEXT,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                cur.execute("""
                    CREATE TABLE IF NOT EXISTS message_history (
                        id SERIAL PRIMARY KEY,
                        user_id BIGINT REFERENCES users(id),
                        message TEXT NOT NULL,
                        is_from_user BOOLEAN NOT NULL,
                        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞)
                cur.execute("""
                    CREATE TABLE IF NOT EXISTS bot_stats (
                        id INTEGER PRIMARY KEY DEFAULT 1,
                        data JSONB NOT NULL
                    )
                """)
                # –í—Å—Ç–∞–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                cur.execute("INSERT INTO bot_stats (id, data) VALUES (1, %s) ON CONFLICT (id) DO NOTHING", (json.dumps(bot_statistics),))
            conn.commit()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

def ensure_user_exists(user: User):
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î."""
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    INSERT INTO users (id, first_name, last_name, username)
                    VALUES (%s, %s, %s, %s)
                    ON CONFLICT (id) DO UPDATE SET
                        first_name = EXCLUDED.first_name,
                        last_name = EXCLUDED.last_name,
                        username = EXCLUDED.username,
                        last_active = CURRENT_TIMESTAMP
                """, (user.id, user.first_name, user.last_name, user.username))
            conn.commit()
        logger.debug(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω –≤ –ë–î")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ ensure_user_exists –¥–ª—è {user.id}: {e}")

def save_active_conversation(user_id, conversation_type, assigned_owner, last_message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –≤ –ë–î."""
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    INSERT INTO active_conversations (user_id, type, assigned_owner, last_message, updated_at)
                    VALUES (%s, %s, %s, %s, CURRENT_TIMESTAMP)
                    ON CONFLICT (user_id) DO UPDATE SET
                        type = EXCLUDED.type,
                        assigned_owner = EXCLUDED.assigned_owner,
                        last_message = EXCLUDED.last_message,
                        updated_at = CURRENT_TIMESTAMP
                """, (user_id, conversation_type, assigned_owner, last_message))
            conn.commit()
        logger.debug(f"üíæ –ê–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ save_active_conversation –¥–ª—è {user_id}: {e}")

def save_message(user_id, message_text, is_from_user):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é."""
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    INSERT INTO message_history (user_id, message, is_from_user, timestamp)
                    VALUES (%s, %s, %s, CURRENT_TIMESTAMP)
                """, (user_id, message_text, is_from_user))
            conn.commit()
        logger.debug(f"üíæ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ save_message –¥–ª—è {user_id}: {e}")

def load_stats():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î."""
    global bot_statistics
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT data FROM bot_stats WHERE id = 1")
                row = cur.fetchone()
                if row:
                    bot_statistics = row['data']
                    logger.debug("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –ë–î")
                else:
                    logger.warning("‚ö†Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def save_stats():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ë–î."""
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("UPDATE bot_stats SET data = %s WHERE id = 1", (json.dumps(bot_statistics),))
            conn.commit()
        logger.debug("üíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def get_uah_amount_from_order_text(order_text: str) -> float:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—É–º–º—É –≤ UAH –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑–∞."""
    match = re.search(r'üí≥ –í—Å—å–æ–≥–æ: (\d+(?:\.\d+)?) UAH', order_text)
    if match:
        return float(match.group(1))
    return 0.0

def convert_uah_to_usd(uah_amount: float) -> float:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –∏–∑ UAH –≤ USD –ø–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∫—É—Ä—Å—É."""
    if uah_amount <= 0:
        return 0.0
    return round(uah_amount / EXCHANGE_RATE_UAH_TO_USD, 2)

# --- NOWPayments API ---
async def create_nowpayments_invoice(amount: float, currency_in: str = 'usd', currency_out: str = 'btc') -> dict:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–≤–æ–π—Å –≤ NOWPayments."""
    url = "https://api.nowpayments.io/v1/invoice"
    headers = {
        "Authorization": f"Bearer {NOWPAYMENTS_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "price_amount": amount,
        "price_currency": currency_in,
        "order_id": f"order_{int(time.time())}",
        "order_description": "–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä—ñ–≤ –≤ SecureShop",
        "ipn_callback_url": f"{WEBHOOK_URL}/nowpayments-ipn" if WEBHOOK_URL else None,
        "success_url": f"https://t.me/{(await telegram_app.bot.get_me()).username}",
        "cancel_url": f"https://t.me/{(await telegram_app.bot.get_me()).username}",
        "currency_out": currency_out
    }
    try:
        response = requests.post(url, headers=headers, json=payload, timeout=10)
        response.raise_for_status()
        data = response.json()
        logger.info(f"‚úÖ NOWPayments –∏–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω: {data}")
        return data
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ NOWPayments: {e}")
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞ NOWPayments: {e}")
        raise

async def get_nowpayments_invoice_status(invoice_id: str) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞ –∏–∑ NOWPayments."""
    url = f"https://api.nowpayments.io/v1/invoice/{invoice_id}"
    headers = {
        "Authorization": f"Bearer {NOWPAYMENTS_API_KEY}",
        "Content-Type": "application/json"
    }
    try:
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        data = response.json()
        logger.debug(f"üîÑ NOWPayments —Å—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞ {invoice_id}: {data}")
        return data
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ NOWPayments –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ NOWPayments –∏–Ω–≤–æ–π—Å–∞ {invoice_id}: {e}")
        raise

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ ---
class TelegramBot:
    def __init__(self, token: str):
        self.token = token
        self.application = Application.builder().token(self.token).build()
        self.loop = None # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ bot_thread

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.show_help))
        self.application.add_handler(CommandHandler("order", self.order))
        self.application.add_handler(CommandHandler("question", self.question_command))
        self.application.add_handler(CommandHandler("channel", self.channel))
        self.application.add_handler(CommandHandler("stop", self.stop))
        self.application.add_handler(CommandHandler("pay", self.pay_command))
        self.application.add_handler(CommandHandler("payout", self.payout_command))
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
        self.application.add_handler(CommandHandler("stats", self.stats_command))
        self.application.add_handler(CommandHandler("chats", self.show_active_chats)) # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        self.application.add_handler(CommandHandler("history", self.show_conversation_history)) # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        self.application.add_handler(CommandHandler("clear", self.clear_active_chats)) # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        self.application.add_handler(CommandHandler("dialog", self.continue_dialog_command)) # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ

        # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫ ---
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫ –æ–ø–ª–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å pay_ –∏–ª–∏ payout_)
        self.application.add_handler(CallbackQueryHandler(self.payment_callback_handler, pattern=r'^(pay_|payout_)'))
        # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_handler))

        # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º) ---
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_handler(MessageHandler(filters.Document.FileExtension("json"), self.handle_json_file))

        # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ---
        self.application.add_error_handler(self.error_handler)

        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling."""
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()

    async def stop_polling(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling."""
        try:
            await self.application.updater.stop()
            await self.application.stop()
            await self.application.shutdown()
            logger.info("üõë Polling –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ polling: {e}")

    # --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        ensure_user_exists(user)

        # –î–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π
        if user.id in [OWNER_ID_1, OWNER_ID_2]:
            owner_name = "@HiGki2pYYY" if user.id == OWNER_ID_1 else "@oc33t"
            await update.message.reply_text(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}! ({owner_name})")
            return

        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        keyboard = [
            [InlineKeyboardButton("üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data='order')],
            [InlineKeyboardButton("‚ùì –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')],
            [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')],
            [InlineKeyboardButton("üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", callback_data='channel')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        welcome_text = f"""üëã –ü—Ä–∏–≤—ñ—Ç, {user.first_name}!

–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É **SecureShop**!

–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ:
‚ñ´Ô∏è –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–æ–∫ –∞–±–æ —Ü–∏—Ñ—Ä–æ–≤–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
‚ñ´Ô∏è –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
‚ñ´Ô∏è –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω–∞—à—ñ —Ç–æ–≤–∞—Ä–∏

–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é üëá"""
        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        global bot_statistics
        if user.id not in [u for u in [OWNER_ID_1, OWNER_ID_2]]: # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
             bot_statistics['total_users'] += 1
             save_stats()

    async def order(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /order"""
        user = update.effective_user
        user_id = user.id
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        ensure_user_exists(user)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
        if user_id in active_conversations:
            await update.message.reply_text(
                "‚ùó –£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥."
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –ø–∏—Å–∞—Ç–∏ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –¥—ñ–∞–ª–æ–∑—ñ –∞–±–æ –∑–∞–≤–µ—Ä—à—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /stop, "
                "—è–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥."
            )
            return

        keyboard = [
            [InlineKeyboardButton("üí≥ –ü—ñ–¥–ø–∏—Å–∫–∏", callback_data='order_subscriptions')],
            [InlineKeyboardButton("üéÆ –¶–∏—Ñ—Ä–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏", callback_data='order_digital')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("üõçÔ∏è –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", reply_markup=reply_markup)

    async def question_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /question"""
        user = update.effective_user
        user_id = user.id
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        ensure_user_exists(user)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
        if user_id in active_conversations:
            await update.message.reply_text(
                "‚ùó –£ –≤–∞—Å –≤–∂–µ —Ñ –∞–∫—Ç–∏–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥."
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –ø–∏—Å–∞—Ç–∏ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –¥—ñ–∞–ª–æ–∑—ñ –∞–±–æ –∑–∞–≤–µ—Ä—à—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /stop, "
                "—è–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥."
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤–æ–ø—Ä–æ—Å–µ
        active_conversations[user_id] = {
            'type': 'question',
            'user_info': user,
            'assigned_owner': None,
            'last_message': "–ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è"
        }
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        save_active_conversation(user_id, 'question', None, "–ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        global bot_statistics
        bot_statistics['total_questions'] += 1
        save_stats()

        await update.message.reply_text(
            "üìù –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. –Ø –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫—É –º–∞–≥–∞–∑–∏–Ω—É."
            "–©–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ü–µ–π –¥—ñ–∞–ª–æ–≥ –ø—ñ–∑–Ω—ñ—à–µ, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop."
        )

    async def channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /channel"""
        channel_link = "https://t.me/+KzJ3F1D00b0zZjFi" # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å—Å—ã–ª–∫—É
        await update.message.reply_text(f"üì¢ –ù–∞—à –∫–∞–Ω–∞–ª: {channel_link}")

    async def show_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE = None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ"""
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏
        if isinstance(update, Update):
            message = update.message
        else:
            message = update # –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ –∫–Ω–æ–ø–∫–∏

        user_id = message.from_user.id
        is_owner = user_id in [OWNER_ID_1, OWNER_ID_2]

        help_text = """üëã –î–æ–±—Ä–æ–≥–æ –¥–Ω—è! –Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω—É SecureShop.

üõí **–Ø–∫ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:**
1. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" –∞–±–æ –∫–æ–º–∞–Ω–¥—É /order
2. –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç–æ–≤–∞—Ä—É
3. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –¥–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
4. –û–ø–ª–∞—Ç—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
5. –û—Ç—Ä–∏–º–∞–π—Ç–µ –ª–æ–≥—ñ–Ω–∏ —Ç–∞ –ø–∞—Ä–æ–ª—ñ

‚ùì **–Ø–∫ –∑–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è:**
1. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "‚ùì –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è" –∞–±–æ –∫–æ–º–∞–Ω–¥—É /question
2. –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
3. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –Ω–∞—à–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞

üí≥ **–û–ø–ª–∞—Ç–∞:**
- –ö–∞—Ä—Ç–∫–∞ (—Ä—É—á–Ω–∞ –æ–ø–ª–∞—Ç–∞)
- –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (—á–µ—Ä–µ–∑ NOWPayments)

üì¢ **–ù–∞—à –∫–∞–Ω–∞–ª:** /channel - –ù–∞—à –∫–∞–Ω–∞–ª –∑ –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏ —Ç–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞–º–∏

/stop - –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –¥—ñ–∞–ª–æ–≥
/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞"""

        if is_owner:
            help_text += """\n\nüîê **–ö–æ–º–∞–Ω–¥–∏ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è:**
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
/history - –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–ª—ñ—î–Ω—Ç–∞
/chats - –ê–∫—Ç–∏–≤–Ω—ñ —á–∞—Ç–∏
/clear - –û—á–∏—Å—Ç–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ —á–∞—Ç–∏
/dialog - –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥ –∑ –∫–ª—ñ—î–Ω—Ç–æ–º
/payout - –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–ª–∞—Ç—ñ–∂ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""

        help_text += "\n\nüí¨ –Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è, –Ω–µ —Å–æ—Ä–æ–º—Ç–µ—Å—è –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è!"

        if isinstance(update, Update) and update.callback_query:
            await update.callback_query.edit_message_text(help_text.strip(), parse_mode='Markdown')
        else:
            await message.reply_text(help_text.strip(), parse_mode='Markdown')

    async def stop(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop"""
        user_id = update.effective_user.id

        if user_id in active_conversations:
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
            del active_conversations[user_id]
            # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
            try:
                with get_db_connection() as conn:
                    with conn.cursor() as cur:
                        cur.execute("DELETE FROM active_conversations WHERE user_id = %s", (user_id,))
                    conn.commit()
                logger.info(f"üõë –ê–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è {user_id} –∑–∞–≤–µ—Ä—à–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏–∑ –ë–î –¥–ª—è {user_id}: {e}")

            await update.message.reply_text("‚úÖ –í–∞—à –¥—ñ–∞–ª–æ–≥ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è!")
        else:
            await update.message.reply_text("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.")

    # --- –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã ---
    async def pay_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pay –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ —Å —Å–∞–π—Ç–∞ –∏–ª–∏ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞"""
        user = update.effective_user
        user_id = user.id
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        ensure_user_exists(user)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if not context.args:
            # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
            if user_id in active_conversations and 'order_details' in active_conversations[user_id]:
                order_text = active_conversations[user_id]['order_details']
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /pay <order_id> <—Ç–æ–≤–∞—Ä1> <—Ç–æ–≤–∞—Ä2> ... "
                    "–∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ü—é –∫–æ–º–∞–Ω–¥—É –ø—ñ—Å–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –±–æ—Ç—ñ."
                )
                return
        else:
            # –ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç - ID –∑–∞–∫–∞–∑–∞
            order_id = context.args[0]
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
            items_str = " ".join(context.args[1:])
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
            # –§–æ—Ä–º–∞—Ç: <ServiceAbbr>-<PlanAbbr>-<Period>-<Price>
            # –î–ª—è Discord –ü—Ä–∏–∫—Ä–∞—Å–∏: DisU-BzN-6$-180
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: Dis-Ful-1–º-170
            items = []
            item_pattern = r'(\w+)-(\w+)-([\w$]+)-(\d+(?:\.\d+)?)'
            matches = re.findall(item_pattern, items_str)
            if not matches:
                await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏ —É –∫–æ–º–∞–Ω–¥—ñ.")
                return

            for service_abbr, plan_abbr, period, price in matches:
                items.append({
                    'service': service_abbr,
                    'plan': plan_abbr,
                    'period': period,
                    'price': float(price)
                })

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
            order_text = f"üõçÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} (–∑ –∫–æ–º–∞–Ω–¥–∏ /pay):\n"
            total_uah = 0.0
            for item in items:
                order_text += f"‚ñ´Ô∏è {item['service']} {item.get('plan', '')} ({item['period']}) - {item['price']} UAH\n"
                total_uah += item['price']
            order_text += f"üí≥ –í—Å—å–æ–≥–æ: {total_uah} UAH"

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –≤ UAH
        uah_amount = get_uah_amount_from_order_text(order_text)
        if uah_amount <= 0:
            await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Å—É–º—É –¥–ª—è –æ–ø–ª–∞—Ç–∏.")
            return

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ USD
        usd_amount = convert_uah_to_usd(uah_amount)
        if usd_amount <= 0:
            await update.message.reply_text("‚ùå –°—É–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç–∏ –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∞.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ USD –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['payment_amount_usd'] = usd_amount
        context.user_data['order_details_for_payment'] = order_text # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é", callback_data='pay_card')],
            [InlineKeyboardButton("ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data='pay_crypto')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')],
            [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(f"üí≥ –û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏ –¥–ª—è —Å—É–º–∏ {usd_amount}$:", reply_markup=reply_markup)

    # --- –õ–æ–≥–∏–∫–∞ –æ–ø–ª–∞—Ç—ã ---
    async def payment_callback_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –æ–ø–ª–∞—Ç–æ–π"""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id # ID —Ç–æ–≥–æ, –∫—Ç–æ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
    data = query.data
    logger.info(f"üì• Callback received: data='{data}', from user_id={user_id}")

    # - –õ–æ–≥–∏–∫–∞ –¥–ª—è /pay (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) -
    if data.startswith('pay_'):
        logger.info(f"‚û°Ô∏è –ü–µ—Ä–µ–¥–∞—á–∞ callback 'pay_' –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º
        if user_id in [OWNER_ID_1, OWNER_ID_2]:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—É–º–º–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        usd_amount = context.user_data.get('payment_amount_usd')
        order_details = context.user_data.get('order_details_for_payment')
        if not usd_amount or not order_details:
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–ª–∞—Ç—ñ–∂ –≤—Ç—Ä–∞—á–µ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            logger.error(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ pay –ø–æ—Ç–µ—Ä—è–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return

            # - –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ–π -
            if data == 'pay_card':
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –û–ø–ª–∞—á–µ–Ω–æ", callback_data='manual_payment_confirmed')],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_payment_methods')],
                    [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    f"üí≥ –†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏ {usd_amount}$:\n"
                    f"`{CARD_DETAILS}`\n"
                    "(–¢–µ—Å—Ç–æ–≤—ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏)\n\n"
                    "–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '‚úÖ –û–ø–ª–∞—á–µ–Ω–æ'.",
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
                logger.info(f"üí≥ –ü–æ–∫–∞–∑–∞–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –∫–∞—Ä—Ç—ã pay –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

            # - –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é -
            elif data == 'pay_crypto':
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
                keyboard = []
                for currency_name, currency_code in AVAILABLE_CURRENCIES.items():
                    keyboard.append([InlineKeyboardButton(currency_name, callback_data=f'pay_crypto_{currency_code}')])
                keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_payment_methods')])
                keyboard.append([InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')])
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(f"ü™ô –û–±–µ—Ä—ñ—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç–∏ {usd_amount}$:", reply_markup=reply_markup)
                context.user_data.pop('nowpayments_invoice_id', None)
                logger.info(f"ü™ô –ü–æ–∫–∞–∑–∞–Ω –≤—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è pay –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

            # - –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã -
            elif data.startswith('pay_crypto_'):
                currency_code = data.split('_', 2)[2]
                currency_name = next((name for name, code in AVAILABLE_CURRENCIES.items() if code == currency_code), currency_code.upper())

                try:
                    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –≤ NOWPayments
                    invoice_data = await create_nowpayments_invoice(usd_amount, 'usd', currency_code)
                    invoice_id = invoice_data.get('id')
                    invoice_url = invoice_data.get('invoice_url')

                    if not invoice_id or not invoice_url:
                        raise Exception("NOWPayments –Ω–µ –≤–µ—Ä–Ω—É–ª ID –∏–ª–∏ URL –∏–Ω–≤–æ–π—Å–∞")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏–Ω–≤–æ–π—Å–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                    context.user_data['nowpayments_invoice_id'] = invoice_id

                    keyboard = [
                        [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏", url=invoice_url)],
                        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å", callback_data='check_payment_status')],
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_crypto_selection')],
                        [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.edit_message_text(
                        f"ü™ô –û–ø–ª–∞—Ç–∞ {usd_amount}$ –≤ {currency_name}:\n"
                        f"ID —ñ–Ω–≤–æ–π—Å—É: `{invoice_id}`\n\n"
                        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –æ–ø–ª–∞—Ç–∏.",
                        parse_mode='Markdown',
                        reply_markup=reply_markup
                    )
                    logger.info(f"ü™ô NOWPayments –∏–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω –¥–ª—è pay {user_id}: {invoice_id}")

                except Exception as e:
                    error_msg = f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –æ–ø–ª–∞—Ç–∏: {e}"
                    await query.edit_message_text(error_msg)
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞ NOWPayments –¥–ª—è pay: {e}")

            # - –ù–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É –º–µ—Ç–æ–¥—É –æ–ø–ª–∞—Ç–∏ -
            elif data == 'back_to_payment_methods':
                # –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
                keyboard = [
                    [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é", callback_data='pay_card')],
                    [InlineKeyboardButton("ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data='pay_crypto')],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')],
                    [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(f"üí≥ –û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏ –¥–ª—è —Å—É–º–∏ {usd_amount}$:", reply_markup=reply_markup)
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                context.user_data.pop('nowpayments_invoice_id', None)
                logger.info(f"‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è pay –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

            # - –ù–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç -
            elif data == 'back_to_crypto_selection':
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
                keyboard = []
                for currency_name, currency_code in AVAILABLE_CURRENCIES.items():
                    keyboard.append([InlineKeyboardButton(currency_name, callback_data=f'pay_crypto_{currency_code}')])
                keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_payment_methods')])
                keyboard.append([InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')])
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(f"ü™ô –û–±–µ—Ä—ñ—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç–∏ {usd_amount}$:", reply_markup=reply_markup)
                context.user_data.pop('nowpayments_invoice_id', None)
                logger.info(f"‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è pay –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

            # - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç–∏ -
            elif data == 'check_payment_status':
                invoice_id = context.user_data.get('nowpayments_invoice_id')
                if not invoice_id:
                    await query.edit_message_text("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ ID —ñ–Ω–≤–æ–π—Å—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.")
                    return

                try:
                    status_data = await get_nowpayments_invoice_status(invoice_id)
                    payment_status = status_data.get('payment_status', 'unknown')

                    if payment_status == 'finished':
                        # –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞
                        success_msg = f"‚úÖ –û–ø–ª–∞—Ç–∞ —ñ–Ω–≤–æ–π—Å—É `{invoice_id}` —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!"
                        keyboard = [
                            [InlineKeyboardButton("üõí –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏", callback_data='request_account_data')],
                            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        await query.edit_message_text(success_msg, parse_mode='Markdown', reply_markup=reply_markup)

                        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞
                        # await self.request_account_data(update, context) # –û—Ç–ª–æ–∂–∏–º –¥–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
                        logger.info(f"‚úÖ –û–ø–ª–∞—Ç–∞ –∏–Ω–≤–æ–π—Å–∞ {invoice_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

                    elif payment_status in ['waiting', 'confirming', 'confirmed']:
                        keyboard = [
                            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–µ —Ä–∞–∑", callback_data='check_payment_status')],
                            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_crypto_selection')],
                            [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        await query.edit_message_text(
                            f"‚è≥ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏: {payment_status}. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —â–µ —Ä–∞–∑.",
                            reply_markup=reply_markup
                        )
                        logger.info(f"‚è≥ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –∏–Ω–≤–æ–π—Å–∞ {invoice_id}: {payment_status} (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id})")

                    else: # cancelled, expired, etc.
                        keyboard = [
                            [InlineKeyboardButton("üí≥ –Ü–Ω—à–∏–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏", callback_data='back_to_payment_methods')],
                            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')],
                            [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        await query.edit_message_text(
                            f'‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ–π—à–ª–∞ –∞–±–æ –±—É–ª–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –°—Ç–∞—Ç—É—Å: `{payment_status}`.',
                            parse_mode='Markdown',
                            reply_markup=reply_markup
                        )
                        logger.info(f"‚ùå –û–ø–ª–∞—Ç–∞ –∏–Ω–≤–æ–π—Å–∞ {invoice_id} –Ω–µ —É–¥–∞–ª–∞—Å—å –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞. –°—Ç–∞—Ç—É—Å: {payment_status} (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id})")

                except Exception as e:
                    error_msg = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É –æ–ø–ª–∞—Ç–∏: {e}"
                    await query.edit_message_text(error_msg)
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ NOWPayments –¥–ª—è –∏–Ω–≤–æ–π—Å–∞ {invoice_id}: {e}")

            # - –†—É—á–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ -
            elif data == 'manual_payment_confirmed':
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
                await query.edit_message_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ –≤—Ä—É—á–Ω—É.")
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞
                await self.request_account_data(update, context)
                logger.info(f"‚úÖ –†—É—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã pay –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # - –õ–æ–≥–∏–∫–∞ –¥–ª—è /payout -
        elif data.startswith('payout_'):
        logger.info(f"üéØ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ payout callback: '{data}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º
        if user_id not in [OWNER_ID_1, OWNER_ID_2]:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.")
            return

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            target_user_id = context.user_data.get('payout_target_user_id')
            # uah_amount = context.user_data.get('payout_amount_uah') # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
            usd_amount = context.user_data.get('payout_amount_usd')

            if not target_user_id or not usd_amount:
                await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–ª–∞—Ç—ñ–∂ –≤—Ç—Ä–∞—á–µ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                logger.error(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ payout –ø–æ—Ç–µ—Ä—è–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return

            # - –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é -
            if data == 'payout_card':
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –û–ø–ª–∞—á–µ–Ω–æ", callback_data='payout_manual_payment_confirmed')],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='payout_cancel')],
                    [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    f"üí≥ –†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏ {usd_amount}$ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É <@{target_user_id}>:\n"
                    f"`{CARD_DETAILS}`\n"
                    "(–¢–µ—Å—Ç–æ–≤—ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏)\n\n"
                    "–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '‚úÖ –û–ø–ª–∞—á–µ–Ω–æ'.",
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
                logger.info(f"üí≥ –ü–æ–∫–∞–∑–∞–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –∫–∞—Ä—Ç—ã payout –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

            # - –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é -
            elif data == 'payout_crypto':
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
                keyboard = []
                for currency_name, currency_code in AVAILABLE_CURRENCIES.items():
                    keyboard.append([InlineKeyboardButton(currency_name, callback_data=f'payout_crypto_{currency_code}')])
                keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='payout_cancel')])
                keyboard.append([InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')])
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(f"ü™ô –û–±–µ—Ä—ñ—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç–∏ {usd_amount}$ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É <@{target_user_id}>:", reply_markup=reply_markup)
                logger.info(f"ü™ô –ü–æ–∫–∞–∑–∞–Ω –≤—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è payout –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

            # - –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã -
            elif data.startswith('payout_crypto_'):
                currency_code = data.split('_', 2)[2]
                currency_name = next((name for name, code in AVAILABLE_CURRENCIES.items() if code == currency_code), currency_code.upper())

                try:
                    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –≤ NOWPayments
                    invoice_data = await create_nowpayments_invoice(usd_amount, 'usd', currency_code)
                    invoice_id = invoice_data.get('id')
                    invoice_url = invoice_data.get('invoice_url')

                    if not invoice_id or not invoice_url:
                        raise Exception("NOWPayments –Ω–µ –≤–µ—Ä–Ω—É–ª ID –∏–ª–∏ URL –∏–Ω–≤–æ–π—Å–∞")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏–Ω–≤–æ–π—Å–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                    context.user_data['payout_nowpayments_invoice_id'] = invoice_id

                    keyboard = [
                        [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏", url=invoice_url)],
                        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å", callback_data='payout_check_payment_status')],
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='payout_cancel')],
                        [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.edit_message_text(
                        f"ü™ô –û–ø–ª–∞—Ç–∞ {usd_amount}$ –≤ {currency_name} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É <@{target_user_id}>:\n"
                        f"ID —ñ–Ω–≤–æ–π—Å—É: `{invoice_id}`\n\n"
                        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –æ–ø–ª–∞—Ç–∏.",
                        parse_mode='Markdown',
                        reply_markup=reply_markup
                    )
                    logger.info(f"ü™ô NOWPayments –∏–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω –¥–ª—è payout {user_id}: {invoice_id}")

                except Exception as e:
                    error_msg = f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –æ–ø–ª–∞—Ç–∏: {e}"
                    await query.edit_message_text(error_msg)
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞ NOWPayments –¥–ª—è payout: {e}")

            # - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç–∏ -
            elif data == 'payout_check_payment_status':
                invoice_id = context.user_data.get('payout_nowpayments_invoice_id')
                if not invoice_id:
                    await query.edit_message_text("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ ID —ñ–Ω–≤–æ–π—Å—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.")
                    return

                try:
                    status_data = await get_nowpayments_invoice_status(invoice_id)
                    payment_status = status_data.get('payment_status', 'unknown')

                    if payment_status == 'finished':
                        # –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞
                        success_msg = f"‚úÖ –û–ø–ª–∞—Ç–∞ —ñ–Ω–≤–æ–π—Å—É `{invoice_id}` —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!"
                        keyboard = [
                            [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤—Ä—É—á–Ω—É", callback_data='payout_manual_payment_confirmed')],
                            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='payout_cancel')]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        await query.edit_message_text(
                            success_msg + "\n\n‚ùó –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É, –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –æ–ø–ª–∞—Ç—É –≤—Ä—É—á–Ω—É.",
                            parse_mode='Markdown',
                            reply_markup=reply_markup
                        )
                        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
                        # context.user_data.pop('payout_target_user_id', None)
                        # context.user_data.pop('payout_amount_uah', None)
                        # context.user_data.pop('payout_amount_usd', None)
                        # context.user_data.pop('payout_nowpayments_invoice_id', None)
                        logger.info(f"‚úÖ –û–ø–ª–∞—Ç–∞ –∏–Ω–≤–æ–π—Å–∞ {invoice_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")

                    elif payment_status in ['waiting', 'confirming', 'confirmed']:
                        keyboard = [
                            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–µ —Ä–∞–∑", callback_data='payout_check_payment_status')],
                            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='payout_cancel')],
                            [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        await query.edit_message_text(
                            f"‚è≥ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏: {payment_status}. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —â–µ —Ä–∞–∑.",
                            reply_markup=reply_markup
                        )
                        logger.info(f"‚è≥ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –∏–Ω–≤–æ–π—Å–∞ {invoice_id}: {payment_status} (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id})")

                    else: # cancelled, expired, partially_paid, etc.
                        keyboard = [
                            [InlineKeyboardButton("üí≥ –Ü–Ω—à–∏–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏", callback_data='payout_cancel')], # –ü—Ä–æ—Å—Ç–æ –æ—Ç–º–µ–Ω–∞, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–±–æ—Ä
                            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='payout_cancel')],
                            [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        fail_msg = f"‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ–π—à–ª–∞ –∞–±–æ –±—É–ª–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –°—Ç–∞—Ç—É—Å: `{payment_status}`."
                        await query.edit_message_text(fail_msg, parse_mode='Markdown', reply_markup=reply_markup)
                        logger.info(f"‚ùå –û–ø–ª–∞—Ç–∞ –∏–Ω–≤–æ–π—Å–∞ {invoice_id} –Ω–µ —É–¥–∞–ª–∞—Å—å –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞. –°—Ç–∞—Ç—É—Å: {payment_status} (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id})")

                except Exception as e:
                    error_msg = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É –æ–ø–ª–∞—Ç–∏: {e}"
                    await query.edit_message_text(error_msg)
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ NOWPayments –¥–ª—è payout –∏–Ω–≤–æ–π—Å–∞ {invoice_id}: {e}")

            # - –†—É—á–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ -
            elif data == 'payout_manual_payment_confirmed':
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∑–∞–ø–∏—Å—å –≤ –ë–î
                await query.edit_message_text(
                    "‚úÖ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ –≤—Ä—É—á–Ω—É.\n"
                    "–Ü–Ω—Ñ–æ—Ä–º—É–π—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ –ø–æ–¥–∞–ª—å—à—ñ –¥—ñ—ó."
                )
                # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                context.user_data.pop('payout_target_user_id', None)
                context.user_data.pop('payout_amount_uah', None)
                context.user_data.pop('payout_amount_usd', None)
                context.user_data.pop('payout_nowpayments_invoice_id', None)
                logger.info(f"‚úÖ –†—É—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã payout –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

            # - –û—Ç–º–µ–Ω–∞ payout -
            elif data == 'payout_cancel':
                await query.edit_message_text("‚Ü©Ô∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
                # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                context.user_data.pop('payout_target_user_id', None)
                context.user_data.pop('payout_amount_uah', None)
                context.user_data.pop('payout_amount_usd', None)
                context.user_data.pop('payout_nowpayments_invoice_id', None)
                logger.info(f"‚Ü©Ô∏è Payout –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")

    async def request_account_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞"""
        query = update.callback_query
        user_id = query.from_user.id if update.callback_query else update.effective_user.id

        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        request_text = "üîí –î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ª–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å –≤—ñ–¥ –≤–∞—à–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.\n" \
                       "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: `login:password` –∞–±–æ `email:password`"
        if query:
            await query.edit_message_text(request_text, parse_mode='Markdown', reply_markup=reply_markup)
        else:
            await update.message.reply_text(request_text, parse_mode='Markdown', reply_markup=reply_markup)

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ ---
    async def proceed_to_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞"""
        query = update.callback_query
        user_id = query.from_user.id

        if user_id not in active_conversations or 'order_details' not in active_conversations[user_id]:
            await query.edit_message_text("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
            return

        order_text = active_conversations[user_id]['order_details']

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –≤ UAH
        uah_amount = get_uah_amount_from_order_text(order_text)
        if uah_amount <= 0:
            await query.edit_message_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Å—É–º—É –¥–ª—è –æ–ø–ª–∞—Ç–∏.")
            return

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ USD
        usd_amount = convert_uah_to_usd(uah_amount)
        if usd_amount <= 0:
            await query.edit_message_text("‚ùå –°—É–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç–∏ –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∞.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ USD –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['payment_amount_usd'] = usd_amount
        context.user_data['order_details_for_payment'] = order_text

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é", callback_data='pay_card')],
            [InlineKeyboardButton("ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data='pay_crypto')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')],
            [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f"üí≥ –û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏ –¥–ª—è —Å—É–º–∏ {usd_amount}$:", reply_markup=reply_markup)

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫ ---
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        user = query.from_user
        user_id = user.id
        data = query.data

        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        ensure_user_exists(user)

        logger.info(f"üì• Callback received: data='{data}', from user_id={user_id}")

        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
        if data == 'order':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
            if user_id in active_conversations:
                await query.answer("‚ùó –£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥.", show_alert=True)
                return

            keyboard = [
                [InlineKeyboardButton("üí≥ –ü—ñ–¥–ø–∏—Å–∫–∏", callback_data='order_subscriptions')],
                [InlineKeyboardButton("üéÆ –¶–∏—Ñ—Ä–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏", callback_data='order_digital')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("üõçÔ∏è –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", reply_markup=reply_markup)

        elif data == 'question':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
            if user_id in active_conversations:
                await query.answer("‚ùó –£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥."
                                   "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –ø–∏—Å–∞—Ç–∏ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –¥—ñ–∞–ª–æ–∑—ñ –∞–±–æ –∑–∞–≤–µ—Ä—à—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /stop, "
                                   "—è–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥.", show_alert=True)
                return

            active_conversations[user_id] = {
                'type': 'question',
                'user_info': user,
                'assigned_owner': None,
                'last_message': "–ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è"
            }
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            save_active_conversation(user_id, 'question', None, "–ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            global bot_statistics
            bot_statistics['total_questions'] += 1
            save_stats()

            await query.edit_message_text(
                "üìù –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. –Ø –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫—É –º–∞–≥–∞–∑–∏–Ω—É."
                "–©–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ü–µ–π –¥—ñ–∞–ª–æ–≥ –ø—ñ–∑–Ω—ñ—à–µ, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop."
            )

        elif data == 'help':
            await self.show_help(query, context)

        elif data == 'channel':
            channel_link = "https://t.me/+KzJ3F1D00b0zZjFi" # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å—Å—ã–ª–∫—É
            await query.edit_message_text(f"üì¢ –ù–∞—à –∫–∞–Ω–∞–ª: {channel_link}")

        elif data == 'back_to_main':
            keyboard = [
                [InlineKeyboardButton("üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data='order')],
                [InlineKeyboardButton("‚ùì –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')],
                [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')],
                [InlineKeyboardButton("üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", callback_data='channel')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            welcome_text = f"""üëã –ü—Ä–∏–≤—ñ—Ç, {user.first_name}!

–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É **SecureShop**!

–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ:
‚ñ´Ô∏è –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–æ–∫ –∞–±–æ —Ü–∏—Ñ—Ä–æ–≤–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
‚ñ´Ô∏è –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
‚ñ´Ô∏è –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω–∞—à—ñ —Ç–æ–≤–∞—Ä–∏

–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é üëá"""
            await query.edit_message_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∑–∞–∫–∞–∑–∞ ---
        elif data == 'order_subscriptions':
            await query.edit_message_text(
                "üìù –ù–∞–ø–∏—à—ñ—Ç—å –¥–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏.\n"
                "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: `Discord Full (1 –º—ñ—Å—è—Ü—å) - 170 UAH`",
                parse_mode='Markdown'
            )
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–∫–∞–∑–µ
            active_conversations[user_id] = {
                'type': 'subscription_order',
                'user_info': user,
                'assigned_owner': None,
                'last_message': "–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏"
            }
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            save_active_conversation(user_id, 'subscription_order', None, "–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏")

        elif data == 'order_digital':
            await query.edit_message_text(
                "üìù –ù–∞–ø–∏—à—ñ—Ç—å –¥–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É.\n"
                "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: `Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ (Boost Nitro) - 180 UAH`",
                parse_mode='Markdown'
            )
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–∫–∞–∑–µ
            active_conversations[user_id] = {
                'type': 'digital_order',
                'user_info': user,
                'assigned_owner': None,
                'last_message': "–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É"
            }
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            save_active_conversation(user_id, 'digital_order', None, "–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É")

        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ ---
        elif data == 'proceed_to_payment':
            await self.proceed_to_payment(update, context)

        # --- –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ/–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
        elif data == 'request_account_data':
            await self.request_account_data(update, context)

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        user_id = user.id
        message_text = update.message.text

        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        ensure_user_exists(user)

        # üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if user_id in [OWNER_ID_1, OWNER_ID_2]:
            await self.handle_owner_message(update, context)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        if user_id not in active_conversations:
            keyboard = [
                [InlineKeyboardButton("üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data='order')],
                [InlineKeyboardButton("‚ùì –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')],
                [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏.",
                reply_markup=reply_markup
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        active_conversations[user_id]['last_message'] = message_text
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        save_message(user_id, message_text, True)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –≤ –ë–î
        save_active_conversation(
            user_id,
            active_conversations[user_id]['type'],
            active_conversations[user_id].get('assigned_owner'),
            message_text
        )

        # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–∏–∞–ª–æ–≥–∞
        conversation_type = active_conversations[user_id]['type']

        if conversation_type in ['subscription_order', 'digital_order']:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞
            order_text = message_text
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –≤ UAH
            uah_amount = get_uah_amount_from_order_text(order_text)
            if uah_amount <= 0:
                 # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—É–º–º—ã
                 match_price = re.search(r'(\d+(?:\.\d+)?)\s*(UAH|–≥—Ä–Ω)', order_text, re.IGNORECASE)
                 if match_price:
                     uah_amount = float(match_price.group(1))
                 else:
                     await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Å—É–º—É –¥–ª—è –æ–ø–ª–∞—Ç–∏. –í–∫–∞–∂—ñ—Ç—å —Å—É–º—É –≤ UAH.")
                     return

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ USD
            usd_amount = convert_uah_to_usd(uah_amount)
            if usd_amount <= 0:
                await update.message.reply_text("‚ùå –°—É–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç–∏ –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∞.")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –∏ —Å—É–º–º—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            active_conversations[user_id]['order_details'] = order_text
            context.user_data['payment_amount_usd'] = usd_amount
            context.user_data['order_details_for_payment'] = order_text

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            global bot_statistics
            bot_statistics['total_orders'] += 1
            save_stats()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            save_active_conversation(user_id, conversation_type, None, order_text)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            keyboard = [
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏", callback_data='proceed_to_payment')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            confirmation_text = f"""‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ!
{order_text}
–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é üëá"""

            await update.message.reply_text(confirmation_text.strip(), reply_markup=reply_markup)

        elif conversation_type == 'question':
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤–æ–ø—Ä–æ—Å –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è–º
            await self.forward_question_to_owners(context, user_id, user, message_text)
            await update.message.reply_text("‚úÖ –í–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ –Ω–∞—à–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")

    async def handle_json_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ JSON —Ñ–∞–π–ª–æ–≤ —Å –∑–∞–∫–∞–∑–∞–º–∏"""
        user = update.effective_user
        user_id = user.id

        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        ensure_user_exists(user)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
        if user_id in active_conversations:
            await update.message.reply_text(
                "‚ùó –£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥."
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–µ—Ä—à—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /stop, "
                "—è–∫—â–æ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª—É."
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        file = await update.message.document.get_file()
        file_path = file.file_path

        # –°–∫–∞—á–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_path}"
        response = requests.get(url)
        if response.status_code != 200:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª: {response.status_code}")
            await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ —Ñ–∞–π–ª. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return

        try:
            order_data = response.json()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON: {e}")
            await update.message.reply_text("‚ùå –§–∞–π–ª –º–∞—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–∫–∞–∑–∞
        if 'items' not in order_data or 'total' not in order_data:
            await update.message.reply_text("‚ùå –£ —Ñ–∞–π–ª—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è (items, total).")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
        order_text = "üõçÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Å–∞–π—Ç—É (–∑ —Ñ–∞–π–ª—É):"
        for item in order_data['items']:
            order_text += f"\n‚ñ´Ô∏è {item['service']} {item.get('plan', '')} ({item['period']}) - {item['price']} UAH"
        order_text += f"\nüí≥ –í—Å—å–æ–≥–æ: {order_data['total']} UAH"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞ (–ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞, –º–æ–∂–Ω–æ —É—Å–ª–æ–∂–Ω–∏—Ç—å)
        has_digital = any("–ü—Ä–∏–∫—Ä–∞—Å–∏" in item.get('service', '') for item in order_data['items']) # –û–±–Ω–æ–≤–ª–µ–Ω–æ
        conversation_type = 'digital_order' if has_digital else 'subscription_order'

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–∫–∞–∑–µ
        active_conversations[user_id] = {
            'type': conversation_type,
            'user_info': user,
            'assigned_owner': None,
            'last_message': order_text,
            'order_details': order_text
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        save_active_conversation(user_id, conversation_type, None, order_text)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        global bot_statistics
        bot_statistics['total_orders'] += 1
        save_stats()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏", callback_data='proceed_to_payment')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        confirmation_text = f"""‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª—É –ø—Ä–∏–π–Ω—è—Ç–æ!
{order_text}
–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é üëá"""

        await update.message.reply_text(confirmation_text.strip(), reply_markup=reply_markup)

    # --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π ---
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats –¥–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π"""
        user_id = update.effective_user.id
        if user_id not in [OWNER_ID_1, OWNER_ID_2]:
            return # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
        load_stats()

        stats_text = f"""üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ SecureShop:**

üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {bot_statistics['total_users']}
üõí –ó–∞–º–æ–≤–ª–µ–Ω—å: {bot_statistics['total_orders']}
‚ùì –ó–∞–ø–∏—Ç–∞–Ω—å: {bot_statistics['total_questions']}
‚è∞ –û—Å—Ç–∞–Ω–Ω—î —Å–∫–∏–¥–∞–Ω–Ω—è: {bot_statistics['last_reset']}"""
        await update.message.reply_text(stats_text, parse_mode='Markdown')

    async def show_active_chats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –¥–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"""
        owner_id = update.effective_user.id
        if owner_id not in [OWNER_ID_1, OWNER_ID_2]:
            return

        try:
            with get_db_connection() as conn:
                with conn.cursor(row_factory=dict_row) as cur:
                    cur.execute("""
                        SELECT ac.*, u.first_name, u.username
                        FROM active_conversations ac
                        JOIN users u ON ac.user_id = u.id
                        ORDER BY ac.updated_at DESC
                    """)
                    active_chats = cur.fetchall()

                    if not active_chats:
                        await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤.")
                        return

                    message = "üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã:"
                    keyboard = []
                    for chat in active_chats:
                        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                        client_info = {'first_name': chat['first_name'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π', 'username': chat['username'] or 'N/A'}
                        # –î–æ–±–∞–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–º –≤–ª–∞–¥–µ–ª—å—Ü–µ
                        owner_info = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
                        if chat['assigned_owner']:
                            if chat['assigned_owner'] == OWNER_ID_1:
                                owner_info = "@HiGki2pYYY"
                            elif chat['assigned_owner'] == OWNER_ID_2:
                                owner_info = "@oc33t"
                            else:
                                owner_info = f"ID:{chat['assigned_owner']}"

                        message += f"\n\n‚ñ´Ô∏è **–ö–ª—ñ—î–Ω—Ç:** {client_info['first_name']} (@{client_info['username']})"
                        message += f"\n  ‚ñ´Ô∏è –¢–∏–ø: {chat['type']}"
                        message += f"\n  ‚ñ´Ô∏è –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–æ: {owner_info}"
                        message += f"\n  ‚ñ´Ô∏è –û—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {chat['last_message'][:50]}..."
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
                        keyboard.append([InlineKeyboardButton(
                            f"–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥ –∑ {client_info['first_name']}",
                            callback_data=f'continue_chat_{chat["user_id"]}'
                        )])
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await update.message.reply_text(message.strip(), reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤.")

    async def show_conversation_history(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        owner_id = update.effective_user.id
        if owner_id not in [OWNER_ID_1, OWNER_ID_2]:
            return

        if not context.args:
            await update.message.reply_text("‚ùå –í–∫–∞–∂—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /history 123456789")
            return

        try:
            target_user_id = int(context.args[0])
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
            return

        try:
            with get_db_connection() as conn:
                with conn.cursor(row_factory=dict_row) as cur:
                    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
                    cur.execute("""
                        SELECT * FROM message_history
                        WHERE user_id = %s
                        ORDER BY timestamp ASC
                    """, (target_user_id,))
                    messages = cur.fetchall()

                    if not messages:
                        await update.message.reply_text(f"‚ÑπÔ∏è –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_user_id} –ø–æ—Ä–æ–∂–Ω—è.")
                        return

                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    cur.execute("SELECT first_name, username FROM users WHERE id = %s", (target_user_id,))
                    user_info = cur.fetchone()
                    user_display = f"{user_info['first_name']} (@{user_info['username']})" if user_info else f"ID:{target_user_id}"

                    history_text = f"üìñ **–Ü—Å—Ç–æ—Ä—ñ—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∑ {user_display}:**\n\n"
                    for msg in messages:
                        sender = "–ö–ª—ñ—î–Ω—Ç" if msg['is_from_user'] else "–ú–µ–Ω–µ–¥–∂–µ—Ä"
                        timestamp = msg['timestamp'].strftime('%Y-%m-%d %H:%M:%S')
                        history_text += f"**[{timestamp}] {sender}:** {msg['message']}\n"

                    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if len(history_text) > 4096:
                        parts = [history_text[i:i+4096] for i in range(0, len(history_text), 4096)]
                        for part in parts:
                            await update.message.reply_text(part, parse_mode='Markdown')
                    else:
                        await update.message.reply_text(history_text, parse_mode='Markdown')

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è {target_user_id}: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏.")

    async def clear_active_chats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ (–ë–î)"""
        owner_id = update.effective_user.id
        if owner_id not in [OWNER_ID_1, OWNER_ID_2]:
            return

        try:
            with get_db_connection() as conn:
                with conn.cursor() as cur:
                    cur.execute("DELETE FROM active_conversations")
                    conn.commit()
                    # –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
                    active_conversations.clear()
            await update.message.reply_text("‚úÖ –í—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –¥—ñ–∞–ª–æ–≥–∏ –æ—á–∏—â–µ–Ω–æ.")
            logger.info(f"üóëÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {owner_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω–æ–º {owner_id}: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥—ñ–∞–ª–æ–≥—ñ–≤.")

    async def continue_dialog_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /dialog –¥–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π"""
        owner_id = update.effective_user.id
        if owner_id not in [OWNER_ID_1, OWNER_ID_2]:
            return

        if not context.args:
            await update.message.reply_text("‚ùå –í–∫–∞–∂—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /dialog 123456789")
            return

        try:
            target_user_id = int(context.args[0])
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
            return

        try:
            with get_db_connection() as conn:
                with conn.cursor(row_factory=dict_row) as cur:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    cur.execute("SELECT first_name, username FROM users WHERE id = %s", (target_user_id,))
                    user_info = cur.fetchone()
                    if not user_info:
                        await update.message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                        return

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
                    cur.execute("SELECT type, last_message FROM active_conversations WHERE user_id = %s", (target_user_id,))
                    conversation = cur.fetchone()
                    if not conversation:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                        conv_type = 'manual_dialog' # –¢–∏–ø –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞
                        last_message = "–î—ñ–∞–ª–æ–≥ —Ä–æ–∑–ø–æ—á–∞—Ç–æ –≤—Ä—É—á–Ω—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
                        cur.execute("""
                            INSERT INTO active_conversations (user_id, type, assigned_owner, last_message, updated_at)
                            VALUES (%s, %s, %s, %s, CURRENT_TIMESTAMP)
                            ON CONFLICT (user_id) DO UPDATE SET
                                type = EXCLUDED.type,
                                assigned_owner = EXCLUDED.assigned_owner,
                                last_message = EXCLUDED.last_message,
                                updated_at = CURRENT_TIMESTAMP
                        """, (target_user_id, conv_type, owner_id, last_message))
                        conn.commit()

                        # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
                        active_conversations[target_user_id] = {
                            'type': conv_type,
                            'user_info': User(id=target_user_id, first_name=user_info['first_name'], username=user_info['username']),
                            'assigned_owner': owner_id,
                            'last_message': last_message
                        }

                    else:
                        # –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
                        cur.execute("""
                            UPDATE active_conversations
                            SET assigned_owner = %s, updated_at = CURRENT_TIMESTAMP
                            WHERE user_id = %s
                        """, (owner_id, target_user_id))
                        conn.commit()

                        # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
                        if target_user_id in active_conversations:
                            active_conversations[target_user_id]['assigned_owner'] = owner_id

                    user_display = f"{user_info['first_name']} (@{user_info['username']})" if user_info else f"ID:{target_user_id}"
                    await update.message.reply_text(f"‚úÖ –í–∏ –ø–æ—á–∞–ª–∏ –¥—ñ–∞–ª–æ–≥ –∑ {user_display}. –¢–µ–ø–µ—Ä –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –±—É–¥—É—Ç—å –ø–µ—Ä–µ—Å–∏–ª–∞—Ç–∏—Å—è –≤–∞–º.")

                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å –≤–ª–∞–¥–µ–ª–µ—Ü-–∫–ª–∏–µ–Ω—Ç
                    owner_client_map[owner_id] = target_user_id

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å {target_user_id} –¥–ª—è –∞–¥–º–∏–Ω–∞ {owner_id}: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥.")

    async def payout_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /payout –¥–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π"""
        logger.info("üì• /payout –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞")
        user = update.effective_user
        user_id = user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º
        if user_id not in [OWNER_ID_1, OWNER_ID_2]:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if len(context.args) < 2:
            await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /payout <user_id> <amount_uah>")
            return

        try:
            target_user_id = int(context.args[0])
            uah_amount = float(context.args[1])
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ —Å—É–º–∏.")
            return

        if uah_amount <= 0:
            await update.message.reply_text("‚ùå –°—É–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0.")
            return

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ USD
        usd_amount = convert_uah_to_usd(uah_amount)
        if usd_amount <= 0:
            await update.message.reply_text("‚ùå –°—É–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç–∏ –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∞.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        # - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º target_user_id -
        context.user_data['payout_target_user_id'] = target_user_id
        # -context.user_data['payout_amount_uah'] = uah_amount
        context.user_data['payout_amount_usd'] = usd_amount
        logger.info(f"üíæ /payout: –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ context.user_data –¥–ª—è {user_id}")

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é", callback_data='payout_card')],
            [InlineKeyboardButton("ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data='payout_crypto')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='payout_cancel')],
            [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"üí≥ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <@{target_user_id}> –Ω–∞ —Å—É–º—É {usd_amount}$.\n"
            "–û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    # --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ ---
    async def forward_question_to_owners(self, context: ContextTypes.DEFAULT_TYPE, client_id: int, client_info: User, question_text: str):
        """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è–º"""
        bot = context.bot
        client_name = client_info.first_name or "–ö–ª—ñ—î–Ω—Ç"
        message_to_send = f"‚ùì **–ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ {client_name} (ID: {client_id}):**\n\n{question_text}"

        for owner_id in [OWNER_ID_1, OWNER_ID_2]:
            try:
                keyboard = [
                    [InlineKeyboardButton("üí¨ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f'reply_to_{client_id}')],
                    [InlineKeyboardButton("üë§ –Ü—Å—Ç–æ—Ä—ñ—è", callback_data=f'history_{client_id}')],
                    [InlineKeyboardButton("üìå –ü—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ —Å–æ–±—ñ", callback_data=f'assign_{client_id}')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await bot.send_message(chat_id=owner_id, text=message_to_send, parse_mode='Markdown', reply_markup=reply_markup)
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é {owner_id}: {e}")

    async def forward_order_to_owners(self, context: ContextTypes.DEFAULT_TYPE, client_id: int, client_info: User, order_text: str):
        """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –∑–∞–∫–∞–∑ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è–º"""
        bot = context.bot
        client_name = client_info.first_name or "–ö–ª—ñ—î–Ω—Ç"
        message_to_send = f"üõçÔ∏è **–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ {client_name} (ID: {client_id}):**\n\n{order_text}"

        for owner_id in [OWNER_ID_1, OWNER_ID_2]:
            try:
                keyboard = [
                    [InlineKeyboardButton("üí¨ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f'reply_to_{client_id}')],
                    [InlineKeyboardButton("üë§ –Ü—Å—Ç–æ—Ä—ñ—è", callback_data=f'history_{client_id}')],
                    [InlineKeyboardButton("üìå –ü—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ —Å–æ–±—ñ", callback_data=f'assign_{client_id}')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await bot.send_message(chat_id=owner_id, text=message_to_send, parse_mode='Markdown', reply_markup=reply_markup)
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é {owner_id}: {e}")

    async def handle_owner_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤"""
        owner_id = update.effective_user.id
        message_text = update.message.text

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∑–Ω–∞—á–µ–Ω –ª–∏ —ç—Ç–æ—Ç –≤–ª–∞–¥–µ–ª–µ—Ü –∫ –∫–∞–∫–æ–º—É-—Ç–æ –∫–ª–∏–µ–Ω—Ç—É
        target_client_id = owner_client_map.get(owner_id)

        if not target_client_id:
            await update.message.reply_text(
                "‚ÑπÔ∏è –í–∏ –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—ñ –¥–æ –∂–æ–¥–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /chats –∞–±–æ /dialog <user_id>."
            )
            return

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
            await context.bot.send_message(
                chat_id=target_client_id,
                text=f"üë§ **–ú–µ–Ω–µ–¥–∂–µ—Ä:** {message_text}",
                parse_mode='Markdown'
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞
            save_message(target_client_id, message_text, False)
            await update.message.reply_text("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç—É.")
        except BadRequest as e:
            if "Chat not found" in str(e) or "bot was blocked by the user" in str(e):
                await update.message.reply_text("‚ùå –ö–ª—ñ—î–Ω—Ç –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞ –∞–±–æ —á–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
                if target_client_id in active_conversations:
                    del active_conversations[target_client_id]
                try:
                    with get_db_connection() as conn:
                        with conn.cursor() as cur:
                            cur.execute("DELETE FROM active_conversations WHERE user_id = %s", (target_client_id,))
                        conn.commit()
                except Exception as db_e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏–∑ –ë–î –¥–ª—è {target_client_id}: {db_e}")
                # –£–¥–∞–ª—è–µ–º –∏–∑ owner_client_map
                if owner_id in owner_client_map:
                    del owner_client_map[owner_id]
            else:
                logger.error(f"BadRequest –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {target_client_id}: {e}")
                await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {target_client_id}: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É.")

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ---
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.warning(f'Update {update} caused error {context.error}')

# --- Webhook handlers ---
@flask_app.route('/webhook', methods=['POST'])
async def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ Telegram"""
    if telegram_app:
        json_string = request.get_data().decode('utf-8')
        update = Update.de_json(json.loads(json_string), telegram_app.bot)
        await telegram_app.process_update(update)
        return jsonify({'status': 'ok'})
    else:
        return jsonify({'status': 'bot not initialized'}), 500

@flask_app.route('/nowpayments-ipn', methods=['POST'])
async def nowpayments_ipn():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ IPN —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç NOWPayments"""
    data = await request.get_json()
    logger.info(f"üì• NOWPayments IPN received: {data}")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    return jsonify({'status': 'ok'})

# --- –§—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ ---
async def setup_webhook():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫ –¥–ª—è –±–æ—Ç–∞"""
    try:
        if not WEBHOOK_URL:
            logger.error("‚ùå WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False

        await telegram_app.bot.set_webhook(
            url=f"{WEBHOOK_URL}/webhook",
            max_connections=40,
            drop_pending_updates=True
        )
        logger.info(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}/webhook")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return False

async def start_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    global telegram_app, bot_running
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
        init_db()
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        load_stats()

        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        bot_instance = TelegramBot(BOT_TOKEN)
        await bot_instance.initialize()
        telegram_app = bot_instance.application

        if USE_POLLING:
            await setup_webhook() # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ —Ç–∞
            await bot_instance.start_polling()
            bot_running = True
            logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ polling —Ä–µ–∂–∏–º–µ")
        else:
            success = await setup_webhook()
            if success:
                bot_running = True
                logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ webhook —Ä–µ–∂–∏–º–µ")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å webhook")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        bot_running = False
        raise

def bot_thread():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    bot_instance = None
    try:
        loop.run_until_complete(start_bot())
        if USE_POLLING:
            loop.run_forever()
    except Conflict as e:
        logger.error(f"üö® –ö–æ–Ω—Ñ–ª–∏–∫—Ç: {e}")
        logger.warning("üïí –û–∂–∏–¥–∞–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
        time.sleep(30)
        bot_thread()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ bot_thread: {e}")
        logger.warning("üïí –û–∂–∏–¥–∞–µ–º 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º...")
        time.sleep(15)
        bot_thread()
    finally:
        try:
            if not loop.is_closed():
                loop.close()
        except:
            pass
        logger.warning("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –±–æ—Ç–∞...")
        time.sleep(5)
        bot_thread()

def start_flask():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    flask_app.run(host='0.0.0.0', port=WEBHOOK_PORT)

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=start_flask)
    flask_thread.start()
    logger.info("‚úÖ Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread()
