# main.py (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π /payout)
import logging
import os
import asyncio
import threading
import time
import json
import re
from datetime import datetime
from telegram import BotCommandScopeDefault
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, User, BotCommandScopeChat, BotCommandScopeDefault
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.error import Conflict
from flask import Flask, request, jsonify
from flask_cors import CORS
import psycopg
from psycopg.rows import dict_row
import io
from urllib.parse import unquote
import requests # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ NOWPayments

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
bot_running = False
bot_lock = threading.Lock()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
OWNER_ID_1 = 7106925462 # @HiGki2pYYY
OWNER_ID_2 = 6279578957 # @oc33t
PORT = int(os.getenv('PORT', 8443))
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
USE_POLLING = os.getenv('USE_POLLING', 'true').lower() == 'true'
DATABASE_URL = os.getenv('DATABASE_URL')
PING_INTERVAL = int(os.getenv('PING_INTERVAL', 840)) # 14 –º–∏–Ω—É—Ç

# - –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ/–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ–ø–ª–∞—Ç—ã -
NOWPAYMENTS_API_KEY = os.getenv('NOWPAYMENTS_API_KEY')
EXCHANGE_RATE_UAH_TO_USD = float(os.getenv('EXCHANGE_RATE_UAH_TO_USD', 41.26))

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è NOWPayments (–∏–∑ –æ–ø–ª–∞—Ç–∞.txt)
AVAILABLE_CURRENCIES = {
    "USDT (Solana)": "usdtsol",
    "USDT (TRC20)": "usdttrc20",
    "ETH": "eth",
    "USDT (Arbitrum)": "usdtarb",
    "USDT (Polygon)": "usdtmatic",
    "USDT (TON)": "usdtton",
    "AVAX (C-Chain)": "avax",
    "APTOS (APT)": "apt"
}
# - –ö–æ–Ω–µ—Ü –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö -

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏
STATS_FILE = "bot_stats.json"

# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î
BUFFER_FLUSH_INTERVAL = 300 # 5 –º–∏–Ω—É—Ç
BUFFER_MAX_SIZE = 50
message_buffer = []
active_conv_buffer = []

# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Å—Ç–æ—Ä–∏–∏
user_cache = set()
history_cache = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
bot_statistics = {
    'total_users': 0,
    'total_orders': 0,
    'total_questions': 0,
    'last_reset': datetime.now().isoformat()
}
active_conversations = {}
owner_client_map = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
telegram_app = None
flask_app = Flask(__name__)
CORS(flask_app) # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤

# - –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ/–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ -
def get_uah_amount_from_order_text(order_text: str) -> float:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—É–º–º—É –≤ UAH –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑–∞."""
    match = re.search(r'üí≥ –í—Å—å–æ–≥–æ: (\d+(?:\.\d+)?) UAH', order_text) # –£–ª—É—á—à–µ–Ω regex –¥–ª—è –¥—Ä–æ–±–Ω—ã—Ö —á–∏—Å–µ–ª
    if match:
        return float(match.group(1))
    return 0.0

def convert_uah_to_usd(uah_amount: float) -> float:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –∏–∑ UAH –≤ USD –ø–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∫—É—Ä—Å—É."""
    if uah_amount <= 0:
        return 0.0
    return round(uah_amount / EXCHANGE_RATE_UAH_TO_USD, 2)

def load_stats():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(STATS_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            data['last_reset'] = datetime.fromisoformat(data['last_reset']) # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –æ–±—Ä–∞—Ç–Ω–æ –≤ datetime
            logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞")
            return data
    except FileNotFoundError:
        logger.info("üÜï –§–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π")
        return bot_statistics
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return bot_statistics

def save_stats():
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é, —á—Ç–æ–±—ã –Ω–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç
        stats_to_save = bot_statistics.copy()
        stats_to_save['last_reset'] = stats_to_save['last_reset'].isoformat() # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É
        with open(STATS_FILE, 'w', encoding='utf-8') as f:
            json.dump(stats_to_save, f, ensure_ascii=False, indent=4)
        logger.info("üíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def auto_save_loop():
    """–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç"""
    while True:
        time.sleep(600) # 10 –º–∏–Ω—É—Ç
        save_stats()
        logger.info("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
bot_statistics = load_stats()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î (–∑–∞–≥–ª—É—à–∫–∏, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ)
def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with psycopg.connect(DATABASE_URL) as conn:
            with conn.cursor() as cur:
                # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                cur.execute("""
                    CREATE TABLE IF NOT EXISTS users (
                        id BIGINT PRIMARY KEY,
                        username VARCHAR(255),
                        first_name VARCHAR(255),
                        last_name VARCHAR(255),
                        language_code VARCHAR(10),
                        is_bot BOOLEAN,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    );
                """)
                # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                cur.execute("""
                    CREATE TABLE IF NOT EXISTS messages (
                        id SERIAL PRIMARY KEY,
                        user_id BIGINT REFERENCES users(id),
                        message TEXT,
                        is_from_user BOOLEAN,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    );
                """)
                # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
                cur.execute("""
                    CREATE TABLE IF NOT EXISTS active_conversations (
                        user_id BIGINT PRIMARY KEY REFERENCES users(id),
                        conversation_type VARCHAR(50), -- 'order', 'question', 'manual', 'subscription_order', 'digital_order'
                        assigned_owner BIGINT,
                        last_message TEXT,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    );
                """)
                # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                cur.execute("CREATE INDEX IF NOT EXISTS idx_messages_user_id ON messages(user_id);")
                cur.execute("CREATE INDEX IF NOT EXISTS idx_messages_created_at ON messages(created_at);")
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

def ensure_user_exists(user):
    """–£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)"""
    if user.id in user_cache:
        return
    try:
        with psycopg.connect(DATABASE_URL) as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    INSERT INTO users (id, username, first_name, last_name, language_code, is_bot)
                    VALUES (%s, %s, %s, %s, %s, %s)
                    ON CONFLICT (id) DO UPDATE SET
                        username = EXCLUDED.username,
                        first_name = EXCLUDED.first_name,
                        last_name = EXCLUDED.last_name,
                        language_code = EXCLUDED.language_code,
                        updated_at = CURRENT_TIMESTAMP;
                """, (user.id, user.username, user.first_name, user.last_name, user.language_code, user.is_bot))
        user_cache.add(user.id)
        logger.debug(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω –≤ –ë–î")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ ensure_user_exists –¥–ª—è {user.id}: {e}")

def save_message(user_id, message_text, is_from_user):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä"""
    message_buffer.append((user_id, message_text, is_from_user))
    if len(message_buffer) >= BUFFER_MAX_SIZE:
        flush_message_buffer()

def flush_message_buffer():
    global message_buffer
    if not message_buffer:
        return
    try:
        with psycopg.connect(DATABASE_URL) as conn:
            with conn.cursor() as cur:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                cur.execute("""
                    CREATE TEMP TABLE temp_messages (user_id BIGINT, message TEXT, is_from_user BOOLEAN) ON COMMIT DROP;
                """)
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                cur.executemany("""
                    INSERT INTO temp_messages (user_id, message, is_from_user) VALUES (%s, %s, %s);
                """, message_buffer)
                # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ –æ—Å–Ω–æ–≤–Ω—É—é
                cur.execute("""
                    INSERT INTO messages (user_id, message, is_from_user)
                    SELECT user_id, message, is_from_user FROM temp_messages;
                """)
                conn.commit()
        logger.info(f"üì® –ë—É—Ñ–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π ({len(message_buffer)}) –∑–∞–ø–∏—Å–∞–Ω –≤ –ë–î")
        message_buffer = []
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –±—É—Ñ–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

def save_active_conversation(user_id, conversation_type, assigned_owner, last_message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –≤ –±—É—Ñ–µ—Ä"""
    active_conv_buffer.append((user_id, conversation_type, assigned_owner, last_message))
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –±—É—Ñ–µ—Ä–∞, –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
    if len(active_conv_buffer) >= BUFFER_MAX_SIZE:
        flush_active_conv_buffer()

def flush_active_conv_buffer():
    global active_conv_buffer
    if not active_conv_buffer:
        return
    try:
        with psycopg.connect(DATABASE_URL) as conn:
            with conn.cursor() as cur:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ user_id, –æ—Å—Ç–∞–≤–ª—è—è –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å
                latest_convs = {}
                for item in active_conv_buffer:
                    user_id = item[0]
                    latest_convs[user_id] = item # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                cur.execute("""
                    CREATE TEMP TABLE temp_active_convs (user_id BIGINT, conversation_type VARCHAR(50), assigned_owner BIGINT, last_message TEXT) ON COMMIT DROP;
                """)
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                cur.executemany("""
                    INSERT INTO temp_active_convs (user_id, conversation_type, assigned_owner, last_message) VALUES (%s, %s, %s, %s);
                """, list(latest_convs.values()))
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ –æ—Å–Ω–æ–≤–Ω—É—é
                cur.execute("""
                    INSERT INTO active_conversations (user_id, conversation_type, assigned_owner, last_message)
                    SELECT user_id, conversation_type, assigned_owner, last_message FROM temp_active_convs
                    ON CONFLICT (user_id)
                    DO UPDATE SET
                        conversation_type = EXCLUDED.conversation_type,
                        assigned_owner = EXCLUDED.assigned_owner,
                        last_message = EXCLUDED.last_message,
                        updated_at = CURRENT_TIMESTAMP;
                """)
                conn.commit()
        logger.info(f"üîÑ –ë—É—Ñ–µ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ ({len(active_conv_buffer)}) –∑–∞–ø–∏—Å–∞–Ω –≤ –ë–î")
        active_conv_buffer = []
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –±—É—Ñ–µ—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {e}")

def delete_active_conversation(user_id):
    """–£–¥–∞–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –∏–∑ –ë–î"""
    try:
        with psycopg.connect(DATABASE_URL) as conn:
            with conn.cursor() as cur:
                cur.execute("DELETE FROM active_conversations WHERE user_id = %s", (user_id,))
                conn.commit()
        logger.debug(f"üóëÔ∏è –î–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –ë–î")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ {user_id}: {e}")

def get_conversation_history(client_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞"""
    if client_id in history_cache:
        logger.debug(f"üìñ –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è {client_id} –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ –∫—ç—à–∞")
        return history_cache[client_id]
    try:
        with psycopg.connect(DATABASE_URL) as conn:
            with conn.cursor(row_factory=dict_row) as cur:
                cur.execute("""
                    SELECT message, is_from_user, created_at
                    FROM messages
                    WHERE user_id = %s
                    ORDER BY created_at ASC
                """, (client_id,))
                history = cur.fetchall()
        history_cache[client_id] = history # –ö—ç—à–∏—Ä—É–µ–º
        logger.debug(f"üìñ –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è {client_id} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –ë–î")
        return history
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è {client_id}: {e}")
        return []

def get_active_conversations():
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –∏–∑ –ë–î"""
    try:
        with psycopg.connect(DATABASE_URL) as conn:
            with conn.cursor(row_factory=dict_row) as cur:
                cur.execute("SELECT * FROM active_conversations")
                return cur.fetchall()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
        return []

def get_users():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        with psycopg.connect(DATABASE_URL) as conn:
            with conn.cursor(row_factory=dict_row) as cur:
                cur.execute("SELECT * FROM users ORDER BY created_at DESC")
                return cur.fetchall()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []

def get_total_users_count():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        with psycopg.connect(DATABASE_URL) as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT COUNT(*) FROM users")
                return cur.fetchone()[0]
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return 0

def clear_all_active_conversations():
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with psycopg.connect(DATABASE_URL) as conn:
            with conn.cursor() as cur:
                cur.execute("DELETE FROM active_conversations")
                conn.commit()
        logger.info("üóëÔ∏è –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã –∏–∑ –ë–î")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
# - –ö–æ–Ω–µ—Ü –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π -

class TelegramBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
        self.initialized = False
        self.loop = None

    def setup_handlers(self):
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("order", self.order))
        self.application.add_handler(CommandHandler("question", self.question))
        self.application.add_handler(CommandHandler("channel", self.channel))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("stop", self.stop))
        self.application.add_handler(CommandHandler("pay", self.pay_command)) # –î–æ–±–∞–≤–ª–µ–Ω–æ
        self.application.add_handler(CommandHandler("payout", self.payout_command)) # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π
        self.application.add_handler(CommandHandler("dialog", self.continue_dialog_command))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
        # - –î–æ–±–∞–≤–ª–µ–Ω–æ: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫ –æ–ø–ª–∞—Ç—ã -
        self.application.add_handler(CallbackQueryHandler(self.payment_callback_handler, pattern='^(pay_|payout_|check_payment_status|manual_payment_confirmed|payout_manual_payment_confirmed|back_to_|payout_cancel)'))
        # - –ö–æ–Ω–µ—Ü –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ -

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤)
        self.application.add_handler(MessageHandler(filters.Document.ALL, self.handle_document))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)

    async def set_commands_menu(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥"""
        owner_commands = [BotCommandScopeChat(chat_id=OWNER_ID_1), BotCommandScopeChat(chat_id=OWNER_ID_2)]
        user_commands = [BotCommandScopeDefault()]

        try:
            # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π
            await self.application.bot.set_my_commands([
                ('start', '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é'),
                ('stop', '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥'),
                ('stats', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞'),
                ('history', '–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å'),
                ('chats', '–ê–∫—Ç–∏–≤–Ω—ñ —á–∞—Ç–∏'),
                ('clear', '–û—á–∏—Å—Ç–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ —á–∞—Ç–∏'),
                ('channel', '–ù–∞—à –∫–∞–Ω–∞–ª'),
                ('help', '–î–æ–ø–æ–º–æ–≥–∞'),
                ('dialog', '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥ (–¥–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π)'),
                ('payout', '–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–ª–∞—Ç—ñ–∂ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–¥–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π)') # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
            ], scope=owner_commands[0])

            await self.application.bot.set_my_commands([
                ('start', '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é'),
                ('stop', '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥'),
                ('order', '–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'),
                ('question', '–ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è'),
                ('channel', '–ù–∞—à –∫–∞–Ω–∞–ª'),
                ('help', '–î–æ–ø–æ–º–æ–≥–∞'),
                ('pay', '–û–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Å–∞–π—Ç—É')
            ], scope=user_commands[0])
            logger.info("‚úÖ –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥: {e}")

    async def initialize(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            await self.application.initialize()
            await self.set_commands_menu()
            self.initialized = True
            logger.info("‚úÖ Telegram Application –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Application: {e}")
            raise

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ polling —Ä–µ–∂–∏–º–∞"""
        try:
            if self.application.updater.running:
                logger.warning("üõë –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫")
                return
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ polling —Ä–µ–∂–∏–º–∞...")
            await self.application.start()
            await self.application.updater.start_polling(
                poll_interval=1.0,
                timeout=10,
                bootstrap_retries=-1,
                read_timeout=10,
                write_timeout=10,
                connect_timeout=10,
                pool_timeout=10
            )
            logger.info("‚úÖ Polling –∑–∞–ø—É—â–µ–Ω")
        except Conflict as e:
            logger.error(f"üö® –ö–æ–Ω—Ñ–ª–∏–∫—Ç: {e}")
            logger.warning("üïí –û–∂–∏–¥–∞–µ–º 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
            await asyncio.sleep(15)
            await self.start_polling()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ polling: {e}")
            raise

    async def stop_polling(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling"""
        try:
            if self.application.updater and self.application.updater.running:
                await self.application.updater.stop()
            if self.application.running:
                await self.application.stop()
            if self.application.post_init:
                await self.application.shutdown()
            logger.info("üõë Polling –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ polling: {e}")

    # --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        ensure_user_exists(user)

        # –î–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π
        if user.id in [OWNER_ID_1, OWNER_ID_2]:
            owner_name = "@HiGki2pYYY" if user.id == OWNER_ID_1 else "@oc33t"
            await update.message.reply_text(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}! ({owner_name})")
            return

        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        keyboard = [
            [InlineKeyboardButton("üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data='order')],
            [InlineKeyboardButton("‚ùì –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')],
            [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        welcome_text = f"""üëã –í—ñ—Ç–∞—î–º–æ, {user.first_name}!
ü§ñ –¶–µ –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω—É SecureShop.
–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –∑–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –∑–∞—Å–Ω–æ–≤–Ω–∏–∫–∞–º –º–∞–≥–∞–∑–∏–Ω—É.
–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ üëá"""
        await update.message.reply_text(welcome_text.strip(), reply_markup=reply_markup)

    async def order(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /order"""
        user = update.effective_user
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        ensure_user_exists(user)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
        if user.id in active_conversations:
            await update.message.reply_text(
                "‚ùó –£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥.\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –ø–∏—Å–∞—Ç–∏ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –¥—ñ–∞–ª–æ–∑—ñ –∞–±–æ –∑–∞–≤–µ—Ä—à—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /stop, "
                "—è–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥."
            )
            return

        keyboard = [
            [InlineKeyboardButton("üí≥ –ü—ñ–¥–ø–∏—Å–∫–∏", callback_data='order_subscriptions')],
            [InlineKeyboardButton("üéÆ –¶–∏—Ñ—Ä–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏", callback_data='order_digital')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("üì¶ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç–æ–≤–∞—Ä—É:", reply_markup=reply_markup)

    async def question(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /question"""
        user = update.effective_user
        user_id = user.id
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        ensure_user_exists(user)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
        if user_id in active_conversations:
            await update.message.reply_text(
                "‚ùó –£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥.\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –ø–∏—Å–∞—Ç–∏ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –¥—ñ–∞–ª–æ–∑—ñ –∞–±–æ –∑–∞–≤–µ—Ä—à—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /stop, "
                "—è–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥."
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤–æ–ø—Ä–æ—Å–µ
        active_conversations[user_id] = {
            'type': 'question',
            'user_info': user,
            'assigned_owner': None,
            'last_message': "–ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è"
        }
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        save_active_conversation(user_id, 'question', None, "–ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        bot_statistics['total_questions'] += 1
        save_stats()

        await update.message.reply_text(
            "üìù –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. –Ø –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫—É –º–∞–≥–∞–∑–∏–Ω—É.\n"
            "–©–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ü–µ–π –¥—ñ–∞–ª–æ–≥ –ø—ñ–∑–Ω—ñ—à–µ, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop."
        )

    async def channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /channel"""
        await update.message.reply_text("üîó –ù–∞—à –∫–∞–Ω–∞–ª: https://t.me/+_DqX27kO0a41YzNi")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        message = update.effective_message
        user = update.effective_user
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        ensure_user_exists(user)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º
        is_owner = user.id in [OWNER_ID_1, OWNER_ID_2]

        help_text = f"""‚ÑπÔ∏è –î–æ–≤—ñ–¥–∫–∞ –ø–æ –±–æ—Ç—É SecureShop

üìå –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:
/start - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
/order - –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
/question - –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
/channel - –ù–∞—à –∫–∞–Ω–∞–ª –∑ –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏ —Ç–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞–º–∏
/stop - –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –¥—ñ–∞–ª–æ–≥
/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞"""

        if is_owner:
            help_text += """
            
üîê –ö–æ–º–∞–Ω–¥–∏ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è:
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
/history - –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–ª—ñ—î–Ω—Ç–∞
/chats - –ê–∫—Ç–∏–≤–Ω—ñ —á–∞—Ç–∏
/clear - –û—á–∏—Å—Ç–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ —á–∞—Ç–∏
/dialog - –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥ –∑ –∫–ª—ñ—î–Ω—Ç–æ–º
/payout - –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–ª–∞—Ç—ñ–∂ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""

        help_text += "\n\nüí¨ –Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è, –Ω–µ —Å–æ—Ä–æ–º—Ç–µ—Å—è –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è!"

        await message.reply_text(help_text.strip())

    async def stop(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop"""
        user = update.effective_user
        user_id = user.id
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        ensure_user_exists(user)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
        if user_id not in active_conversations:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –¥–∏–∞–ª–æ–≥–∞
        conversation_type = active_conversations[user_id]['type']

        # –£–¥–∞–ª—è–µ–º –¥–∏–∞–ª–æ–≥ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö (–≤ –ø–∞–º—è—Ç–∏)
        del active_conversations[user_id]
        # –£–¥–∞–ª—è–µ–º –¥–∏–∞–ª–æ–≥ –∏–∑ –ë–î
        delete_active_conversation(user_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        if conversation_type == 'order':
            confirmation_text = "‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ! –ó–∞—Å–Ω–æ–≤–Ω–∏–∫ –º–∞–≥–∞–∑–∏–Ω—É –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
        elif conversation_type == 'question':
            confirmation_text = "‚úÖ –í–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ! –ó–∞—Å–Ω–æ–≤–Ω–∏–∫ –º–∞–≥–∞–∑–∏–Ω—É –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
        else:
            confirmation_text = "‚úÖ –î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ."

        keyboard = [
            [InlineKeyboardButton("üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data='order')],
            [InlineKeyboardButton("‚ùì –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')],
            [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(confirmation_text, reply_markup=reply_markup)

    # - –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã -
    async def pay_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pay –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ —Å —Å–∞–π—Ç–∞ –∏–ª–∏ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞"""
        # ... (–æ—Å—Ç–∞–≤—å—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É /pay_command –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
        pass # –ó–∞–≥–ª—É—à–∫–∞, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –∏–∑ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞

    async def payout_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /payout –¥–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π"""
        user = update.effective_user
        user_id = user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º
        if user_id not in [OWNER_ID_1, OWNER_ID_2]:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if len(context.args) < 2:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏.\n"
                "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: `/payout <user_id> <amount_in_uah>`\n"
                "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: `/payout 123456789 500`",
                parse_mode='Markdown'
            )
            return

        try:
            # --- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: user_id -> target_user_id ---
            target_user_id = int(context.args[0])
            uah_amount = float(context.args[1])
            # ---
            if uah_amount <= 0:
                raise ValueError("–°—É–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è.")
        except ValueError as e:
            await update.message.reply_text(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ —Å—É–º–∏: {e}")
            return

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤ USD
        usd_amount = convert_uah_to_usd(uah_amount)
        if usd_amount <= 0:
            await update.message.reply_text("‚ùå –°—É–º–∞ –≤ USD –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        # --- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º target_user_id ---
        context.user_data['payout_target_user_id'] = target_user_id
        # ---
        context.user_data['payout_amount_uah'] = uah_amount
        context.user_data['payout_amount_usd'] = usd_amount

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é", callback_data='payout_card')],
            [InlineKeyboardButton("ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data='payout_crypto')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='payout_cancel')],
            [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')] # –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–∞–∫ –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è button_handler
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"üí≥ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É –Ω–∞ {uah_amount}‚Ç¥ ({usd_amount}$) –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ `{target_user_id}`.\n"
            f"–û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def payment_callback_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –æ–ø–ª–∞—Ç–æ–π"""
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id # ID —Ç–æ–≥–æ, –∫—Ç–æ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É (–æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å)
        data = query.data

        # --- –õ–æ–≥–∏–∫–∞ –¥–ª—è /pay ---
        # ... (–æ—Å—Ç–∞–≤—å—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É pay_... –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
        if data.startswith('pay_'):
             # ... (–æ—Å—Ç–∞–≤—å—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É pay_... –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
             pass # –ó–∞–≥–ª—É—à–∫–∞, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –∏–∑ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞


        # --- –õ–æ–≥–∏–∫–∞ –¥–ª—è /payout ---
        elif data.startswith('payout_'):
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ payout callback: {data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º
            if user_id not in [OWNER_ID_1, OWNER_ID_2]:
                await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.", show_alert=True)
                logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ payout –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            # --- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–æ–ª—É—á–∞–µ–º target_user_id ---
            target_user_id = context.user_data.get('payout_target_user_id')
            # ---
            uah_amount = context.user_data.get('payout_amount_uah')
            usd_amount = context.user_data.get('payout_amount_usd')

            if not target_user_id or not uah_amount or not usd_amount:
                error_msg = "‚ùå –ü–æ–º–∏–ª–∫–∞: —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–ª–∞—Ç—ñ–∂ –≤—Ç—Ä–∞—á–µ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
                await query.edit_message_text(error_msg)
                logger.error(f"–î–∞–Ω–Ω—ã–µ payout –ø–æ—Ç–µ—Ä—è–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return

            # - –û—Ç–º–µ–Ω–∞ -
            if data == 'payout_cancel':
                await query.edit_message_text("‚ùå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
                # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                context.user_data.pop('payout_target_user_id', None)
                context.user_data.pop('payout_amount_uah', None)
                context.user_data.pop('payout_amount_usd', None)
                context.user_data.pop('payout_nowpayments_invoice_id', None)
                logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ payout –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
                return

            # - –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ–π -
            elif data == 'payout_card':
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –û–ø–ª–∞—á–µ–Ω–æ", callback_data='payout_manual_payment_confirmed')],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='payout_cancel')],
                    [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    f"üí≥ –û–ø–ª–∞—Ç–∞ {uah_amount}‚Ç¥ ({usd_amount}$) –∫–∞—Ä—Ç–∫–æ—é.\n"
                    f"(–¢—É—Ç –±—É–¥—É—Ç—å —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏)\n"
                    f"–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '‚úÖ –û–ø–ª–∞—á–µ–Ω–æ'.",
                    reply_markup=reply_markup
                )
                logger.info(f"–ü–æ–∫–∞–∑–∞–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –∫–∞—Ä—Ç—ã payout –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

            # - –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é -
            elif data == 'payout_crypto':
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
                keyboard = []
                for currency_name, currency_code in AVAILABLE_CURRENCIES.items():
                    keyboard.append([InlineKeyboardButton(currency_name, callback_data=f'payout_crypto_{currency_code}')])
                keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='payout_cancel')])
                keyboard.append([InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')])
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    f"ü™ô –û–±–µ—Ä—ñ—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É –Ω–∞ {uah_amount}‚Ç¥ ({usd_amount}$):",
                    reply_markup=reply_markup
                )
                logger.info(f"–ü–æ–∫–∞–∑–∞–Ω –≤—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è payout –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

            # - –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã -
            elif data.startswith('payout_crypto_'):
                pay_currency = data.split('_')[2]  # e.g., 'usdttrc20'
                # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
                currency_name = next((name for name, code in AVAILABLE_CURRENCIES.items() if code == pay_currency), pay_currency)
                try:
                    # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –≤ NOWPayments
                    headers = {
                        'Authorization': f'Bearer {NOWPAYMENTS_API_KEY}', # –ò—Å–ø–æ–ª—å–∑—É–µ–º Bearer —Ç–æ–∫–µ–Ω
                        'Content-Type': 'application/json'
                    }
                    payload = {
                        "price_amount": usd_amount,
                        "price_currency": "usd",
                        "pay_currency": pay_currency,
                        "ipn_callback_url": f"{WEBHOOK_URL}/nowpayments_ipn",  # URL –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è webhook)
                        "order_id": f"payout_{user_id}_{target_user_id}_{int(time.time())}",  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
                        "order_description": f"–í–∏—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_user_id}"
                    }
                    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ NOWPayments –¥–ª—è payout: {payload}")
                    response = requests.post("https://api.nowpayments.io/v1/invoice", json=payload, headers=headers)
                    logger.info(f"–û—Ç–≤–µ—Ç NOWPayments: {response.status_code}")
                    response.raise_for_status()
                    invoice = response.json()
                    pay_url = invoice.get("invoice_url", "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è")
                    invoice_id = invoice.get("invoice_id", "–ù–µ–≤—ñ–¥–æ–º–∏–π ID —Ä–∞—Ö—É–Ω–∫—É")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏–Ω–≤–æ–π—Å–∞
                    context.user_data['payout_nowpayments_invoice_id'] = invoice_id

                    keyboard = [
                        [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏", url=pay_url)],
                        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å", callback_data='payout_check_payment_status')],
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='payout_cancel')],
                        [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    # --- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –¶–ï–õ–ï–í–û–ú–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
                    try:
                        await context.bot.send_message(
                            chat_id=target_user_id, # <-- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º target_user_id
                            text=f"ü™ô –í–∞–º –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–æ —Ä–∞—Ö—É–Ω–æ–∫ –Ω–∞ {uah_amount}‚Ç¥ ({usd_amount}$) –≤ {currency_name}:\n"
                                 f"{pay_url}\n"
                                 f"ID —Ä–∞—Ö—É–Ω–∫—É: `{invoice_id}`\n"
                                 f"–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–¥—ñ–π—Å–Ω—ñ—Ç—å –æ–ø–ª–∞—Ç—É.",
                            parse_mode='Markdown'
                        )
                        confirmation_msg = f"‚úÖ –†–∞—Ö—É–Ω–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É `{target_user_id}`.\n–ü–æ—Å–∏–ª–∞–Ω–Ω—è: {pay_url}"
                        await query.edit_message_text(confirmation_msg, parse_mode='Markdown')
                        logger.info(f"–ò–Ω–≤–æ–π—Å {invoice_id} —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} –ø–æ –∑–∞–ø—Ä–æ—Å—É –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    except Exception as e:
                        error_send_msg = f"‚ùå –†–∞—Ö—É–Ω–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ, –∞–ª–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {target_user_id}: {e}\n–ü–æ—Å–∏–ª–∞–Ω–Ω—è: {pay_url}"
                        await query.edit_message_text(error_send_msg)
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞ {invoice_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
                    # ---
                except requests.exceptions.RequestException as e:
                    error_msg = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤—ñ—Å–æ–º –æ–ø–ª–∞—Ç–∏: {e}"
                    await query.edit_message_text(error_msg)
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ NOWPayments –¥–ª—è payout: {e}")
                except Exception as e:
                    error_msg = f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –æ–ø–ª–∞—Ç–∏: {e}"
                    await query.edit_message_text(error_msg)
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞ NOWPayments –¥–ª—è payout: {e}")

            # - –†—É—á–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ -
            elif data == 'payout_manual_payment_confirmed':
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∑–∞–ø–∏—Å—å –≤ –ë–î
                await query.edit_message_text(
                    "‚úÖ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ –≤—Ä—É—á–Ω—É.\n"
                    "–Ü–Ω—Ñ–æ—Ä–º—É–π—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ –ø–æ–¥–∞–ª—å—à—ñ –¥—ñ—ó."
                )
                # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                context.user_data.pop('payout_target_user_id', None)
                context.user_data.pop('payout_amount_uah', None)
                context.user_data.pop('payout_amount_usd', None)
                context.user_data.pop('payout_nowpayments_invoice_id', None)
                logger.info(f"–†—É—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã payout –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

            # - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç–∏ -
            elif data == 'payout_check_payment_status':
                invoice_id = context.user_data.get('payout_nowpayments_invoice_id')
                if not invoice_id:
                    await query.edit_message_text("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ ID —Ä–∞—Ö—É–Ω–∫—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.")
                    logger.warning(f"ID –∏–Ω–≤–æ–π—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ payout –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
                    return
                try:
                    headers = {
                        'Authorization': f'Bearer {NOWPAYMENTS_API_KEY}', # –ò—Å–ø–æ–ª—å–∑—É–µ–º Bearer —Ç–æ–∫–µ–Ω
                        'Content-Type': 'application/json'
                    }
                    response = requests.get(f"https://api.nowpayments.io/v1/invoice/{invoice_id}", headers=headers)
                    response.raise_for_status()
                    status_data = response.json()
                    payment_status = status_data.get('payment_status', 'unknown')

                    if payment_status == 'finished':
                        success_msg = "‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–π—à–ª–∞!\n–Ü–Ω—Ñ–æ—Ä–º—É–π—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ –ø–æ–¥–∞–ª—å—à—ñ –¥—ñ—ó."
                        await query.edit_message_text(success_msg)
                        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
                        context.user_data.pop('payout_target_user_id', None)
                        context.user_data.pop('payout_amount_uah', None)
                        context.user_data.pop('payout_amount_usd', None)
                        context.user_data.pop('payout_nowpayments_invoice_id', None)
                        logger.info(f"–û–ø–ª–∞—Ç–∞ –∏–Ω–≤–æ–π—Å–∞ {invoice_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
                    elif payment_status in ['waiting', 'confirming', 'confirmed']:
                        keyboard = [
                            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–µ —Ä–∞–∑", callback_data='payout_check_payment_status')],
                            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='payout_cancel')],
                            [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        status_msg = f"‚è≥ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏: `{payment_status}`. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —â–µ —Ä–∞–∑."
                        await query.edit_message_text(status_msg, parse_mode='Markdown', reply_markup=reply_markup)
                        logger.info(f"–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –∏–Ω–≤–æ–π—Å–∞ {invoice_id}: {payment_status} (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id})")
                    else:  # cancelled, expired, partially_paid, etc.
                        keyboard = [
                            [InlineKeyboardButton("üí≥ –Ü–Ω—à–∏–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏", callback_data='payout_cancel')], # –ü—Ä–æ—Å—Ç–æ –æ—Ç–º–µ–Ω–∞, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–±–æ—Ä
                            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='payout_cancel')],
                            [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        fail_msg = f"‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ–π—à–ª–∞ –∞–±–æ –±—É–ª–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –°—Ç–∞—Ç—É—Å: `{payment_status}`."
                        await query.edit_message_text(fail_msg, parse_mode='Markdown', reply_markup=reply_markup)
                        logger.info(f"–û–ø–ª–∞—Ç–∞ –∏–Ω–≤–æ–π—Å–∞ {invoice_id} –Ω–µ —É–¥–∞–ª–∞—Å—å –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞. –°—Ç–∞—Ç—É—Å: {payment_status} (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id})")
                except Exception as e:
                    error_msg = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É –æ–ø–ª–∞—Ç–∏: {e}"
                    await query.edit_message_text(error_msg)
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ NOWPayments –¥–ª—è payout –∏–Ω–≤–æ–π—Å–∞ {invoice_id}: {e}")
                    
        # --- –õ–æ–≥–∏–∫–∞ –¥–ª—è /payout ---
        elif data.startswith('payout_'):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º
            if user_id not in [OWNER_ID_1, OWNER_ID_2]:
                await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.", show_alert=True)
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            target_user_id = context.user_data.get('payout_target_user_id')
            uah_amount = context.user_data.get('payout_amount_uah')
            usd_amount = context.user_data.get('payout_amount_usd')

            if not target_user_id or not uah_amount or not usd_amount:
                await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–ª–∞—Ç—ñ–∂ –≤—Ç—Ä–∞—á–µ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                return

            # - –û—Ç–º–µ–Ω–∞ -
            if data == 'payout_cancel':
                await query.edit_message_text("‚ùå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
                # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                context.user_data.pop('payout_target_user_id', None)
                context.user_data.pop('payout_amount_uah', None)
                context.user_data.pop('payout_amount_usd', None)
                context.user_data.pop('payout_nowpayments_invoice_id', None)
                return

            # - –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ–π -
            elif data == 'payout_card':
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –û–ø–ª–∞—á–µ–Ω–æ", callback_data='payout_manual_payment_confirmed')],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='payout_cancel')],
                    [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    f"üí≥ –û–ø–ª–∞—Ç–∞ {uah_amount}‚Ç¥ ({usd_amount}$) –∫–∞—Ä—Ç–∫–æ—é.\n"
                    f"(–¢—É—Ç –±—É–¥—É—Ç—å —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏)\n"
                    f"–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '‚úÖ –û–ø–ª–∞—á–µ–Ω–æ'.",
                    reply_markup=reply_markup
                )
                # –ú–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

            # - –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é -
            elif data == 'payout_crypto':
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
                keyboard = []
                for currency_name, currency_code in AVAILABLE_CURRENCIES.items():
                    keyboard.append([InlineKeyboardButton(currency_name, callback_data=f'payout_crypto_{currency_code}')])
                keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='payout_cancel')])
                keyboard.append([InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')])
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    f"ü™ô –û–±–µ—Ä—ñ—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É –Ω–∞ {uah_amount}‚Ç¥ ({usd_amount}$):",
                    reply_markup=reply_markup
                )

            # - –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã -
            elif data.startswith('payout_crypto_'):
                pay_currency = data.split('_')[2]  # e.g., 'usdttrc20'
                # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
                currency_name = next((name for name, code in AVAILABLE_CURRENCIES.items() if code == pay_currency), pay_currency)
                try:
                    # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –≤ NOWPayments
                    headers = {
                        'Authorization': f'Bearer {NOWPAYMENTS_API_KEY}', # –ò—Å–ø–æ–ª—å–∑—É–µ–º Bearer —Ç–æ–∫–µ–Ω
                        'Content-Type': 'application/json'
                    }
                    payload = {
                        "price_amount": usd_amount,
                        "price_currency": "usd",
                        "pay_currency": pay_currency,
                        "ipn_callback_url": f"{WEBHOOK_URL}/nowpayments_ipn",  # URL –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è webhook)
                        "order_id": f"payout_{user_id}_{target_user_id}_{int(time.time())}",  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
                        "order_description": f"–í–∏—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_user_id}"
                    }
                    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ NOWPayments: {payload}")
                    response = requests.post("https://api.nowpayments.io/v1/invoice", json=payload, headers=headers)
                    logger.info(f"–û—Ç–≤–µ—Ç NOWPayments: {response.status_code}, {response.text}")
                    response.raise_for_status()
                    invoice = response.json()
                    pay_url = invoice.get("invoice_url", "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è")
                    invoice_id = invoice.get("invoice_id", "–ù–µ–≤—ñ–¥–æ–º–∏–π ID —Ä–∞—Ö—É–Ω–∫—É")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏–Ω–≤–æ–π—Å–∞
                    context.user_data['payout_nowpayments_invoice_id'] = invoice_id

                    keyboard = [
                        [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏", url=pay_url)],
                        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å", callback_data='payout_check_payment_status')],
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='payout_cancel')],
                        [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    try:
                        await context.bot.send_message(
                            chat_id=target_user_id,
                            text=f"ü™ô –í–∞–º –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–æ —Ä–∞—Ö—É–Ω–æ–∫ –Ω–∞ {uah_amount}‚Ç¥ ({usd_amount}$) –≤ {currency_name}:\n"
                                 f"{pay_url}\n"
                                 f"ID —Ä–∞—Ö—É–Ω–∫—É: `{invoice_id}`\n"
                                 f"–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–¥—ñ–π—Å–Ω—ñ—Ç—å –æ–ø–ª–∞—Ç—É.",
                            parse_mode='Markdown'
                        )
                        await query.edit_message_text(
                            f"‚úÖ –†–∞—Ö—É–Ω–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É `{target_user_id}`.\n"
                            f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è: {pay_url}",
                            parse_mode='Markdown'
                        )
                    except Exception as e:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {target_user_id}: {e}")
                        await query.edit_message_text(
                            f"‚ùå –†–∞—Ö—É–Ω–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ, –∞–ª–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: {e}\n"
                            f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è: {pay_url}"
                        )
                except requests.exceptions.RequestException as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ NOWPayments –¥–ª—è payout: {e}")
                    await query.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤—ñ—Å–æ–º –æ–ø–ª–∞—Ç–∏: {e}")
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–≤–æ–π—Å—É NOWPayments –¥–ª—è payout: {e}")
                    await query.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –æ–ø–ª–∞—Ç–∏: {e}")

            # - –†—É—á–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ -
            elif data == 'payout_manual_payment_confirmed':
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∑–∞–ø–∏—Å—å –≤ –ë–î
                await query.edit_message_text(
                    "‚úÖ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ –≤—Ä—É—á–Ω—É.\n"
                    "–Ü–Ω—Ñ–æ—Ä–º—É–π—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ –ø–æ–¥–∞–ª—å—à—ñ –¥—ñ—ó."
                )
                # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                context.user_data.pop('payout_target_user_id', None)
                context.user_data.pop('payout_amount_uah', None)
                context.user_data.pop('payout_amount_usd', None)
                context.user_data.pop('payout_nowpayments_invoice_id', None)

            # - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç–∏ -
            elif data == 'payout_check_payment_status':
                invoice_id = context.user_data.get('payout_nowpayments_invoice_id')
                if not invoice_id:
                    await query.edit_message_text("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ ID —Ä–∞—Ö—É–Ω–∫—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.")
                    return
                try:
                    headers = {
                        'Authorization': f'Bearer {NOWPAYMENTS_API_KEY}', # –ò—Å–ø–æ–ª—å–∑—É–µ–º Bearer —Ç–æ–∫–µ–Ω
                        'Content-Type': 'application/json'
                    }
                    response = requests.get(f"https://api.nowpayments.io/v1/invoice/{invoice_id}", headers=headers)
                    response.raise_for_status()
                    status_data = response.json()
                    payment_status = status_data.get('payment_status', 'unknown')

                    if payment_status == 'finished':
                        await query.edit_message_text(
                            "‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–π—à–ª–∞!\n"
                            "–Ü–Ω—Ñ–æ—Ä–º—É–π—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ –ø–æ–¥–∞–ª—å—à—ñ –¥—ñ—ó."
                        )
                        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
                        context.user_data.pop('payout_target_user_id', None)
                        context.user_data.pop('payout_amount_uah', None)
                        context.user_data.pop('payout_amount_usd', None)
                        context.user_data.pop('payout_nowpayments_invoice_id', None)
                    elif payment_status in ['waiting', 'confirming', 'confirmed']:
                        keyboard = [
                            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–µ —Ä–∞–∑", callback_data='payout_check_payment_status')],
                            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='payout_cancel')],
                            [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        await query.edit_message_text(
                            f"‚è≥ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏: `{payment_status}`. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —â–µ —Ä–∞–∑.",
                            parse_mode='Markdown',
                            reply_markup=reply_markup
                        )
                    else:  # cancelled, expired, partially_paid, etc.
                        keyboard = [
                            [InlineKeyboardButton("üí≥ –Ü–Ω—à–∏–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏", callback_data='payout_cancel')], # –ü—Ä–æ—Å—Ç–æ –æ—Ç–º–µ–Ω–∞, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–±–æ—Ä
                            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='payout_cancel')],
                            [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        await query.edit_message_text(
                            f"‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ–π—à–ª–∞ –∞–±–æ –±—É–ª–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –°—Ç–∞—Ç—É—Å: `{payment_status}`.",
                            parse_mode='Markdown',
                            reply_markup=reply_markup
                        )
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É NOWPayments –¥–ª—è payout: {e}")
                    await query.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É –æ–ø–ª–∞—Ç–∏: {e}")

    async def request_account_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞"""
        query = update.callback_query
        user_id = query.from_user.id if update.callback_query else update.effective_user.id
        order_details = context.user_data.get('order_details_for_payment', '')

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞ (–º–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É)
        is_digital = 'digital_order' in active_conversations.get(user_id, {}).get('type', '')
        item_type = "–∞–∫–∞—É–Ω—Ç—É Discord" if is_digital else "–∞–∫–∞—É–Ω—Ç—É"

        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        message_text = (
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ!\n"
            f"–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –ª–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å –≤—ñ–¥ {item_type}.\n"
            f"–ù–∞–ø—Ä–∏–∫–ª–∞–¥: `login:password` –∞–±–æ `login password`"
        )
        if update.callback_query:
            await query.edit_message_text(message_text, parse_mode='Markdown')
        else:
            await update.message.reply_text(message_text, parse_mode='Markdown')
        context.user_data['awaiting_account_data'] = True
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è–º –ø–æ–∑–∂–µ
        context.user_data['account_details_order'] = order_details

    async def handle_account_data_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–≥–∏–Ω–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º"""
        user = update.effective_user
        user_id = user.id
        message_text = update.message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        if not context.user_data.get('awaiting_account_data'):
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
        if ':' in message_text:
            parts = message_text.split(':', 1)
        elif ' ' in message_text:
            parts = message_text.split(' ', 1)
        else:
            await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `login:password` –∞–±–æ `login password`.")
            return

        login = parts[0]
        password = parts[1]
        order_details = context.user_data.get('account_details_order', '–ù–µ–≤—ñ–¥–æ–º—ñ –¥–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')

        account_info_message = (
            f"üîê –ù–æ–≤—ñ –¥–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç—É –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.first_name} (@{user.username or '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}) (ID: {user_id}):\n"
            f"–õ–æ–≥—ñ–Ω: `{login}`\n"
            f"–ü–∞—Ä–æ–ª—å: `{password}`\n"
            f"–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order_details}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è–º
        success_count = 0
        for owner_id in [OWNER_ID_1, OWNER_ID_2]:
            try:
                await context.bot.send_message(chat_id=owner_id, text=account_info_message, parse_mode='Markdown')
                success_count += 1
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—É –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é {owner_id}: {e}")

        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if success_count > 0:
            await update.message.reply_text("‚úÖ –î–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç—É —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫–∞–º –º–∞–≥–∞–∑–∏–Ω—É. –î—è–∫—É—î–º–æ!")
        else:
            await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –¥–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.pop('awaiting_account_data', None)
        context.user_data.pop('payment_amount_usd', None)
        context.user_data.pop('order_details_for_payment', None)
        context.user_data.pop('account_details_order', None)
        context.user_data.pop('nowpayments_invoice_id', None)
        # –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω
        if user_id in active_conversations:
            del active_conversations[user_id]
        delete_active_conversation(user_id)

    # - –ö–æ–Ω–µ—Ü –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã -

    async def continue_dialog_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /dialog –¥–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
        pass # –ó–∞–≥–ª—É—à–∫–∞, —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        user = query.from_user
        user_id = user.id

        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        ensure_user_exists(user)

        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if query.data == 'order':
            keyboard = [
                [InlineKeyboardButton("üí≥ –ü—ñ–¥–ø–∏—Å–∫–∏", callback_data='order_subscriptions')],
                [InlineKeyboardButton("üéÆ –¶–∏—Ñ—Ä–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏", callback_data='order_digital')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("üì¶ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç–æ–≤–∞—Ä—É:", reply_markup=reply_markup)

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        elif query.data == 'back_to_main':
            keyboard = [
                [InlineKeyboardButton("üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data='order')],
                [InlineKeyboardButton("‚ùì –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')],
                [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=reply_markup)

        # –ú–µ–Ω—é –ü—ñ–¥–ø–∏—Å–æ–∫
        elif query.data == 'order_subscriptions':
            keyboard = [
                [InlineKeyboardButton("üí¨ ChatGPT Plus", callback_data='category_chatgpt')],
                [InlineKeyboardButton("üéÆ Discord Nitro", callback_data='category_discord')],
                [InlineKeyboardButton("üéì Duolingo Max", callback_data='category_duolingo')],
                [InlineKeyboardButton("üé® Picsart AI", callback_data='category_picsart')],
                [InlineKeyboardButton("üìä Canva Pro", callback_data='category_canva')],
                [InlineKeyboardButton("üì∫ Netflix", callback_data='category_netflix')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("üí≥ –û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É:", reply_markup=reply_markup)

        # –ú–µ–Ω—é –¶–∏—Ñ—Ä–æ–≤–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
        elif query.data == 'order_digital':
            keyboard = [
                [InlineKeyboardButton("üéÆ Discord –ü—Ä–∏–∫—Ä–∞—Å–∏", callback_data='category_discord_decor')], # –û–±–Ω–æ–≤–ª–µ–Ω–æ
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("üéÆ –û–±–µ—Ä—ñ—Ç—å —Ü–∏—Ñ—Ä–æ–≤–∏–π —Ç–æ–≤–∞—Ä:", reply_markup=reply_markup) # –û–±–Ω–æ–≤–ª–µ–Ω–æ

        # --- –ú–µ–Ω—é –ü—ñ–¥–ø–∏—Å–æ–∫ ---
        # –ú–µ–Ω—é ChatGPT
        elif query.data == 'category_chatgpt':
            keyboard = [
                [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 650 UAH", callback_data='chatgpt_1')],
                [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 6500 UAH", callback_data='chatgpt_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order_subscriptions')]
            ]
            await query.edit_message_text("üí¨ ChatGPT Plus:", reply_markup=InlineKeyboardMarkup(keyboard))

        # –ú–µ–Ω—é Discord
        elif query.data == 'category_discord':
            keyboard = [
                [InlineKeyboardButton("Discord Nitro Basic 1–º - 260 UAH", callback_data='discord_basic_1')],
                [InlineKeyboardButton("Discord Nitro Basic 12–º - 2600 UAH", callback_data='discord_basic_12')],
                [InlineKeyboardButton("Discord Nitro Full 1–º - 390 UAH", callback_data='discord_full_1')],
                [InlineKeyboardButton("Discord Nitro Full 12–º - 3900 UAH", callback_data='discord_full_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order_subscriptions')]
            ]
            await query.edit_message_text("üéÆ Discord Nitro:", reply_markup=InlineKeyboardMarkup(keyboard))

        # –ú–µ–Ω—é Duolingo
        elif query.data == 'category_duolingo':
            keyboard = [
                [InlineKeyboardButton("Duolingo Max 1–º - 520 UAH", callback_data='duolingo_1')],
                [InlineKeyboardButton("Duolingo Max 12–º - 5200 UAH", callback_data='duolingo_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order_subscriptions')]
            ]
            await query.edit_message_text("üéì Duolingo Max:", reply_markup=InlineKeyboardMarkup(keyboard))

        # –ú–µ–Ω—é Picsart
        elif query.data == 'category_picsart':
            keyboard = [
                [InlineKeyboardButton("Picsart AI Plus", callback_data='picsart_plus')],
                [InlineKeyboardButton("Picsart AI Pro", callback_data='picsart_pro')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order_subscriptions')]
            ]
            await query.edit_message_text("üé® –û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç Picsart AI:", reply_markup=InlineKeyboardMarkup(keyboard))

        # –ü–æ–¥–º–µ–Ω—é Picsart Plus
        elif query.data == 'picsart_plus':
            keyboard = [
                [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 400 UAH", callback_data='picsart_plus_1')],
                [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 4000 UAH", callback_data='picsart_plus_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='category_picsart')]
            ]
            await query.edit_message_text("üé® Picsart AI Plus:", reply_markup=InlineKeyboardMarkup(keyboard))

        # –ü–æ–¥–º–µ–Ω—é Picsart Pro
        elif query.data == 'picsart_pro':
            keyboard = [
                [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 520 UAH", callback_data='picsart_pro_1')],
                [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 5200 UAH", callback_data='picsart_pro_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='category_picsart')]
            ]
            await query.edit_message_text("üé® Picsart AI Pro:", reply_markup=InlineKeyboardMarkup(keyboard))

        # –ú–µ–Ω—é Canva
        elif query.data == 'category_canva':
            keyboard = [
                [InlineKeyboardButton("Canva Pro Individual", callback_data='canva_ind')],
                [InlineKeyboardButton("Canva Pro Family", callback_data='canva_fam')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order_subscriptions')]
            ]
            await query.edit_message_text("üìä –û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç Canva Pro:", reply_markup=InlineKeyboardMarkup(keyboard))

        # –ü–æ–¥–º–µ–Ω—é Canva Individual
        elif query.data == 'canva_ind':
            keyboard = [
                [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 520 UAH", callback_data='canva_ind_1')],
                [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 5200 UAH", callback_data='canva_ind_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='category_canva')]
            ]
            await query.edit_message_text("üìä Canva Pro (Individual):", reply_markup=InlineKeyboardMarkup(keyboard))

        # –ü–æ–¥–º–µ–Ω—é Canva Family
        elif query.data == 'canva_fam':
            keyboard = [
                [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 650 UAH", callback_data='canva_fam_1')],
                [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 6500 UAH", callback_data='canva_fam_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='category_canva')]
            ]
            await query.edit_message_text("üìä Canva Pro (Family):", reply_markup=InlineKeyboardMarkup(keyboard))

        # –ú–µ–Ω—é Netflix
        elif query.data == 'category_netflix':
            keyboard = [
                [InlineKeyboardButton("Netflix Mobile 1–º - 260 UAH", callback_data='netflix_mob_1')],
                [InlineKeyboardButton("Netflix Mobile 12–º - 2600 UAH", callback_data='netflix_mob_12')],
                [InlineKeyboardButton("Netflix Basic 1–º - 390 UAH", callback_data='netflix_bas_1')],
                [InlineKeyboardButton("Netflix Basic 12–º - 3900 UAH", callback_data='netflix_bas_12')],
                [InlineKeyboardButton("Netflix Standard 1–º - 520 UAH", callback_data='netflix_std_1')],
                [InlineKeyboardButton("Netflix Standard 12–º - 5200 UAH", callback_data='netflix_std_12')],
                [InlineKeyboardButton("Netflix Premium 1–º - 650 UAH", callback_data='netflix_pre_1')],
                [InlineKeyboardButton("Netflix Premium 12–º - 6500 UAH", callback_data='netflix_pre_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order_subscriptions')]
            ]
            await query.edit_message_text("üì∫ –û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É Netflix:", reply_markup=InlineKeyboardMarkup(keyboard))

        # --- –ú–µ–Ω—é –¶–∏—Ñ—Ä–æ–≤–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ ---
        # –ú–µ–Ω—é Discord –ü—Ä–∏–∫—Ä–∞—Å–∏
        elif query.data == 'category_discord_decor':
            keyboard = [
                [InlineKeyboardButton("–ë–µ–∑ Nitro", callback_data='discord_decor_without_nitro')],
                [InlineKeyboardButton("–ó Nitro", callback_data='discord_decor_with_nitro')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order_digital')]
            ]
            await query.edit_message_text("üéÆ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—Ä–∏–∫—Ä–∞—Å–∏ Discord:", reply_markup=InlineKeyboardMarkup(keyboard)) # –û–±–Ω–æ–≤–ª–µ–Ω–æ

        # –ü–æ–¥–º–µ–Ω—é Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ –ë–µ–∑ Nitro
        elif query.data == 'discord_decor_without_nitro':
            keyboard = [
                [InlineKeyboardButton("6$ - 180 UAH", callback_data='discord_decor_bzn_6')],
                [InlineKeyboardButton("8$ - 240 UAH", callback_data='discord_decor_bzn_8')],
                [InlineKeyboardButton("9$ - 265 UAH", callback_data='discord_decor_bzn_9')],
                [InlineKeyboardButton("12$ - 355 UAH", callback_data='discord_decor_bzn_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='category_discord_decor')]
            ]
            await query.edit_message_text("üéÆ –û–±–µ—Ä—ñ—Ç—å –ø—Ä–∏–∫—Ä–∞—Å—É Discord (–ë–µ–∑ Nitro):", reply_markup=InlineKeyboardMarkup(keyboard)) # –û–±–Ω–æ–≤–ª–µ–Ω–æ

        # –ü–æ–¥–º–µ–Ω—é Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ –ó Nitro
        elif query.data == 'discord_decor_with_nitro':
            keyboard = [
                [InlineKeyboardButton("5$ - 145 UAH", callback_data='discord_decor_zn_5')],
                [InlineKeyboardButton("7$ - 205 UAH", callback_data='discord_decor_zn_7')],
                [InlineKeyboardButton("8.5$ - 250 UAH", callback_data='discord_decor_zn_8_5')],
                [InlineKeyboardButton("9$ - 265 UAH", callback_data='discord_decor_zn_9')],
                [InlineKeyboardButton("14$ - 410 UAH", callback_data='discord_decor_zn_14')],
                [InlineKeyboardButton("22$ - 650 UAH", callback_data='discord_decor_zn_22')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='category_discord_decor')]
            ]
            await query.edit_message_text("üéÆ –û–±–µ—Ä—ñ—Ç—å –ø—Ä–∏–∫—Ä–∞—Å—É Discord (–ó Nitro):", reply_markup=InlineKeyboardMarkup(keyboard)) # –û–±–Ω–æ–≤–ª–µ–Ω–æ

        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ ---
        # –ü—Ä–∏–º–µ—Ä –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
        elif query.data.startswith('chatgpt_') or \
             query.data.startswith('discord_') or \
             query.data.startswith('duolingo_') or \
             query.data.startswith('picsart_') or \
             query.data.startswith('canva_') or \
             query.data.startswith('netflix_') or \
             query.data.startswith('discord_decor_'):

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞
            conversation_type = 'subscription_order' if not query.data.startswith('discord_decor_') else 'digital_order'

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ callback_data
            # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
            item_map = {
                # ChatGPT
                'chatgpt_1': ("ChatGPT Plus", "1 –º—ñ—Å—è—Ü—å", 650),
                'chatgpt_12': ("ChatGPT Plus", "12 –º—ñ—Å—è—Ü—ñ–≤", 6500),
                # Discord
                'discord_basic_1': ("Discord Nitro Basic", "1 –º—ñ—Å—è—Ü—å", 260),
                'discord_basic_12': ("Discord Nitro Basic", "12 –º—ñ—Å—è—Ü—ñ–≤", 2600),
                'discord_full_1': ("Discord Nitro Full", "1 –º—ñ—Å—è—Ü—å", 390),
                'discord_full_12': ("Discord Nitro Full", "12 –º—ñ—Å—è—Ü—ñ–≤", 3900),
                # Duolingo
                'duolingo_1': ("Duolingo Max", "1 –º—ñ—Å—è—Ü—å", 520),
                'duolingo_12': ("Duolingo Max", "12 –º—ñ—Å—è—Ü—ñ–≤", 5200),
                # Picsart Plus
                'picsart_plus_1': ("Picsart AI Plus", "1 –º—ñ—Å—è—Ü—å", 400),
                'picsart_plus_12': ("Picsart AI Plus", "12 –º—ñ—Å—è—Ü—ñ–≤", 4000),
                # Picsart Pro
                'picsart_pro_1': ("Picsart AI Pro", "1 –º—ñ—Å—è—Ü—å", 520),
                'picsart_pro_12': ("Picsart AI Pro", "12 –º—ñ—Å—è—Ü—ñ–≤", 5200),
                # Canva Individual
                'canva_ind_1': ("Canva Pro Individual", "1 –º—ñ—Å—è—Ü—å", 520),
                'canva_ind_12': ("Canva Pro Individual", "12 –º—ñ—Å—è—Ü—ñ–≤", 5200),
                # Canva Family
                'canva_fam_1': ("Canva Pro Family", "1 –º—ñ—Å—è—Ü—å", 650),
                'canva_fam_12': ("Canva Pro Family", "12 –º—ñ—Å—è—Ü—ñ–≤", 6500),
                # Netflix
                'netflix_mob_1': ("Netflix Mobile", "1 –º—ñ—Å—è—Ü—å", 260),
                'netflix_mob_12': ("Netflix Mobile", "12 –º—ñ—Å—è—Ü—ñ–≤", 2600),
                'netflix_bas_1': ("Netflix Basic", "1 –º—ñ—Å—è—Ü—å", 390),
                'netflix_bas_12': ("Netflix Basic", "12 –º—ñ—Å—è—Ü—ñ–≤", 3900),
                'netflix_std_1': ("Netflix Standard", "1 –º—ñ—Å—è—Ü—å", 520),
                'netflix_std_12': ("Netflix Standard", "12 –º—ñ—Å—è—Ü—ñ–≤", 5200),
                'netflix_pre_1': ("Netflix Premium", "1 –º—ñ—Å—è—Ü—å", 650),
                'netflix_pre_12': ("Netflix Premium", "12 –º—ñ—Å—è—Ü—ñ–≤", 6500),
                # Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ –ë–µ–∑ Nitro
                'discord_decor_bzn_6': ("Discord –ü—Ä–∏–∫—Ä–∞—Å–∞ (–ë–µ–∑ Nitro)", "6$", 180),
                'discord_decor_bzn_8': ("Discord –ü—Ä–∏–∫—Ä–∞—Å–∞ (–ë–µ–∑ Nitro)", "8$", 240),
                'discord_decor_bzn_9': ("Discord –ü—Ä–∏–∫—Ä–∞—Å–∞ (–ë–µ–∑ Nitro)", "9$", 265),
                'discord_decor_bzn_12': ("Discord –ü—Ä–∏–∫—Ä–∞—Å–∞ (–ë–µ–∑ Nitro)", "12$", 355),
                # Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ –ó Nitro
                'discord_decor_zn_5': ("Discord –ü—Ä–∏–∫—Ä–∞—Å–∞ (–ó Nitro)", "5$", 145),
                'discord_decor_zn_7': ("Discord –ü—Ä–∏–∫—Ä–∞—Å–∞ (–ó Nitro)", "7$", 205),
                'discord_decor_zn_8_5': ("Discord –ü—Ä–∏–∫—Ä–∞—Å–∞ (–ó Nitro)", "8.5$", 250),
                'discord_decor_zn_9': ("Discord –ü—Ä–∏–∫—Ä–∞—Å–∞ (–ó Nitro)", "9$", 265),
                'discord_decor_zn_14': ("Discord –ü—Ä–∏–∫—Ä–∞—Å–∞ (–ó Nitro)", "14$", 410),
                'discord_decor_zn_22': ("Discord –ü—Ä–∏–∫—Ä–∞—Å–∞ (–ó Nitro)", "22$", 650),
            }

            if query.data in item_map:
                service_name, period, price_uah = item_map[query.data]
                order_text = f"üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n  ‚Ä¢ {service_name} ({period}) - {price_uah} UAH\nüí≥ –í—Å—å–æ–≥–æ: {price_uah} UAH"

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
                if user_id in active_conversations:
                     await query.answer("‚ùó –£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥.", show_alert=True)
                     return

                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–∫–∞–∑–µ
                active_conversations[user_id] = {
                    'type': conversation_type,
                    'user_info': user,
                    'assigned_owner': None,
                    'last_message': order_text,
                    'order_details': order_text
                }
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                save_active_conversation(user_id, conversation_type, None, order_text)
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                bot_statistics['total_orders'] += 1
                save_stats()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                keyboard = [
                    [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏", callback_data='proceed_to_payment')],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                confirmation_text = f"""‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ!
{order_text}
–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é üëá"""
                await query.edit_message_text(confirmation_text.strip(), reply_markup=reply_markup)
            else:
                await query.edit_message_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ ---
        elif query.data == 'proceed_to_payment':
            if user_id not in active_conversations or 'order_details' not in active_conversations[user_id]:
                await query.edit_message_text("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
                return

            order_text = active_conversations[user_id]['order_details']

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –≤ UAH
            uah_amount = get_uah_amount_from_order_text(order_text)
            if uah_amount <= 0:
                await query.edit_message_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Å—É–º—É –¥–ª—è –æ–ø–ª–∞—Ç–∏.")
                return

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ USD
            usd_amount = convert_uah_to_usd(uah_amount)
            if usd_amount <= 0:
                await query.edit_message_text("‚ùå –°—É–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç–∏ –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∞.")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ USD –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context.user_data['payment_amount_usd'] = usd_amount
            context.user_data['order_details_for_payment'] = order_text

            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
            keyboard = [
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é", callback_data='pay_card')],
                [InlineKeyboardButton("ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data='pay_crypto')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')],
                [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(f"üí≥ –û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏ –¥–ª—è —Å—É–º–∏ {usd_amount}$:", reply_markup=reply_markup)

        # --- –î–æ–±–∞–≤–ª–µ–Ω–æ: –ö–Ω–æ–ø–∫–∞ "–ó–∞–ø–∏—Ç–∞–Ω–Ω—è" ---
        elif query.data == 'question':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
            if user_id in active_conversations:
                await query.answer(
                    "‚ùó –£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥.\n"
                    "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –ø–∏—Å–∞—Ç–∏ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –¥—ñ–∞–ª–æ–∑—ñ –∞–±–æ –∑–∞–≤–µ—Ä—à—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /stop.",
                    show_alert=True
                )
                return

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤–æ–ø—Ä–æ—Å–µ
            active_conversations[user_id] = {
                'type': 'question',
                'user_info': user,
                'assigned_owner': None,
                'last_message': "–ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è"
            }
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            save_active_conversation(user_id, 'question', None, "–ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            bot_statistics['total_questions'] += 1
            save_stats()

            await query.edit_message_text(
                "üìù –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. –Ø –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫—É –º–∞–≥–∞–∑–∏–Ω—É.\n"
                "–©–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ü–µ–π –¥—ñ–∞–ª–æ–≥ –ø—ñ–∑–Ω—ñ—à–µ, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop."
            )
        # --- –ö–æ–Ω–µ—Ü –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ ---

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        user_id = user.id
        message_text = update.message.text.strip()

        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        ensure_user_exists(user)

        # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        if context.user_data.get('awaiting_account_data'):
            await self.handle_account_data_message(update, context)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
        if user_id not in active_conversations:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞, –º–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∏–ª–∏ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
            # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            return

        conversation = active_conversations[user_id]
        conversation_type = conversation['type']
        assigned_owner = conversation.get('assigned_owner')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        conversation['last_message'] = message_text
        save_active_conversation(user_id, conversation_type, assigned_owner, message_text)
        save_message(user_id, message_text, True) # True –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–∏–∞–ª–æ–≥–∞
        if conversation_type == 'order':
            # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é(—è–º)
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–º—É –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
            for owner_id in [OWNER_ID_1, OWNER_ID_2]:
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é
                    await context.bot.send_message(
                        chat_id=owner_id,
                        text=f"üì¶ –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.first_name} (@{user.username or '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}) (ID: {user_id}):\n{message_text}"
                    )
                    # –ù–∞–∑–Ω–∞—á–∞–µ–º —ç—Ç–æ–≥–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω
                    if not assigned_owner:
                        conversation['assigned_owner'] = owner_id
                        owner_client_map[owner_id] = user_id
                        save_active_conversation(user_id, conversation_type, owner_id, message_text)
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
                        await context.bot.send_message(
                            chat_id=owner_id,
                            text=f"üìå –í–∞–º –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –¥—ñ–∞–ª–æ–≥ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user.first_name} (ID: {user_id})."
                        )
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é {owner_id}: {e}")

        elif conversation_type == 'question':
            # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é(—è–º)
            for owner_id in [OWNER_ID_1, OWNER_ID_2]:
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é
                    await context.bot.send_message(
                        chat_id=owner_id,
                        text=f"‚ùì –ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.first_name} (@{user.username or '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}) (ID: {user_id}):\n{message_text}"
                    )
                    # –ù–∞–∑–Ω–∞—á–∞–µ–º —ç—Ç–æ–≥–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω
                    if not assigned_owner:
                        conversation['assigned_owner'] = owner_id
                        owner_client_map[owner_id] = user_id
                        save_active_conversation(user_id, conversation_type, owner_id, message_text)
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
                        await context.bot.send_message(
                            chat_id=owner_id,
                            text=f"üìå –í–∞–º –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –¥—ñ–∞–ª–æ–≥ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user.first_name} (ID: {user_id})."
                        )
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é {owner_id}: {e}")

        elif conversation_type == 'manual':
            # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä—É—á–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /dialog)
            if assigned_owner:
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ–º—É –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é
                    await context.bot.send_message(
                        chat_id=assigned_owner,
                        text=f"üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.first_name} (ID: {user_id}):\n{message_text}"
                    )
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é {assigned_owner}: {e}")
            else:
                # –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await update.message.reply_text("‚ùå –í–∞—à –¥—ñ–∞–ª–æ–≥ —â–µ –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é. –ó–∞—á–µ–∫–∞–π—Ç–µ.")

    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤)"""
        user = update.effective_user
        user_id = user.id
        document = update.message.document

        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        ensure_user_exists(user)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
        if user_id in active_conversations:
            await update.message.reply_text(
                "‚ùó –£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥.\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –ø–∏—Å–∞—Ç–∏ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –¥—ñ–∞–ª–æ–∑—ñ –∞–±–æ –∑–∞–≤–µ—Ä—à—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /stop, "
                "—è–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥."
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if document.mime_type != 'application/json':
            await update.message.reply_text("‚ùå –ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ JSON —Ñ–∞–π–ª–∏.")
            return

        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file = await context.bot.get_file(document.file_id)
            file_bytes = await file.download_as_bytearray()
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON
            order_data = json.loads(file_bytes.decode('utf-8'))

            # –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON (–∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ –≤–∞—à —Ñ–æ—Ä–º–∞—Ç)
            # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, JSON –∏–º–µ–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É: {"order_id": "...", "items": [{"service": "...", "plan": "...", "period": "...", "price_uah": ...}]}
            order_id = order_data.get('order_id', 'N/A')
            items = order_data.get('items', [])

            if not items:
                await update.message.reply_text("‚ùå JSON —Ñ–∞–π–ª –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤.")
                return

            order_lines = [f"üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} (–∑ —Ñ–∞–π–ª—É):"]
            total_uah = 0
            for item in items:
                service = item.get('service', '–ù–µ–≤—ñ–¥–æ–º–æ')
                plan = item.get('plan', '–ù–µ–≤—ñ–¥–æ–º–æ')
                period = item.get('period', '–ù–µ–≤—ñ–¥–æ–º–æ')
                price_uah = item.get('price_uah', 0)
                total_uah += price_uah
                order_lines.append(f"  ‚Ä¢ {service} {plan} ({period}) - {price_uah} UAH")

            order_lines.append(f"üí≥ –í—Å—å–æ–≥–æ: {total_uah} UAH")
            order_text = "\n".join(order_lines)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞ (–ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞)
            conversation_type = 'subscription_order' # –∏–ª–∏ 'digital_order' –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–∫–∞–∑–µ
            active_conversations[user_id] = {
                'type': conversation_type,
                'user_info': user,
                'assigned_owner': None,
                'last_message': order_text,
                'order_details': order_text
            }
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            save_active_conversation(user_id, conversation_type, None, order_text)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            bot_statistics['total_orders'] += 1
            save_stats()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            keyboard = [
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏", callback_data='proceed_to_payment')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            confirmation_text = f"""‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª—É –ø—Ä–∏–π–Ω—è—Ç–æ!
{order_text}
–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é üëá"""
            await update.message.reply_text(confirmation_text.strip(), reply_markup=reply_markup)

        except json.JSONDecodeError:
            await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON —Ñ–∞–π–ª—É.")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON —Ñ–∞–π–ª–∞: {e}")
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É: {e}")

    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(msg="Exception while handling an update:", exc_info=context.error)

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ ---
bot_instance = TelegramBot()

async def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
    try:
        if not WEBHOOK_URL:
            logger.error("‚ùå WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π webhook
        await bot_instance.application.bot.delete_webhook()
        logger.info("üóëÔ∏è –°—Ç–∞—Ä—ã–π webhook —É–¥–∞–ª–µ–Ω")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
        await bot_instance.application.bot.set_webhook(
            url=f"{WEBHOOK_URL}/{BOT_TOKEN}",
            max_connections=100,
            allowed_updates=["message", "callback_query", "chat_member"]
        )
        logger.info(f"üåê Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}/{BOT_TOKEN}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")
        return False

async def start_bot():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    global bot_running
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        init_db()
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        await bot_instance.initialize()
        # –ó–∞–ø—É—Å–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if USE_POLLING:
            await bot_instance.start_polling()
            bot_running = True
            logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ polling —Ä–µ–∂–∏–º–µ")
        else:
            success = await setup_webhook()
            if success:
                bot_running = True
                logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ webhook —Ä–µ–∂–∏–º–µ")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å webhook")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        bot_running = False
        raise

def bot_thread():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    bot_instance.loop = loop
    try:
        loop.run_until_complete(start_bot())
        if USE_POLLING:
            loop.run_forever()
    except Conflict as e:
        logger.error(f"üö® –ö–æ–Ω—Ñ–ª–∏–∫—Ç: {e}")
        logger.warning("üïí –û–∂–∏–¥–∞–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
        time.sleep(30)
        bot_thread()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ bot_thread: {e}")
        logger.warning("üïí –û–∂–∏–¥–∞–µ–º 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º...")
        time.sleep(15)
        bot_thread()
    finally:
        try:
            if not loop.is_closed():
                loop.close()
        except:
            pass
        logger.warning("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –±–æ—Ç–∞...")
        time.sleep(5)
        bot_thread()

# --- Flask handlers ---
@flask_app.route('/health', methods=['GET'])
def health_check():
    return jsonify({'status': 'ok', 'bot_running': bot_running}), 200

@flask_app.route('/stats', methods=['GET'])
def get_stats():
    return jsonify({'stats': bot_statistics}), 200

@flask_app.route(f'/{BOT_TOKEN}', methods=['POST'])
def webhook():
    if USE_POLLING:
        return jsonify({'error': 'Webhook disabled in polling mode'}), 400
    global telegram_app
    if not telegram_app or not bot_instance.initialized:
        logger.error("Telegram app –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return jsonify({'error': 'Bot not initialized'}), 500
    try:
        json_data = request.get_json()
        if json_data:
            update = Update.de_json(json_data, telegram_app.bot)
            # asyncio.run_coroutine_threadsafe(telegram_app.process_update(update), telegram_app.loop)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º loop.call_soon_threadsafe –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            bot_instance.loop.call_soon_threadsafe(
                asyncio.create_task,
                bot_instance.application.process_update(update)
            )
        return jsonify({'status': 'ok'}), 200
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return jsonify({'error': str(e)}), 500

# pass # –ó–∞–≥–ª—É—à–∫–∞, —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞
# --- –ö–æ–Ω–µ—Ü Flask handlers ---

def main():
    # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è Render.com, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    if os.environ.get('RENDER'):
        logger.info("‚è≥ –û–∂–∏–¥–∞–µ–º 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤...")
        time.sleep(10)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    auto_save_thread = threading.Thread(target=auto_save_loop, daemon=True)
    auto_save_thread.start()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_db()

    # –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    from waitress import serve
    flask_thread = threading.Thread(target=lambda: serve(flask_app, host='0.0.0.0', port=PORT))
    flask_thread.daemon = True
    flask_thread.start()
    logger.info(f"üåê Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_t = threading.Thread(target=bot_thread)
    bot_t.daemon = True
    bot_t.start()

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    try:
        while True:
            time.sleep(PING_INTERVAL)
            logger.info("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")

if __name__ == '__main__':
    main()
