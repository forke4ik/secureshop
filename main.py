# main.py (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π)
import logging
import os
import asyncio
import threading
import time
import json
import re
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, User, BotCommandScopeChat
# –ò–º–ø–æ—Ä—Ç BotCommandScopeDefault –¥–æ–±–∞–≤–ª–µ–Ω –∑–¥–µ—Å—å
from telegram.constants import BotCommandScopeDefault
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.error import Conflict
from flask import Flask, request, jsonify, make_response
from flask_cors import CORS
import psycopg
from psycopg.rows import dict_row
import io
from urllib.parse import unquote
import traceback
import requests # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ NOWPayments

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
bot_running = False
bot_lock = threading.Lock()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')
OWNER_ID_1 = 7106925462 # @HiGki2pYYY
OWNER_ID_2 = 6279578957 # @oc33t
PORT = int(os.getenv('PORT', 8443))
WEBHOOK_URL = os.getenv('WEBHOOK_URL', 'https://your-app-url.onrender.com')
PING_INTERVAL = int(os.getenv('PING_INTERVAL', 840)) # 14 –º–∏–Ω—É—Ç
USE_POLLING = os.getenv('USE_POLLING', 'true').lower() == 'true'
DATABASE_URL = os.getenv('DATABASE_URL', 'postgresql://user:password@host:port/dbname')
# - –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è -
NOWPAYMENTS_API_KEY = os.getenv('NOWPAYMENTS_API_KEY') # "FTD5K08-DE94C4F-M9RB0XS-XSGBA26"
EXCHANGE_RATE_UAH_TO_USD = float(os.getenv('EXCHANGE_RATE_UAH_TO_USD', 41.26))
# - –ö–æ–Ω–µ—Ü –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö -
# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏
STATS_FILE = "bot_stats.json"
# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î
BUFFER_FLUSH_INTERVAL = 300 # 5 –º–∏–Ω—É—Ç
BUFFER_MAX_SIZE = 50

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö (–≤ –ø–∞–º—è—Ç–∏, –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)
bot_statistics = {
    'total_orders': 0,
    'total_questions': 0,
    'active_chats': 0,
    'last_reset': datetime.now().isoformat()
}
message_buffer = []
active_conv_buffer = []
user_cache = set()
# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∫—ç—à –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
history_cache = {}
# - –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ/–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –∏ —Å–ø–∏—Å–∫–∏ -
# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç –¥–ª—è NOWPayments (–ø—Ä–æ–≤–µ—Ä–∏–º –∫–æ–¥—ã!)
AVAILABLE_CURRENCIES = {
    "USDT (Solana)": "usdtsol",
    "USDT (TRC20)": "usdttrc20",
    "ETH": "eth",
    "USDT (Arbitrum)": "usdtarb",
    "USDT (Polygon)": "usdtmatic", # –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥
    "USDT (TON)": "usdtton", # –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥
    "AVAX (C-Chain)": "avax",
    "APTOS (APT)": "apt"
}
# - –ö–æ–Ω–µ—Ü –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞—Ä–µ–π -

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–≤ –ø–∞–º—è—Ç–∏, –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)
active_conversations = {} # {user_id: {...}}
owner_client_map = {} # {owner_id: client_id}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
telegram_app = None
flask_app = Flask(__name__)
CORS(flask_app) # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤

# - –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ/–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ -
def get_uah_amount_from_order_text(order_text: str) -> float:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—É–º–º—É –≤ UAH –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑–∞."""
    match = re.search(r'üí≥ –í—Å—å–æ–≥–æ: (\d+) UAH', order_text)
    if match:
        return float(match.group(1))
    return 0.0

def load_stats():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    global bot_statistics
    try:
        with open(STATS_FILE, 'r', encoding='utf-8') as f:
            bot_statistics = json.load(f)
        logger.info("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except FileNotFoundError:
        logger.warning("‚ö†Ô∏è –§–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def save_stats():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–∞–π–ª"""
    try:
        with open(STATS_FILE, 'w', encoding='utf-8') as f:
            json.dump(bot_statistics, f, ensure_ascii=False, indent=4)
        logger.debug("üíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def save_active_conversation(user_id, conversation_type, assigned_owner, last_message):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –≤ –±—É—Ñ–µ—Ä"""
    active_conv_buffer.append({
        'user_id': user_id,
        'conversation_type': conversation_type,
        'assigned_owner': assigned_owner,
        'last_message': last_message
    })
    # –ï—Å–ª–∏ –±—É—Ñ–µ—Ä –ø–æ–ª–Ω—ã–π, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ
    if len(active_conv_buffer) >= BUFFER_MAX_SIZE:
        flush_active_conv_buffer()

def flush_active_conv_buffer():
    """–°–±—Ä–æ—Å –±—É—Ñ–µ—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –≤ –ë–î"""
    global active_conv_buffer
    if not active_conv_buffer:
        return
    try:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ user_id, –æ—Å—Ç–∞–≤–ª—è—è –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
        latest_convs = {}
        for conv in active_conv_buffer:
            latest_convs[conv['user_id']] = conv

        with psycopg.connect(DATABASE_URL) as conn:
            with conn.cursor() as cur:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                cur.execute("""
                    CREATE TEMP TABLE temp_active_convs (
                        user_id BIGINT,
                        conversation_type VARCHAR(50),
                        assigned_owner BIGINT,
                        last_message TEXT
                    ) ON COMMIT DROP;
                """)
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                cur.executemany("""
                    INSERT INTO temp_active_convs (user_id, conversation_type, assigned_owner, last_message)
                    VALUES (%s, %s, %s, %s);
                """, list(latest_convs.values()))
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ –æ—Å–Ω–æ–≤–Ω—É—é
                cur.execute("""
                    INSERT INTO active_conversations (user_id, conversation_type, assigned_owner, last_message)
                    SELECT user_id, conversation_type, assigned_owner, last_message FROM temp_active_convs
                    ON CONFLICT (user_id) DO UPDATE SET
                        conversation_type = EXCLUDED.conversation_type,
                        assigned_owner = EXCLUDED.assigned_owner,
                        last_message = EXCLUDED.last_message,
                        updated_at = CURRENT_TIMESTAMP;
                """)
                conn.commit()
        logger.info(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ ({len(latest_convs)}) —Å–±—Ä–æ—à–µ–Ω—ã –≤ –ë–î")
        active_conv_buffer.clear()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {e}")

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with psycopg.connect(DATABASE_URL) as conn:
            with conn.cursor() as cur:
                # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                cur.execute("""
                    CREATE TABLE IF NOT EXISTS users (
                        id BIGINT PRIMARY KEY,
                        username VARCHAR(255),
                        first_name VARCHAR(255),
                        last_name VARCHAR(255),
                        language_code VARCHAR(10),
                        is_bot BOOLEAN,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    );
                """)
                # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                cur.execute("""
                    CREATE TABLE IF NOT EXISTS messages (
                        id SERIAL PRIMARY KEY,
                        user_id BIGINT REFERENCES users(id),
                        message TEXT,
                        is_from_user BOOLEAN,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    );
                """)
                # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
                cur.execute("""
                    CREATE TABLE IF NOT EXISTS active_conversations (
                        user_id BIGINT PRIMARY KEY REFERENCES users(id),
                        conversation_type VARCHAR(50), -- 'order', 'question', 'manual', 'subscription_order', 'digital_order'
                        assigned_owner BIGINT,
                        last_message TEXT,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    );
                """)
                # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                cur.execute("CREATE INDEX IF NOT EXISTS idx_messages_user_id ON messages(user_id);")
                cur.execute("CREATE INDEX IF NOT EXISTS idx_messages_created_at ON messages(created_at);")
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

def ensure_user_exists(user):
    """–£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)"""
    if user.id in user_cache:
        return
    try:
        with psycopg.connect(DATABASE_URL) as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    INSERT INTO users (id, username, first_name, last_name, language_code, is_bot)
                    VALUES (%s, %s, %s, %s, %s, %s)
                    ON CONFLICT (id) DO UPDATE SET
                        username = EXCLUDED.username,
                        first_name = EXCLUDED.first_name,
                        last_name = EXCLUDED.last_name,
                        language_code = EXCLUDED.language_code,
                        is_bot = EXCLUDED.is_bot,
                        updated_at = CURRENT_TIMESTAMP;
                """, (user.id, user.username, user.first_name, user.last_name, user.language_code, user.is_bot))
                conn.commit()
        user_cache.add(user.id)
        logger.debug(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} ({user.id}) –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω –≤ –ë–î")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")

def save_message(user_id, message, is_from_user):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±—É—Ñ–µ—Ä"""
    message_buffer.append((user_id, message, is_from_user))
    # –ï—Å–ª–∏ –±—É—Ñ–µ—Ä –ø–æ–ª–Ω—ã–π, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ
    if len(message_buffer) >= BUFFER_MAX_SIZE:
        flush_message_buffer()

def flush_message_buffer():
    """–°–±—Ä–æ—Å –±—É—Ñ–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î"""
    global message_buffer
    if not message_buffer:
        return
    try:
        with psycopg.connect(DATABASE_URL) as conn:
            with conn.cursor() as cur:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                cur.execute("""
                    CREATE TEMP TABLE temp_messages (
                        user_id BIGINT,
                        message TEXT,
                        is_from_user BOOLEAN
                    ) ON COMMIT DROP;
                """)
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                cur.executemany("""
                    INSERT INTO temp_messages (user_id, message, is_from_user)
                    VALUES (%s, %s, %s);
                """, message_buffer)
                # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ –æ—Å–Ω–æ–≤–Ω—É—é
                cur.execute("""
                    INSERT INTO messages (user_id, message, is_from_user)
                    SELECT user_id, message, is_from_user FROM temp_messages;
                """)
                conn.commit()
        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è ({len(message_buffer)}) —Å–±—Ä–æ—à–µ–Ω—ã –≤ –ë–î")
        message_buffer.clear()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

class TelegramBot:
    def __init__(self):
        self.application = None
        self.loop = None

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Application"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ Application
            self.application = Application.builder().token(BOT_TOKEN).build()

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            self.application.add_handler(CommandHandler("start", self.start_command))
            self.application.add_handler(CommandHandler("order", self.order_command))
            self.application.add_handler(CommandHandler("question", self.question_command))
            self.application.add_handler(CommandHandler("channel", self.channel_command))
            self.application.add_handler(CommandHandler("stop", self.stop_command))
            self.application.add_handler(CommandHandler("help", self.help_command))
            self.application.add_handler(CommandHandler("stats", self.stats_command))
            self.application.add_handler(CommandHandler("history", self.history_command))
            self.application.add_handler(CommandHandler("chats", self.chats_command))
            self.application.add_handler(CommandHandler("clear", self.clear_command))
            # - –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ -
            self.application.add_handler(CommandHandler("pay", self.pay_command)) # –î–æ–±–∞–≤–ª–µ–Ω–æ
            self.application.add_handler(CommandHandler("dialog", self.continue_dialog_command))
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫
            self.application.add_handler(CallbackQueryHandler(self.button_handler))
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
            self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤)
            self.application.add_handler(MessageHandler(filters.Document.ALL, self.handle_document))
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            self.application.add_error_handler(self.error_handler)
            # - –î–æ–±–∞–≤–ª–µ–Ω–æ: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫ –æ–ø–ª–∞—Ç—ã -
            self.application.add_handler(CallbackQueryHandler(self.payment_callback_handler, pattern='^(pay_|check_payment_status|manual_payment_confirmed|back_to_)'))
            # - –ö–æ–Ω–µ—Ü –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ -

            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
            await self.set_commands_menu()

            logger.info("‚úÖ Telegram Application –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Application: {e}")
            raise

    async def set_commands_menu(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥"""
        owner_commands = [
            BotCommandScopeChat(chat_id=OWNER_ID_1),
            BotCommandScopeChat(chat_id=OWNER_ID_2)
        ]
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º BotCommandScopeDefault –≤–º–µ—Å—Ç–æ BotCommandScopeChat(chat_id='*')
        user_commands = [BotCommandScopeDefault()] # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö

        try:
            # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π
            await self.application.bot.set_my_commands([
                ('start', '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é'),
                ('stop', '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥'),
                ('stats', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞'),
                ('history', '–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å'),
                ('chats', '–ê–∫—Ç–∏–≤–Ω—ñ —á–∞—Ç–∏'),
                ('clear', '–û—á–∏—Å—Ç–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ —á–∞—Ç–∏'),
                ('channel', '–ù–∞—à –∫–∞–Ω–∞–ª'),
                ('help', '–î–æ–ø–æ–º–æ–≥–∞'),
                ('dialog', '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥ (–¥–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π)')
            ], scope=owner_commands[0])

            # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await self.application.bot.set_my_commands([
                ('start', '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é'),
                ('stop', '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥'),
                ('order', '–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'),
                ('question', '–ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è'),
                ('channel', '–ù–∞—à –∫–∞–Ω–∞–ª'),
                ('help', '–î–æ–ø–æ–º–æ–≥–∞'),
                ('pay', '–û–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Å–∞–π—Ç—É')
            ], scope=user_commands[0])

            logger.info("‚úÖ –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥: {e}")

    # - –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ/–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ -
    async def continue_dialog_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /dialog –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ (–¥–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π)"""
        user = update.effective_user
        user_id = user.id

        if user_id not in [OWNER_ID_1, OWNER_ID_2]:
            await update.message.reply_text("‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫–∞–º –º–∞–≥–∞–∑–∏–Ω—É.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
        if user_id in owner_client_map:
            client_id = owner_client_map[user_id]
            client_info = active_conversations.get(client_id, {}).get('user_info')
            if client_info:
                client_name = client_info.first_name
                client_username = client_info.username or "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
                await update.message.reply_text(
                    f"üí¨ –í–∏ –≤–∂–µ –≤–µ–¥–µ—Ç–µ –¥—ñ–∞–ª–æ–≥ –∑ –∫–ª—ñ—î–Ω—Ç–æ–º {client_name} (@{client_username})."
                    f"\n–ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏."
                )
                return
            else:
                # –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ –ø–æ—Ç–µ—Ä—è–Ω–∞, –æ—á–∏—â–∞–µ–º —Å–≤—è–∑—å
                del owner_client_map[user_id]

        # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        active_orders = {k: v for k, v in active_conversations.items() if v.get('type') in ['order', 'subscription_order', 'digital_order', 'manual']}
        active_questions = {k: v for k, v in active_conversations.items() if v.get('type') == 'question'}

        if not active_orders and not active_questions:
            await update.message.reply_text("üì≠ –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥—ñ–∞–ª–æ–≥—ñ–≤.")
            return

        keyboard = []
        for client_id, conv_data in {**active_orders, **active_questions}.items():
            client_info = conv_data.get('user_info')
            if client_info:
                conv_type = "üõçÔ∏è" if conv_data.get('type') in ['order', 'subscription_order', 'digital_order', 'manual'] else "‚ùì"
                button_text = f"{conv_type} {client_info.first_name}"
                if client_info.username:
                    button_text += f" (@{client_info.username})"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=f'dialog_{client_id}')])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("üí¨ –û–±–µ—Ä—ñ—Ç—å –¥—ñ–∞–ª–æ–≥ –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è:", reply_markup=reply_markup)

    async def pay_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pay –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ —Å —Å–∞–π—Ç–∞ –∏–ª–∏ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞"""
        user = update.effective_user
        user_id = user.id
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        ensure_user_exists(user)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if not context.args:
            # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
            if user_id in active_conversations and 'order_details' in active_conversations[user_id]:
                order_text = active_conversations[user_id]['order_details']
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –≤ UAH
                uah_amount = get_uah_amount_from_order_text(order_text)
                if uah_amount > 0:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    context.user_data['pending_order_details'] = order_text
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –æ–ø–ª–∞—Ç—ã
                    await self.proceed_to_payment(update, context, uah_amount)
                    return
                else:
                    await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Å—É–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
                    return
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /pay <order_id> <—Ç–æ–≤–∞—Ä1> <—Ç–æ–≤–∞—Ä2> ... "
                    "–∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ü—é –∫–æ–º–∞–Ω–¥—É –ø—ñ—Å–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –±–æ—Ç—ñ."
                )
                return
        else:
            # –ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç - ID –∑–∞–∫–∞–∑–∞
            order_id = context.args[0]
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
            items_str = " ".join(context.args[1:])

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
            # –§–æ—Ä–º–∞—Ç: <ServiceAbbr>-<PlanAbbr>-<Period>-<Price>
            # –î–ª—è Discord –ü—Ä–∏–∫—Ä–∞—Å–∏: DisU-BzN-6$-180
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: Dis-Ful-1–º-170
            pattern = r'(\w{2,4})-(\w{2,4})-([\w\s$]+?)-(\d+)'
            items = re.findall(pattern, items_str)

            if not items:
                await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏ —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")
                return

            # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
            # –°–µ—Ä–≤–∏—Å—ã
            service_map = {
                "Cha": "ChatGPT",
                "Dis": "Discord",
                "Duo": "Duolingo",
                "Pic": "PicsArt",
                "Can": "Canva",
                "Net": "Netflix",
                "DisU": "Discord –ü—Ä–∏–∫—Ä–∞—Å–∏" # –û–±–Ω–æ–≤–ª–µ–Ω–æ: –£–∫—Ä–∞—à–µ–Ω–Ω—è -> –ü—Ä–∏–∫—Ä–∞—Å–∏
            }
            # –ü–ª–∞–Ω—ã
            plan_map = {
                "Bas": "Basic",
                "Ful": "Full",
                "Ind": "Individual",
                "Fam": "Family",
                "Plu": "Plus",
                "Pro": "Pro",
                "Pre": "Premium",
                "BzN": "–ë–µ–∑ Nitro", # –î–ª—è –ø—Ä–∏–∫—Ä–∞—Å
                "ZN": "–ó Nitro" # –î–ª—è –ø—Ä–∏–∫—Ä–∞—Å
            }

            total = 0
            order_details = [] # –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Ä–≤–∏—Å–∞
            has_digital = False

            for item in items:
                service_abbr = item[0]
                plan_abbr = item[1]
                period = item[2].strip() # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                price = item[3]

                service_name = service_map.get(service_abbr, service_abbr)
                plan_name = plan_map.get(plan_abbr, plan_abbr)

                try:
                    price_num = int(price)
                    total += price_num
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Ä–≤–∏—Å–∞
                    if "–ü—Ä–∏–∫—Ä–∞—Å–∏" in service_name:
                        has_digital = True
                    order_details.append(f"‚ñ´Ô∏è {service_name} {plan_name} ({period}) - {price_num} UAH")
                except ValueError:
                    await update.message.reply_text(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Ü—ñ–Ω–∞ –¥–ª—è —Ç–æ–≤–∞—Ä—É: {service_abbr}-{plan_abbr}-{period}-{price}")
                    return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
            order_text = f"üõçÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Å–∞–π—Ç—É (#{order_id}):\n"
            order_text += "\n".join(order_details)
            order_text += f"\nüí≥ –í—Å—å–æ–≥–æ: {total} UAH"

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
            conversation_type = 'digital_order' if has_digital else 'subscription_order'
            active_conversations[user_id] = {
                'type': conversation_type,
                'user_info': user,
                'assigned_owner': None,
                'order_details': order_text,
                'last_message': order_text
            }
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            save_active_conversation(user_id, conversation_type, None, order_text)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            bot_statistics['total_orders'] += 1
            save_stats()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            keyboard = [
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏", callback_data='proceed_to_payment')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            confirmation_text = f"""‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ!\n{order_text}\n–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é üëá"""
            await update.message.reply_text(confirmation_text.strip(), reply_markup=reply_markup)

    # - –ö–æ–Ω–µ—Ü –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö/–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ -

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        user_id = user.id
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        ensure_user_exists(user)

        keyboard = [
            [InlineKeyboardButton("üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data='order')],
            [InlineKeyboardButton("‚ùì –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')],
            [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        welcome_text = f"""üëã –î–æ–±—Ä–æ–≥–æ –¥–Ω—è, {user.first_name}!
ü§ñ –¶–µ –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω—É SecureShop.
–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –∑–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –∑–∞—Å–Ω–æ–≤–Ω–∏–∫–∞–º –º–∞–≥–∞–∑–∏–Ω—É.
–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ üëá"""
        await update.message.reply_text(welcome_text.strip(), reply_markup=reply_markup)

    async def order_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /order - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        keyboard = [
            [InlineKeyboardButton("üí≥ –ü—ñ–¥–ø–∏—Å–∫–∏", callback_data='order_subscriptions')],
            [InlineKeyboardButton("üéÆ –¶–∏—Ñ—Ä–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏", callback_data='order_digital')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        await update.message.reply_text("üì¶ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç–æ–≤–∞—Ä—É:", reply_markup=InlineKeyboardMarkup(keyboard))

    async def question_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /question"""
        user = update.effective_user
        user_id = user.id
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        ensure_user_exists(user)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
        if user_id in active_conversations:
            await update.message.reply_text(
                "‚ùó –£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥."
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –ø–∏—Å–∞—Ç–∏ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –¥—ñ–∞–ª–æ–∑—ñ –∞–±–æ –∑–∞–≤–µ—Ä—à—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /stop, "
                "—è–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥."
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤–æ–ø—Ä–æ—Å–µ
        active_conversations[user_id] = {
            'type': 'question',
            'user_info': user,
            'assigned_owner': None,
            'last_message': "–ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è"
        }
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        save_active_conversation(user_id, 'question', None, "–ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        bot_statistics['total_questions'] += 1
        save_stats()

        await update.message.reply_text(
            "üìù –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. –Ø –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫—É –º–∞–≥–∞–∑–∏–Ω—É."
            "–©–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ü–µ–π –¥—ñ–∞–ª–æ–≥ –ø—ñ–∑–Ω—ñ—à–µ, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop."
        )

    async def channel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ"""
        channel_text = """üì¢ –ù–∞—à –∫–∞–Ω–∞–ª: @SecureShopChannel
–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏:
- –ê—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä—ñ–≤
- –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–∞–≥–∞–∑–∏–Ω—É
- –†–æ–∑—ñ–≥—Ä–∞—à—ñ —Ç–∞ –∞–∫—Ü—ñ—ó
–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å, —â–æ–± –±—É—Ç–∏ –≤ –∫—É—Ä—Å—ñ –≤—Å—ñ—Ö –Ω–æ–≤–∏–Ω!"""
        await update.message.reply_text(channel_text)

    async def stop_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞"""
        user = update.effective_user
        user_id = user.id
        user_name = user.first_name

        # –î–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
        if user_id in [OWNER_ID_1, OWNER_ID_2] and user_id in owner_client_map:
            client_id = owner_client_map[user_id]
            client_info = active_conversations.get(client_id, {}).get('user_info')
            # –£–¥–∞–ª—è–µ–º –¥–∏–∞–ª–æ–≥ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö (–≤ –ø–∞–º—è—Ç–∏)
            if client_id in active_conversations:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                order_details = active_conversations[client_id].get('order_details', '')
                del active_conversations[client_id]
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                save_active_conversation(client_id, None, None, None) # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å –≤–ª–∞–¥–µ–ª–µ—Ü-–∫–ª–∏–µ–Ω—Ç
            del owner_client_map[user_id]
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            bot_statistics['active_chats'] = max(0, bot_statistics['active_chats'] - 1)
            save_stats()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é
            await update.message.reply_text("‚úÖ –î—ñ–∞–ª–æ–≥ —ñ–∑ –∫–ª—ñ—î–Ω—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
            if client_info:
                try:
                    keyboard = [
                        [InlineKeyboardButton("üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data='order')],
                        [InlineKeyboardButton("‚ùì –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')],
                        [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    confirmation_text = "‚úÖ –í–∞—à –¥—ñ–∞–ª–æ–≥ —ñ–∑ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫–æ–º –º–∞–≥–∞–∑–∏–Ω—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ."
                    await context.bot.send_message(chat_id=client_id, text=confirmation_text, reply_markup=reply_markup)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {client_id}: {e}")
            return

        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞
        if user_id in active_conversations:
            conversation_type = active_conversations[user_id].get('type', 'unknown')
            # –£–¥–∞–ª—è–µ–º –¥–∏–∞–ª–æ–≥ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö (–≤ –ø–∞–º—è—Ç–∏)
            del active_conversations[user_id]
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            save_active_conversation(user_id, None, None, None) # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            bot_statistics['active_chats'] = max(0, bot_statistics['active_chats'] - 1)
            save_stats()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if conversation_type in ['order', 'subscription_order', 'digital_order', 'manual']:
                confirmation_text = "‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ! –ó–∞—Å–Ω–æ–≤–Ω–∏–∫ –º–∞–≥–∞–∑–∏–Ω—É –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
            elif conversation_type == 'question':
                confirmation_text = "‚úÖ –í–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ! –ó–∞—Å–Ω–æ–≤–Ω–∏–∫ –º–∞–≥–∞–∑–∏–Ω—É –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
            else:
                confirmation_text = "‚úÖ –î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ."

            keyboard = [
                [InlineKeyboardButton("üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data='order')],
                [InlineKeyboardButton("‚ùì –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')],
                [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(confirmation_text, reply_markup=reply_markup)
        else:
            await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É.")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ"""
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏
        if isinstance(update, Update):
            message = update.message
        else:
            message = update # –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ –∫–Ω–æ–ø–∫–∏

        help_text = f"""üëã –î–æ–±—Ä–æ–≥–æ –¥–Ω—è! –Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω—É SecureShop.
ü§ñ –Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω—É SecureShop.

üìå –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:
/start - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
/order - –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
/question - –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
/channel - –ù–∞—à –∫–∞–Ω–∞–ª –∑ –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏ —Ç–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞–º–∏
/stop - –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –¥—ñ–∞–ª–æ–≥
/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞
üí¨ –Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è, –Ω–µ —Å–æ—Ä–æ–º—Ç–µ—Å—è –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è!"""
        await message.reply_text(help_text.strip())

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞ (–¥–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π)"""
        user_id = update.effective_user.id
        if user_id not in [OWNER_ID_1, OWNER_ID_2]:
            await update.message.reply_text("‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫–∞–º –º–∞–≥–∞–∑–∏–Ω—É.")
            return

        load_stats() # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ñ–∞–π–ª–∞
        stats_text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:
üì¶ –í—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å: {bot_statistics['total_orders']}
‚ùì –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Ç–∞–Ω—å: {bot_statistics['total_questions']}
üí¨ –ê–∫—Ç–∏–≤–Ω–∏—Ö —á–∞—Ç—ñ–≤: {bot_statistics['active_chats']}
üïí –û—Å—Ç–∞–Ω–Ω—î —Å–∫–∏–¥–∞–Ω–Ω—è: {bot_statistics['last_reset']}"""
        await update.message.reply_text(stats_text)

    async def history_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–¥–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π)"""
        user_id = update.effective_user.id
        if user_id not in [OWNER_ID_1, OWNER_ID_2]:
            await update.message.reply_text("‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫–∞–º –º–∞–≥–∞–∑–∏–Ω—É.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
        if user_id not in owner_client_map:
            await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É.")
            return

        client_id = owner_client_map[user_id]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if client_id in history_cache:
            messages = history_cache[client_id]
        else:
            try:
                with psycopg.connect(DATABASE_URL) as conn:
                    with conn.cursor(row_factory=dict_row) as cur:
                        cur.execute("""
                            SELECT message, is_from_user, created_at
                            FROM messages
                            WHERE user_id = %s
                            ORDER BY created_at ASC
                        """, (client_id,))
                        messages = cur.fetchall()
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                history_cache[client_id] = messages
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è {client_id}: {e}")
                await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó.")
                return

        if not messages:
            await update.message.reply_text("üì≠ –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–æ—Ä–æ–∂–Ω—è.")
            return

        history_text = "üìú –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:\n\n"
        for msg in messages[-20:]: # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
            sender = "üë§ –ö–ª—ñ—î–Ω—Ç" if msg['is_from_user'] else "ü§ñ –ë–æ—Ç"
            timestamp = msg['created_at'].strftime('%Y-%m-%d %H:%M:%S')
            history_text += f"[{timestamp}] {sender}: {msg['message']}\n\n"

        await update.message.reply_text(history_text, parse_mode='Markdown')

    async def chats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ (–¥–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π)"""
        user_id = update.effective_user.id
        if user_id not in [OWNER_ID_1, OWNER_ID_2]:
            await update.message.reply_text("‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫–∞–º –º–∞–≥–∞–∑–∏–Ω—É.")
            return

        active_orders = {k: v for k, v in active_conversations.items() if v.get('type') in ['order', 'subscription_order', 'digital_order', 'manual']}
        active_questions = {k: v for k, v in active_conversations.items() if v.get('type') == 'question'}

        if not active_orders and not active_questions:
            await update.message.reply_text("üì≠ –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —á–∞—Ç—ñ–≤.")
            return

        chats_text = "üí¨ –ê–∫—Ç–∏–≤–Ω—ñ —á–∞—Ç–∏:\n\n"
        if active_orders:
            chats_text += "üõçÔ∏è –ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n"
            for client_id, conv_data in active_orders.items():
                client_info = conv_data.get('user_info')
                if client_info:
                    assigned_owner = conv_data.get('assigned_owner')
                    owner_mark = " (üîπ)" if assigned_owner == OWNER_ID_1 else " (üî∏)" if assigned_owner == OWNER_ID_2 else ""
                    chats_text += f"- {client_info.first_name} (@{client_info.username or '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}) {owner_mark}\n"
            chats_text += "\n"
        if active_questions:
            chats_text += "‚ùì –ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:\n"
            for client_id, conv_data in active_questions.items():
                client_info = conv_data.get('user_info')
                if client_info:
                    assigned_owner = conv_data.get('assigned_owner')
                    owner_mark = " (üîπ)" if assigned_owner == OWNER_ID_1 else " (üî∏)" if assigned_owner == OWNER_ID_2 else ""
                    chats_text += f"- {client_info.first_name} (@{client_info.username or '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}) {owner_mark}\n"

        await update.message.reply_text(chats_text)

    async def clear_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ (–¥–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π)"""
        user_id = update.effective_user.id
        if user_id not in [OWNER_ID_1, OWNER_ID_2]:
            await update.message.reply_text("‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫–∞–º –º–∞–≥–∞–∑–∏–Ω—É.")
            return

        global active_conversations, owner_client_map
        active_conversations.clear()
        owner_client_map.clear()
        # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
        active_conv_buffer.clear()
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        bot_statistics['active_chats'] = 0
        bot_statistics['last_reset'] = datetime.now().isoformat()
        save_stats()
        await update.message.reply_text("‚úÖ –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö —á–∞—Ç—ñ–≤ –æ—á–∏—â–µ–Ω–æ.")

    # - –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ/–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫ -
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        user = query.from_user
        user_id = user.id
        data = query.data

        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        ensure_user_exists(user)

        await query.answer()

        # –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if data == 'back_to_main':
            keyboard = [
                [InlineKeyboardButton("üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data='order')],
                [InlineKeyboardButton("‚ùì –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')],
                [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
            ]
            await query.edit_message_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=InlineKeyboardMarkup(keyboard))

        # –ú–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤
        elif data == 'order':
            keyboard = [
                [InlineKeyboardButton("üí≥ –ü—ñ–¥–ø–∏—Å–∫–∏", callback_data='order_subscriptions')],
                [InlineKeyboardButton("üéÆ –¶–∏—Ñ—Ä–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏", callback_data='order_digital')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
            ]
            await query.edit_message_text("üì¶ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç–æ–≤–∞—Ä—É:", reply_markup=InlineKeyboardMarkup(keyboard))

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        elif data == 'back_to_main':
            keyboard = [
                [InlineKeyboardButton("üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data='order')],
                [InlineKeyboardButton("‚ùì –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')],
                [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
            ]
            await query.edit_message_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=InlineKeyboardMarkup(keyboard))

        # –ú–µ–Ω—é –ü—ñ–¥–ø–∏—Å–æ–∫
        elif data == 'order_subscriptions':
            keyboard = [
                [InlineKeyboardButton("üí¨ ChatGPT Plus", callback_data='category_chatgpt')],
                [InlineKeyboardButton("üéÆ Discord Nitro", callback_data='category_discord')],
                [InlineKeyboardButton("üéì Duolingo Max", callback_data='category_duolingo')],
                [InlineKeyboardButton("üé® Picsart AI", callback_data='category_picsart')],
                [InlineKeyboardButton("üìä Canva Pro", callback_data='category_canva')],
                [InlineKeyboardButton("üì∫ Netflix", callback_data='category_netflix')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order')]
            ]
            await query.edit_message_text("üí≥ –û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É:", reply_markup=InlineKeyboardMarkup(keyboard))

        # –ú–µ–Ω—é –¶–∏—Ñ—Ä–æ–≤–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
        elif data == 'order_digital':
            keyboard = [
                [InlineKeyboardButton("üéÆ Discord –ü—Ä–∏–∫—Ä–∞—Å–∏", callback_data='category_discord_decor')], # –û–±–Ω–æ–≤–ª–µ–Ω–æ
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order')]
            ]
            await query.edit_message_text("üéÆ –û–±–µ—Ä—ñ—Ç—å —Ü–∏—Ñ—Ä–æ–≤–∏–π —Ç–æ–≤–∞—Ä:", reply_markup=InlineKeyboardMarkup(keyboard)) # –û–±–Ω–æ–≤–ª–µ–Ω–æ

        # - –ú–µ–Ω—é –ü—ñ–¥–ø–∏—Å–æ–∫ -
        # –ú–µ–Ω—é ChatGPT
        elif data == 'category_chatgpt':
            keyboard = [
                [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 650 UAH", callback_data='chatgpt_1')],
                [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 6500 UAH", callback_data='chatgpt_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order_subscriptions')]
            ]
            await query.edit_message_text("üí¨ –û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç ChatGPT Plus:", reply_markup=InlineKeyboardMarkup(keyboard))

        # –ü–æ–¥–º–µ–Ω—é ChatGPT Individual
        elif data == 'chatgpt_ind':
            keyboard = [
                [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 650 UAH", callback_data='chatgpt_ind_1')],
                [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 6500 UAH", callback_data='chatgpt_ind_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='category_chatgpt')]
            ]
            await query.edit_message_text("üí¨ ChatGPT Plus (Individual):", reply_markup=InlineKeyboardMarkup(keyboard))

        # –ü–æ–¥–º–µ–Ω—é ChatGPT Team
        elif data == 'chatgpt_team':
            keyboard = [
                [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 950 UAH", callback_data='chatgpt_team_1')],
                [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 9500 UAH", callback_data='chatgpt_team_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='category_chatgpt')]
            ]
            await query.edit_message_text("üí¨ ChatGPT Plus (Team):", reply_markup=InlineKeyboardMarkup(keyboard))

        # –ú–µ–Ω—é Discord
        elif data == 'category_discord':
            keyboard = [
                [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 170 UAH", callback_data='discord_1')],
                [InlineKeyboardButton("3 –º—ñ—Å—è—Ü—ñ - 470 UAH", callback_data='discord_3')],
                [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 1700 UAH", callback_data='discord_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order_subscriptions')]
            ]
            await query.edit_message_text("üéÆ –û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç Discord Nitro:", reply_markup=InlineKeyboardMarkup(keyboard))

        # –ú–µ–Ω—é Duolingo
        elif data == 'category_duolingo':
            keyboard = [
                [InlineKeyboardButton("üéì Duolingo Individual", callback_data='duolingo_ind')],
                [InlineKeyboardButton("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Duolingo Family", callback_data='duolingo_fam')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order_subscriptions')]
            ]
            await query.edit_message_text("üéì –û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç Duolingo Max:", reply_markup=InlineKeyboardMarkup(keyboard))

        # –ü–æ–¥–º–µ–Ω—é Duolingo Individual
        elif data == 'duolingo_ind':
            keyboard = [
                [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 550 UAH", callback_data='duolingo_ind_1')],
                [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 5500 UAH", callback_data='duolingo_ind_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='category_duolingo')]
            ]
            await query.edit_message_text("üéì Duolingo Max (Individual):", reply_markup=InlineKeyboardMarkup(keyboard))

        # –ü–æ–¥–º–µ–Ω—é Duolingo Family
        elif data == 'duolingo_fam':
            keyboard = [
                [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 850 UAH", callback_data='duolingo_fam_1')],
                [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 8500 UAH", callback_data='duolingo_fam_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='category_duolingo')]
            ]
            await query.edit_message_text("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Duolingo Max (Family):", reply_markup=InlineKeyboardMarkup(keyboard))

        # –ú–µ–Ω—é Picsart
        elif data == 'category_picsart':
            keyboard = [
                [InlineKeyboardButton("üé® Picsart Plus", callback_data='picsart_plus')],
                [InlineKeyboardButton("üñºÔ∏è Picsart Pro", callback_data='picsart_pro')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order_subscriptions')]
            ]
            await query.edit_message_text("üé® –û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç Picsart AI:", reply_markup=InlineKeyboardMarkup(keyboard))

        # –ü–æ–¥–º–µ–Ω—é Picsart Plus
        elif data == 'picsart_plus':
            keyboard = [
                [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 400 UAH", callback_data='picsart_plus_1')],
                [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 4000 UAH", callback_data='picsart_plus_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='category_picsart')]
            ]
            await query.edit_message_text("üé® Picsart AI Plus:", reply_markup=InlineKeyboardMarkup(keyboard))

        # –ü–æ–¥–º–µ–Ω—é Picsart Pro
        elif data == 'picsart_pro':
            keyboard = [
                [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 600 UAH", callback_data='picsart_pro_1')],
                [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 6000 UAH", callback_data='picsart_pro_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='category_picsart')]
            ]
            await query.edit_message_text("üñºÔ∏è Picsart AI Pro:", reply_markup=InlineKeyboardMarkup(keyboard))

        # –ú–µ–Ω—é Canva
        elif data == 'category_canva':
            keyboard = [
                [InlineKeyboardButton("üìä Canva Pro Individual", callback_data='canva_pro_ind')],
                [InlineKeyboardButton("üè¢ Canva Pro Team", callback_data='canva_pro_team')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order_subscriptions')]
            ]
            await query.edit_message_text("üìä –û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç Canva Pro:", reply_markup=InlineKeyboardMarkup(keyboard))

        # –ü–æ–¥–º–µ–Ω—é Canva Pro Individual
        elif data == 'canva_pro_ind':
            keyboard = [
                [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 450 UAH", callback_data='canva_pro_ind_1')],
                [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 4500 UAH", callback_data='canva_pro_ind_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='category_canva')]
            ]
            await query.edit_message_text("üìä Canva Pro (Individual):", reply_markup=InlineKeyboardMarkup(keyboard))

        # –ü–æ–¥–º–µ–Ω—é Canva Pro Team
        elif data == 'canva_pro_team':
            keyboard = [
                [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 750 UAH", callback_data='canva_pro_team_1')],
                [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 7500 UAH", callback_data='canva_pro_team_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='category_canva')]
            ]
            await query.edit_message_text("üè¢ Canva Pro (Team):", reply_markup=InlineKeyboardMarkup(keyboard))

        # –ú–µ–Ω—é Netflix
        elif data == 'category_netflix':
            keyboard = [
                [InlineKeyboardButton("üì± Netflix Mobile", callback_data='netflix_mobile')],
                [InlineKeyboardButton("üíª Netflix Basic", callback_data='netflix_basic')],
                [InlineKeyboardButton("üì∫ Netflix Standard", callback_data='netflix_standard')],
                [InlineKeyboardButton("üé¨ Netflix Premium", callback_data='netflix_premium')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order_subscriptions')]
            ]
            await query.edit_message_text("üì∫ –û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç Netflix:", reply_markup=InlineKeyboardMarkup(keyboard))

        # –ü–æ–¥–º–µ–Ω—é Netflix Mobile
        elif data == 'netflix_mobile':
            keyboard = [
                [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 350 UAH", callback_data='netflix_mobile_1')],
                [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 3500 UAH", callback_data='netflix_mobile_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='category_netflix')]
            ]
            await query.edit_message_text("üì± Netflix Mobile:", reply_markup=InlineKeyboardMarkup(keyboard))

        # –ü–æ–¥–º–µ–Ω—é Netflix Basic
        elif data == 'netflix_basic':
            keyboard = [
                [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 450 UAH", callback_data='netflix_basic_1')],
                [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 4500 UAH", callback_data='netflix_basic_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='category_netflix')]
            ]
            await query.edit_message_text("üíª Netflix Basic:", reply_markup=InlineKeyboardMarkup(keyboard))

        # –ü–æ–¥–º–µ–Ω—é Netflix Standard
        elif data == 'netflix_standard':
            keyboard = [
                [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 550 UAH", callback_data='netflix_standard_1')],
                [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 5500 UAH", callback_data='netflix_standard_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='category_netflix')]
            ]
            await query.edit_message_text("üì∫ Netflix Standard:", reply_markup=InlineKeyboardMarkup(keyboard))

        # –ü–æ–¥–º–µ–Ω—é Netflix Premium
        elif data == 'netflix_premium':
            keyboard = [
                [InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å - 650 UAH", callback_data='netflix_premium_1')],
                [InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤ - 6500 UAH", callback_data='netflix_premium_12')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='category_netflix')]
            ]
            await query.edit_message_text("üé¨ Netflix Premium:", reply_markup=InlineKeyboardMarkup(keyboard))

        # - –ú–µ–Ω—é –¶–∏—Ñ—Ä–æ–≤–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ -
        # –ú–µ–Ω—é Discord –ü—Ä–∏–∫—Ä–∞—Å–∏
        elif data == 'category_discord_decor':
            keyboard = [
                [InlineKeyboardButton("üéÆ Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ (–ë–µ–∑ Nitro)", callback_data='discord_decor_without_nitro')],
                [InlineKeyboardButton("üéÆ Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ (–ó Nitro)", callback_data='discord_decor_with_nitro')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='order_digital')]
            ]
            await query.edit_message_text("üéÆ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—Ä–∏–∫—Ä–∞—Å–∏ Discord:", reply_markup=InlineKeyboardMarkup(keyboard)) # –û–±–Ω–æ–≤–ª–µ–Ω–æ

        # –ü–æ–¥–º–µ–Ω—é Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ –ë–µ–∑ Nitro
        elif data == 'discord_decor_without_nitro':
            keyboard = [
                [InlineKeyboardButton("6$ - 180 UAH", callback_data='discord_decor_bzn_6')],
                [InlineKeyboardButton("8$ - 240 UAH", callback_data='discord_decor_bzn_8')],
                [InlineKeyboardButton("9$ - 265 UAH", callback_data='discord_decor_bzn_9')],
                [InlineKeyboardButton("12$ - 355 UAH", callback_data='discord_decor_bzn_12')],
                [InlineKeyboardButton("18$ - 530 UAH", callback_data='discord_decor_bzn_18')],
                [InlineKeyboardButton("24$ - 705 UAH", callback_data='discord_decor_bzn_24')],
                [InlineKeyboardButton("29$ - 855 UAH", callback_data='discord_decor_bzn_29')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='category_discord_decor')]
            ]
            await query.edit_message_text("üéÆ –û–±–µ—Ä—ñ—Ç—å –ø—Ä–∏–∫—Ä–∞—Å–∏ Discord (–ë–µ–∑ Nitro):", reply_markup=InlineKeyboardMarkup(keyboard))

        # –ü–æ–¥–º–µ–Ω—é Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ –ó Nitro
        elif data == 'discord_decor_with_nitro':
            keyboard = [
                [InlineKeyboardButton("5$ - 145 UAH", callback_data='discord_decor_zn_5')],
                [InlineKeyboardButton("7$ - 205 UAH", callback_data='discord_decor_zn_7')],
                [InlineKeyboardButton("8.5$ - 250 UAH", callback_data='discord_decor_zn_8_5')],
                [InlineKeyboardButton("9$ - 265 UAH", callback_data='discord_decor_zn_9')],
                [InlineKeyboardButton("14$ - 410 UAH", callback_data='discord_decor_zn_14')],
                [InlineKeyboardButton("22$ - 650 UAH", callback_data='discord_decor_zn_22')],
                [InlineKeyboardButton("25$ - 740 UAH", callback_data='discord_decor_zn_25')],
                [InlineKeyboardButton("30$ - 885 UAH", callback_data='discord_decor_zn_30')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='category_discord_decor')]
            ]
            await query.edit_message_text("üéÆ –û–±–µ—Ä—ñ—Ç—å –ø—Ä–∏–∫—Ä–∞—Å–∏ Discord (–ó Nitro):", reply_markup=InlineKeyboardMarkup(keyboard))

        # - –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ -
        # ChatGPT
        elif data.startswith('chatgpt_'):
            plan = "ChatGPT Plus"
            period_map = {'1': '1 –º—ñ—Å—è—Ü—å', '12': '12 –º—ñ—Å—è—Ü—ñ–≤'}
            price_map = {'1': 650, '12': 6500}
            period_key = data.split('_')[-1]
            period = period_map.get(period_key, period_key)
            price = price_map.get(period_key, 0)
            selected_item = f"chatgpt_{period_key}"
            item = {'name': f"{plan} ({period})", 'price': price}
            await self.process_order_selection(query, user, selected_item, item)

        # Discord
        elif data.startswith('discord_'):
            plan = "Discord Nitro"
            period_map = {'1': '1 –º—ñ—Å—è—Ü—å', '3': '3 –º—ñ—Å—è—Ü—ñ', '12': '12 –º—ñ—Å—è—Ü—ñ–≤'}
            price_map = {'1': 170, '3': 470, '12': 1700}
            period_key = data.split('_')[-1]
            period = period_map.get(period_key, period_key)
            price = price_map.get(period_key, 0)
            selected_item = f"discord_{period_key}"
            item = {'name': f"{plan} ({period})", 'price': price}
            await self.process_order_selection(query, user, selected_item, item)

        # Duolingo Individual
        elif data.startswith('duolingo_ind_'):
            plan = "Duolingo Max (Individual)"
            period_map = {'1': '1 –º—ñ—Å—è—Ü—å', '12': '12 –º—ñ—Å—è—Ü—ñ–≤'}
            price_map = {'1': 550, '12': 5500}
            period_key = data.split('_')[-1]
            period = period_map.get(period_key, period_key)
            price = price_map.get(period_key, 0)
            selected_item = f"duolingo_ind_{period_key}"
            item = {'name': f"{plan} ({period})", 'price': price}
            await self.process_order_selection(query, user, selected_item, item)

        # Duolingo Family
        elif data.startswith('duolingo_fam_'):
            plan = "Duolingo Max (Family)"
            period_map = {'1': '1 –º—ñ—Å—è—Ü—å', '12': '12 –º—ñ—Å—è—Ü—ñ–≤'}
            price_map = {'1': 850, '12': 8500}
            period_key = data.split('_')[-1]
            period = period_map.get(period_key, period_key)
            price = price_map.get(period_key, 0)
            selected_item = f"duolingo_fam_{period_key}"
            item = {'name': f"{plan} ({period})", 'price': price}
            await self.process_order_selection(query, user, selected_item, item)

        # Picsart Plus
        elif data.startswith('picsart_plus_'):
            plan = "Picsart AI Plus"
            period_map = {'1': '1 –º—ñ—Å—è—Ü—å', '12': '12 –º—ñ—Å—è—Ü—ñ–≤'}
            price_map = {'1': 400, '12': 4000}
            period_key = data.split('_')[-1]
            period = period_map.get(period_key, period_key)
            price = price_map.get(period_key, 0)
            selected_item = f"picsart_plus_{period_key}"
            item = {'name': f"{plan} ({period})", 'price': price}
            await self.process_order_selection(query, user, selected_item, item)

        # Picsart Pro
        elif data.startswith('picsart_pro_'):
            plan = "Picsart AI Pro"
            period_map = {'1': '1 –º—ñ—Å—è—Ü—å', '12': '12 –º—ñ—Å—è—Ü—ñ–≤'}
            price_map = {'1': 600, '12': 6000}
            period_key = data.split('_')[-1]
            period = period_map.get(period_key, period_key)
            price = price_map.get(period_key, 0)
            selected_item = f"picsart_pro_{period_key}"
            item = {'name': f"{plan} ({period})", 'price': price}
            await self.process_order_selection(query, user, selected_item, item)

        # Canva Pro Individual
        elif data.startswith('canva_pro_ind_'):
            plan = "Canva Pro (Individual)"
            period_map = {'1': '1 –º—ñ—Å—è—Ü—å', '12': '12 –º—ñ—Å—è—Ü—ñ–≤'}
            price_map = {'1': 450, '12': 4500}
            period_key = data.split('_')[-1]
            period = period_map.get(period_key, period_key)
            price = price_map.get(period_key, 0)
            selected_item = f"canva_pro_ind_{period_key}"
            item = {'name': f"{plan} ({period})", 'price': price}
            await self.process_order_selection(query, user, selected_item, item)

        # Canva Pro Team
        elif data.startswith('canva_pro_team_'):
            plan = "Canva Pro (Team)"
            period_map = {'1': '1 –º—ñ—Å—è—Ü—å', '12': '12 –º—ñ—Å—è—Ü—ñ–≤'}
            price_map = {'1': 750, '12': 7500}
            period_key = data.split('_')[-1]
            period = period_map.get(period_key, period_key)
            price = price_map.get(period_key, 0)
            selected_item = f"canva_pro_team_{period_key}"
            item = {'name': f"{plan} ({period})", 'price': price}
            await self.process_order_selection(query, user, selected_item, item)

        # Netflix Mobile
        elif data.startswith('netflix_mobile_'):
            plan = "Netflix Mobile"
            period_map = {'1': '1 –º—ñ—Å—è—Ü—å', '12': '12 –º—ñ—Å—è—Ü—ñ–≤'}
            price_map = {'1': 350, '12': 3500}
            period_key = data.split('_')[-1]
            period = period_map.get(period_key, period_key)
            price = price_map.get(period_key, 0)
            selected_item = f"netflix_mobile_{period_key}"
            item = {'name': f"{plan} ({period})", 'price': price}
            await self.process_order_selection(query, user, selected_item, item)

        # Netflix Basic
        elif data.startswith('netflix_basic_'):
            plan = "Netflix Basic"
            period_map = {'1': '1 –º—ñ—Å—è—Ü—å', '12': '12 –º—ñ—Å—è—Ü—ñ–≤'}
            price_map = {'1': 450, '12': 4500}
            period_key = data.split('_')[-1]
            period = period_map.get(period_key, period_key)
            price = price_map.get(period_key, 0)
            selected_item = f"netflix_basic_{period_key}"
            item = {'name': f"{plan} ({period})", 'price': price}
            await self.process_order_selection(query, user, selected_item, item)

        # Netflix Standard
        elif data.startswith('netflix_standard_'):
            plan = "Netflix Standard"
            period_map = {'1': '1 –º—ñ—Å—è—Ü—å', '12': '12 –º—ñ—Å—è—Ü—ñ–≤'}
            price_map = {'1': 550, '12': 5500}
            period_key = data.split('_')[-1]
            period = period_map.get(period_key, period_key)
            price = price_map.get(period_key, 0)
            selected_item = f"netflix_standard_{period_key}"
            item = {'name': f"{plan} ({period})", 'price': price}
            await self.process_order_selection(query, user, selected_item, item)

        # Netflix Premium
        elif data.startswith('netflix_premium_'):
            plan = "Netflix Premium"
            period_map = {'1': '1 –º—ñ—Å—è—Ü—å', '12': '12 –º—ñ—Å—è—Ü—ñ–≤'}
            price_map = {'1': 650, '12': 6500}
            period_key = data.split('_')[-1]
            period = period_map.get(period_key, period_key)
            price = price_map.get(period_key, 0)
            selected_item = f"netflix_premium_{period_key}"
            item = {'name': f"{plan} ({period})", 'price': price}
            await self.process_order_selection(query, user, selected_item, item)

        # Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ –ë–µ–∑ Nitro
        elif data.startswith('discord_decor_bzn_'):
            items = {
                'discord_decor_bzn_6': {'name': "Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ (–ë–µ–∑ Nitro) 6$", 'price': 180},
                'discord_decor_bzn_8': {'name': "Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ (–ë–µ–∑ Nitro) 8$", 'price': 240},
                'discord_decor_bzn_9': {'name': "Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ (–ë–µ–∑ Nitro) 9$", 'price': 265},
                'discord_decor_bzn_12': {'name': "Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ (–ë–µ–∑ Nitro) 12$", 'price': 355},
                'discord_decor_bzn_18': {'name': "Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ (–ë–µ–∑ Nitro) 18$", 'price': 530}, # –û–±–Ω–æ–≤–ª–µ–Ω–æ
                'discord_decor_bzn_24': {'name': "Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ (–ë–µ–∑ Nitro) 24$", 'price': 705}, # –û–±–Ω–æ–≤–ª–µ–Ω–æ
                'discord_decor_bzn_29': {'name': "Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ (–ë–µ–∑ Nitro) 29$", 'price': 855}, # –û–±–Ω–æ–≤–ª–µ–Ω–æ
            }
            item = items.get(data)
            if not item:
                await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                return
            await self.process_order_selection(query, user, data, item)

        # Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ –ó Nitro
        elif data.startswith('discord_decor_zn_'):
            items = {
                'discord_decor_zn_5': {'name': "Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ (–ó Nitro) 5$", 'price': 145},
                'discord_decor_zn_7': {'name': "Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ (–ó Nitro) 7$", 'price': 205},
                'discord_decor_zn_8_5': {'name': "Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ (–ó Nitro) 8.5$", 'price': 250},
                'discord_decor_zn_9': {'name': "Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ (–ó Nitro) 9$", 'price': 265},
                'discord_decor_zn_14': {'name': "Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ (–ó Nitro) 14$", 'price': 410},
                'discord_decor_zn_22': {'name': "Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ (–ó Nitro) 22$", 'price': 650},
                'discord_decor_zn_25': {'name': "Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ (–ó Nitro) 25$", 'price': 740},
                'discord_decor_zn_30': {'name': "Discord –ü—Ä–∏–∫—Ä–∞—Å–∏ (–ó Nitro) 30$", 'price': 885}
            }
            item = items.get(data)
            if not item:
                await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                return
            await self.process_order_selection(query, user, data, item)

        # - –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ -
        elif data == 'question':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
            if user_id in active_conversations:
                await query.edit_message_text(
                    "‚ùó –£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥."
                    "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –ø–∏—Å–∞—Ç–∏ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –¥—ñ–∞–ª–æ–∑—ñ –∞–±–æ –∑–∞–≤–µ—Ä—à—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /stop, "
                    "—è–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥."
                )
                return

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤–æ–ø—Ä–æ—Å–µ
            active_conversations[user_id] = {
                'type': 'question',
                'user_info': user,
                'assigned_owner': None,
                'last_message': "–ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è"
            }
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            save_active_conversation(user_id, 'question', None, "–ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            bot_statistics['total_questions'] += 1
            save_stats()

            await query.edit_message_text(
                "üìù –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. –Ø –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫—É –º–∞–≥–∞–∑–∏–Ω—É."
            )

        # - –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–º–æ—â–∏ -
        elif data == 'help':
            help_text = f"""üëã –î–æ–±—Ä–æ–≥–æ –¥–Ω—è! –Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω—É SecureShop.
ü§ñ –Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω—É SecureShop.

üìå –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:
/start - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
/order - –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
/question - –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
/channel - –ù–∞—à –∫–∞–Ω–∞–ª –∑ –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏ —Ç–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞–º–∏
/stop - –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –¥—ñ–∞–ª–æ–≥
/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞
üí¨ –Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è, –Ω–µ —Å–æ—Ä–æ–º—Ç–µ—Å—è –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è!"""
            await query.edit_message_text(help_text.strip())

        # - –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ (–¥–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π) -
        elif data.startswith('dialog_'):
            if user_id not in [OWNER_ID_1, OWNER_ID_2]:
                await query.edit_message_text("‚ùå –¶—è –¥—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫–∞–º –º–∞–≥–∞–∑–∏–Ω—É.")
                return

            client_id = int(data.split('_')[1])
            if client_id not in active_conversations:
                await query.edit_message_text("‚ùå –î—ñ–∞–ª–æ–≥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                return

            client_info = active_conversations[client_id]['user_info']
            # –ù–∞–∑–Ω–∞—á–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
            active_conversations[client_id]['assigned_owner'] = user_id
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            save_active_conversation(client_id, active_conversations[client_id]['type'], user_id, active_conversations[client_id]['last_message'])
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑—å –≤–ª–∞–¥–µ–ª–µ—Ü-–∫–ª–∏–µ–Ω—Ç
            owner_client_map[user_id] = client_id
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            bot_statistics['active_chats'] += 1
            save_stats()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–≤–µ—Ç–∏—Ç—å
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üí¨ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:\n{active_conversations[client_id]['last_message']}\n–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç:"
            )
            await query.edit_message_text(f"‚úÖ –í–∏ –≤–µ–¥–µ—Ç–µ –¥—ñ–∞–ª–æ–≥ —ñ–∑ {client_info.first_name} (@{client_info.username or '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'})")

        # - –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∏–∞–ª–æ–≥–∞ –¥—Ä—É–≥–æ–º—É –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é -
        elif data.startswith('transfer_'):
            client_id = int(data.split('_')[1])
            current_owner = user_id
            other_owner = OWNER_ID_2 if current_owner == OWNER_ID_1 else OWNER_ID_1
            other_owner_name = "@oc33t" if other_owner == OWNER_ID_2 else "@HiGki2pYYY"

            if client_id in active_conversations:
                active_conversations[client_id]['assigned_owner'] = other_owner
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                save_active_conversation(client_id, active_conversations[client_id]['type'], other_owner, active_conversations[client_id]['last_message'])
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑—å –≤–ª–∞–¥–µ–ª–µ—Ü-–∫–ª–∏–µ–Ω—Ç
                if current_owner in owner_client_map:
                    del owner_client_map[current_owner]
                owner_client_map[other_owner] = client_id
                await query.edit_message_text(f"üîÑ –î—ñ–∞–ª–æ–≥ –ø–µ—Ä–µ–¥–∞–Ω–æ {other_owner_name}")
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–æ–≥–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è
                try:
                    await context.bot.send_message(
                        chat_id=other_owner,
                        text=f"üîÑ –î—ñ–∞–ª–æ–≥ —ñ–∑ –∫–ª—ñ—î–Ω—Ç–æ–º {active_conversations[client_id]['user_info'].first_name} –ø–µ—Ä–µ–¥–∞–Ω–æ –≤–∞–º."
                    )
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è {other_owner}: {e}")
            else:
                await query.edit_message_text("‚ùå –î—ñ–∞–ª–æ–≥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        # - –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º -
        elif data.startswith('end_chat_'):
            client_id = int(data.split('_')[2])
            owner_id = user_id

            # –£–¥–∞–ª—è–µ–º –¥–∏–∞–ª–æ–≥ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö (–≤ –ø–∞–º—è—Ç–∏)
            if client_id in active_conversations:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                order_details = active_conversations[client_id].get('order_details', '')
                del active_conversations[client_id]
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                save_active_conversation(client_id, None, None, None) # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å –≤–ª–∞–¥–µ–ª–µ—Ü-–∫–ª–∏–µ–Ω—Ç
            if owner_id in owner_client_map:
                del owner_client_map[owner_id]
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            bot_statistics['active_chats'] = max(0, bot_statistics['active_chats'] - 1)
            save_stats()

            await query.edit_message_text("‚úÖ –î—ñ–∞–ª–æ–≥ —ñ–∑ –∫–ª—ñ—î–Ω—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
            client_info = active_conversations.get(client_id, {}).get('user_info')
            if client_info:
                try:
                    keyboard = [
                        [InlineKeyboardButton("üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data='order')],
                        [InlineKeyboardButton("‚ùì –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')],
                        [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    confirmation_text = "‚úÖ –í–∞—à –¥—ñ–∞–ª–æ–≥ —ñ–∑ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫–æ–º –º–∞–≥–∞–∑–∏–Ω—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ."
                    await context.bot.send_message(chat_id=client_id, text=confirmation_text, reply_markup=reply_markup)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {client_id}: {e}")

        # - –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–ª–∞—Ç–µ -
        elif data == 'proceed_to_payment':
            order_text = context.user_data.get('pending_order_details') or \
                         (active_conversations.get(user_id, {}).get('order_details') if user_id in active_conversations else None)
            if not order_text:
                await query.edit_message_text("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
                return
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –≤ UAH
            uah_amount = get_uah_amount_from_order_text(order_text)
            if uah_amount > 0:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                context.user_data['pending_order_details'] = order_text
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –æ–ø–ª–∞—Ç—ã
                await self.proceed_to_payment(update, context, uah_amount)
            else:
                await query.edit_message_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Å—É–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")

        # - –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–æ–≤–∞—Ä–∞ -
        elif data == 'back_to_order':
            keyboard = [
                [InlineKeyboardButton("üí≥ –ü—ñ–¥–ø–∏—Å–∫–∏", callback_data='order_subscriptions')],
                [InlineKeyboardButton("üéÆ –¶–∏—Ñ—Ä–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏", callback_data='order_digital')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
            ]
            await query.edit_message_text("üì¶ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç–æ–≤–∞—Ä—É:", reply_markup=InlineKeyboardMarkup(keyboard))

    # - –ö–æ–Ω–µ—Ü –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö/–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ -

    async def process_order_selection(self, query, user, selected_item, item):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞"""
        user_id = user.id
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        ensure_user_exists(user)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
        if user_id in active_conversations:
            await query.edit_message_text(
                "‚ùó –£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥."
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –ø–∏—Å–∞—Ç–∏ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –¥—ñ–∞–ª–æ–∑—ñ –∞–±–æ –∑–∞–≤–µ—Ä—à—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /stop, "
                "—è–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥."
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
        order_text = f"üõçÔ∏è –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n‚ñ´Ô∏è {item['name']} - {item['price']} UAH\nüí≥ –í—Å—å–æ–≥–æ: {item['price']} UAH"

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–∫–∞–∑–µ
        conversation_type = 'digital_order' if '–ü—Ä–∏–∫—Ä–∞—Å–∏' in item['name'] else 'subscription_order'
        active_conversations[user_id] = {
            'type': conversation_type,
            'user_info': user,
            'assigned_owner': None,
            'order_details': order_text,
            'last_message': order_text
        }
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        save_active_conversation(user_id, conversation_type, None, order_text)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        bot_statistics['total_orders'] += 1
        save_stats()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏", callback_data='proceed_to_payment')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_order')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        confirmation_text = f"""‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ!\n{order_text}\n–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é üëá"""
        await query.edit_message_text(confirmation_text.strip(), reply_markup=reply_markup)

    async def proceed_to_payment(self, update, context, uah_amount: float):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã"""
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –≤ USD
        usd_amount = round(uah_amount / EXCHANGE_RATE_UAH_TO_USD, 2)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['payment_amount_uah'] = uah_amount
        context.user_data['payment_amount_usd'] = usd_amount

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ—Ç–æ–¥–∞–º–∏ –æ–ø–ª–∞—Ç—ã
        keyboard = [
            [InlineKeyboardButton("üí≥ –†—É—á–Ω–∞ –æ–ø–ª–∞—Ç–∞ (PrivatBank, Monobank —Ç–æ—â–æ)", callback_data='manual_payment')],
            [InlineKeyboardButton("ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data='crypto_payment')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')],
            [InlineKeyboardButton("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if isinstance(update, Update) and update.callback_query:
            await update.callback_query.edit_message_text(
                f"üí≥ –û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏ –¥–ª—è —Å—É–º–∏ {usd_amount}$:",
                reply_markup=reply_markup
            )
        else:
            # –î–ª—è –∫–æ–º–∞–Ω–¥—ã /pay
            await update.message.reply_text(
                f"üí≥ –û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏ –¥–ª—è —Å—É–º–∏ {usd_amount}$:",
                reply_markup=reply_markup
            )

    # - –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã -
    async def payment_callback_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫ –æ–ø–ª–∞—Ç—ã"""
        query = update.callback_query
        user = query.from_user
        user_id = user.id
        data = query.data

        await query.answer()

        # –†—É—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞
        if data == 'manual_payment':
            uah_amount = context.user_data.get('payment_amount_uah', 0)
            usd_amount = context.user_data.get('payment_amount_usd', 0)
            if uah_amount <= 0:
                await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: —Å—É–º–∞ –æ–ø–ª–∞—Ç–∏ –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∞.")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
            payment_details_text = f"""üí≥ –†—É—á–Ω–∞ –æ–ø–ª–∞—Ç

—å:
–î–ª—è –æ–ø–ª–∞—Ç–∏ —Å—É–º–∏ {uah_amount} UAH ({usd_amount}$) –ø–µ—Ä–µ–∫–∞–∂—ñ—Ç—å –∫–æ—à—Ç–∏ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫:

**–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ (UAH):**
–ö–∞—Ä—Ç–∞: `5169360016447834`
–û—Ç—Ä–∏–º—É–≤–∞—á: `–ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ –ê—Ä—Ç–µ–º –û–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á`

**Monobank (UAH):**
–ö–∞—Ä—Ç–∞: `5375411204320270`
–û—Ç—Ä–∏–º—É–≤–∞—á: `–ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ –ê—Ä—Ç–µ–º –û–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á`

–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ –∞–±–æ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó."""
            await query.edit_message_text(payment_details_text, parse_mode='Markdown')

            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
            keyboard = [
                [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–≤", callback_data='manual_payment_confirmed')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='proceed_to_payment')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text("–ü—ñ—Å–ª—è –∑–¥—ñ–π—Å–Ω–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:", reply_markup=reply_markup)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            context.user_data['awaiting_manual_payment_confirmation'] = True

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä—É—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã
        elif data == 'manual_payment_confirmed':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
            order_details = context.user_data.get('pending_order_details') or \
                            (active_conversations.get(user_id, {}).get('order_details') if user_id in active_conversations else None)
            if not order_details:
                await query.edit_message_text("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è–º
            success_count = 0
            for owner_id in [OWNER_ID_1, OWNER_ID_2]:
                try:
                    payment_confirmation_message = f"üí≥ –ù–æ–≤–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä—É—á–Ω–æ—ó –æ–ø–ª–∞—Ç–∏ –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞!\n" \
                                                   f"üë§ –ö–ª—ñ—î–Ω—Ç: {user.first_name}\n" \
                                                   f"üÜî ID: {user_id}\n" \
                                                   f"üõçÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order_details}"
                    await context.bot.send_message(chat_id=owner_id, text=payment_confirmation_message)
                    success_count += 1
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é {owner_id}: {e}")

            if success_count > 0:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ (–ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞)
                item_type = "—Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É" if "–ü—Ä–∏–∫—Ä–∞—Å–∏" in order_details else "–ø—ñ–¥–ø–∏—Å–∫–∏"
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É —Å –ø—Ä–æ—Å—å–±–æ–π –ø—Ä–∏—Å–ª–∞—Ç—å –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å
                message_text = f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ!\n" \
                               f"–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –ª–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å –≤—ñ–¥ {item_type}.\n" \
                               f"–ù–∞–ø—Ä–∏–∫–ª–∞–¥: `login:password` –∞–±–æ `login password`"
                await query.edit_message_text(message_text, parse_mode='Markdown')
                context.user_data['awaiting_account_data'] = True
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è–º –ø–æ–∑–∂–µ
                context.user_data['account_details_order'] = order_details
            else:
                await query.edit_message_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è–º. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            context.user_data.pop('awaiting_manual_payment_confirmation', None)
            context.user_data.pop('payment_amount_uah', None)
            context.user_data.pop('payment_amount_usd', None)

        # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞
        elif data == 'crypto_payment':
            uah_amount = context.user_data.get('payment_amount_uah', 0)
            usd_amount = context.user_data.get('payment_amount_usd', 0)
            if uah_amount <= 0:
                await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: —Å—É–º–∞ –æ–ø–ª–∞—Ç–∏ –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∞.")
                return

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏
            keyboard = []
            for currency_name, currency_code in AVAILABLE_CURRENCIES.items():
                keyboard.append([InlineKeyboardButton(currency_name, callback_data=f'pay_{currency_code}')])
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='proceed_to_payment')])

            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                f"üí≥ –û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏ –¥–ª—è —Å—É–º–∏ {usd_amount}$:",
                reply_markup=reply_markup
            )
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            context.user_data['awaiting_crypto_currency_selection'] = True

        # –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        elif data.startswith('pay_'):
            currency_code = data.split('_')[1]
            currency_name = next((name for name, code in AVAILABLE_CURRENCIES.items() if code == currency_code), currency_code)
            usd_amount = context.user_data.get('payment_amount_usd', 0)
            if usd_amount <= 0:
                await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: —Å—É–º–∞ –æ–ø–ª–∞—Ç–∏ –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∞.")
                return

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ NOWPayments
            try:
                headers = {
                    'x-api-key': NOWPAYMENTS_API_KEY,
                    'Content-Type': 'application/json'
                }
                payload = {
                    'price_amount': usd_amount,
                    'price_currency': 'usd',
                    'pay_currency': currency_code,
                    'order_id': f'order_{int(time.time())}_{user_id}', # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
                    'order_description': f'Payment for order from user {user.first_name} (@{user.username or "N/A"})',
                    'ipn_callback_url': f'{WEBHOOK_URL}/nowpayments-ipn', # URL –¥–ª—è IPN
                    'success_url': f'{WEBHOOK_URL}/payment-success',
                    'cancel_url': f'{WEBHOOK_URL}/payment-cancel'
                }
                response = requests.post('https://api.nowpayments.io/v1/invoice', json=payload, headers=headers)
                response.raise_for_status()
                invoice_data = response.json()

                invoice_url = invoice_data.get('invoice_url')
                invoice_id = invoice_data.get('invoice_id')

                if invoice_url and invoice_id:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏–Ω–≤–æ–π—Å–∞
                    context.user_data['nowpayments_invoice_id'] = invoice_id

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
                    payment_text = f"ü™ô –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é ({currency_name}):\n" \
                                   f"–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∏–∂—á–µ –¥–ª—è –æ–ø–ª–∞—Ç–∏:\n" \
                                   f"[–û–ø–ª–∞—Ç–∏—Ç–∏]({invoice_url})\n\n" \
                                   f"–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É."
                    keyboard = [
                        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏", callback_data='check_payment_status')],
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏", callback_data='back_to_crypto_selection')]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.edit_message_text(payment_text, parse_mode='Markdown', reply_markup=reply_markup)
                else:
                    await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–≤–æ–π—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            except requests.exceptions.RequestException as e:
                logger.error(f"‚ùå NOWPayments API error: {e}")
                await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤—ñ—Å–æ–º –æ–ø–ª–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            except Exception as e:
                logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {e}")
                await query.edit_message_text("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
        elif data == 'check_payment_status':
            invoice_id = context.user_data.get('nowpayments_invoice_id')
            if not invoice_id:
                await query.edit_message_text("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ ID —ñ–Ω–≤–æ–π—Å—É.")
                return

            try:
                headers = {
                    'x-api-key': NOWPAYMENTS_API_KEY,
                    'Content-Type': 'application/json'
                }
                response = requests.get(f'https://api.nowpayments.io/v1/invoice/{invoice_id}', headers=headers)
                response.raise_for_status()
                invoice_status_data = response.json()

                payment_status = invoice_status_data.get('payment_status', 'waiting')
                # –°—Ç–∞—Ç—É—Å—ã: waiting, confirming, confirmed, sending, partially_paid, finished, failed, refunded, expired
                if payment_status in ['confirmed', 'finished']:
                    # –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
                    order_details = context.user_data.get('pending_order_details') or \
                                    (active_conversations.get(user_id, {}).get('order_details') if user_id in active_conversations else None)
                    if not order_details:
                        await query.edit_message_text("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
                        return

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è–º
                    success_count = 0
                    for owner_id in [OWNER_ID_1, OWNER_ID_2]:
                        try:
                            payment_confirmation_message = f"ü™ô –ù–æ–≤–∞ –æ–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞!\n" \
                                                           f"üë§ –ö–ª—ñ—î–Ω—Ç: {user.first_name}\n" \
                                                           f"üÜî ID: {user_id}\n" \
                                                           f"üõçÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order_details}\n" \
                                                           f"üí∞ –°—É–º–∞: {invoice_status_data.get('price_amount', 'N/A')} {invoice_status_data.get('price_currency', 'USD')}\n" \
                                                           f"üí± –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: {invoice_status_data.get('pay_currency', 'N/A')}"
                            await context.bot.send_message(chat_id=owner_id, text=payment_confirmation_message)
                            success_count += 1
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é {owner_id}: {e}")

                    if success_count > 0:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ (–ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞)
                        item_type = "—Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É" if "–ü—Ä–∏–∫—Ä–∞—Å–∏" in order_details else "–ø—ñ–¥–ø–∏—Å–∫–∏"
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É —Å –ø—Ä–æ—Å—å–±–æ–π –ø—Ä–∏—Å–ª–∞—Ç—å –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å
                        message_text = f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ!\n" \
                                       f"–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –ª–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å –≤—ñ–¥ {item_type}.\n" \
                                       f"–ù–∞–ø—Ä–∏–∫–ª–∞–¥: `login:password` –∞–±–æ `login password`"
                        await query.edit_message_text(message_text, parse_mode='Markdown')
                        context.user_data['awaiting_account_data'] = True
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è–º –ø–æ–∑–∂–µ
                        context.user_data['account_details_order'] = order_details
                    else:
                        await query.edit_message_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è–º. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

                    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    context.user_data.pop('awaiting_crypto_currency_selection', None)
                    context.user_data.pop('nowpayments_invoice_id', None)
                    context.user_data.pop('payment_amount_uah', None)
                    context.user_data.pop('payment_amount_usd', None)

                elif payment_status in ['failed', 'refunded', 'expired']:
                    await query.edit_message_text("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ–π—à–ª–∞ –∞–±–æ –±—É–ª–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    context.user_data.pop('awaiting_crypto_currency_selection', None)
                    context.user_data.pop('nowpayments_invoice_id', None)
                else:
                    # –û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                    await query.edit_message_text(
                        f"‚è≥ –û–ø–ª–∞—Ç–∞ —â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å: {payment_status}.\n"
                        f"–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ —Ç—Ä–æ—Ö–∏ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å—Ç–∞—Ç—É—Å –ø—ñ–∑–Ω—ñ—à–µ."
                    )
            except requests.exceptions.RequestException as e:
                logger.error(f"‚ùå NOWPayments API error –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
                await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤—ñ—Å–æ–º –æ–ø–ª–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            except Exception as e:
                logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã: {e}")
                await query.edit_message_text("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

        # –ù–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏
        elif data == 'back_to_crypto_selection':
            uah_amount = context.user_data.get('payment_amount_uah', 0)
            usd_amount = context.user_data.get('payment_amount_usd', 0)
            if uah_amount <= 0:
                await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: —Å—É–º–∞ –æ–ø–ª–∞—Ç–∏ –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∞.")
                return

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏
            keyboard = []
            for currency_name, currency_code in AVAILABLE_CURRENCIES.items():
                keyboard.append([InlineKeyboardButton(currency_name, callback_data=f'pay_{currency_code}')])
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='proceed_to_payment')])

            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                f"üí≥ –û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏ –¥–ª—è —Å—É–º–∏ {usd_amount}$:",
                reply_markup=reply_markup
            )
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            context.user_data['awaiting_crypto_currency_selection'] = True

        # –ù–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É —Å–ø–æ—Å–æ–±—É –æ–ø–ª–∞—Ç–∏
        elif data == 'back_to_payment_methods':
            uah_amount = context.user_data.get('payment_amount_uah', 0)
            usd_amount = context.user_data.get('payment_amount_usd', 0)
            if uah_amount <= 0:
                await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: —Å—É–º–∞ –æ–ø–ª–∞—Ç–∏ –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∞.")
                return
            await self.proceed_to_payment(update, context, uah_amount)

    async def handle_account_data_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ª–æ–≥–∏–Ω–æ–º/–ø–∞—Ä–æ–ª–µ–º –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã"""
        user = update.effective_user
        user_id = user.id
        message_text = update.message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        if not context.user_data.get('awaiting_account_data', False):
            return # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç (login:password –∏–ª–∏ login password)
        parts = re.split(r'[:\s]+', message_text)
        if len(parts) < 2:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ª–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å —É —Ñ–æ—Ä–º–∞—Ç—ñ `login:password` –∞–±–æ `login password`.",
                parse_mode='Markdown'
            )
            return

        login, password = parts[0], parts[1]

        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
        order_details = context.user_data.get('account_details_order', '–ù–µ–≤—ñ–¥–æ–º–∏–π –∑–∞–∫–∞–∑')

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π
        account_info_message = f"üîê –ù–æ–≤—ñ –¥–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç—É –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞!\n" \
                               f"üë§ –ö–ª—ñ—î–Ω—Ç: {user.first_name}\n" \
                               f"üÜî ID: {user_id}\n" \
                               f"üõçÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order_details}\n" \
                               f"üîë –õ–æ–≥—ñ–Ω: `{login}`\n" \
                               f"üîì –ü–∞—Ä–æ–ª—å: `{password}`"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è–º
        success_count = 0
        for owner_id in [OWNER_ID_1, OWNER_ID_2]:
            try:
                await context.bot.send_message(chat_id=owner_id, text=account_info_message, parse_mode='Markdown')
                success_count += 1
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é {owner_id}: {e}")

        if success_count > 0:
            await update.message.reply_text("‚úÖ –î–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç—É —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫–∞–º –º–∞–≥–∞–∑–∏–Ω—É!")
        else:
            await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–¥–∞—Ç–∏ –¥–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.pop('awaiting_account_data', None)
        context.user_data.pop('account_details_order', None)
        context.user_data.pop('pending_order_details', None)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        user_id = user.id
        message_text = update.message.text

        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        ensure_user_exists(user)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
        if context.user_data.get('awaiting_account_data', False):
            await self.handle_account_data_message(update, context)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
        if user_id not in active_conversations:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å
            keyboard = [
                [InlineKeyboardButton("üõí –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data='order')],
                [InlineKeyboardButton("‚ùì –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", callback_data='question')],
                [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "üì≠ –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ üëá",
                reply_markup=reply_markup
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        active_conversations[user_id]['last_message'] = message_text
        save_active_conversation(user_id, active_conversations[user_id]['type'], active_conversations[user_id].get('assigned_owner'), message_text)

        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é
        assigned_owner = active_conversations[user_id].get('assigned_owner')
        if assigned_owner:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                client_info = active_conversations[user_id]['user_info']
                forward_text = f"–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ {client_info.first_name} (@{client_info.username or '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}):\n{message_text}"
                await context.bot.send_message(chat_id=assigned_owner, text=forward_text)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é {assigned_owner}: {e}")
                await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        else:
            # –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω, —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π
            notification_sent = False
            for owner_id in [OWNER_ID_1, OWNER_ID_2]:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    client_info = active_conversations[user_id]['user_info']
                    notification_text = f"üîî –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ {client_info.first_name} (@{client_info.username or '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}):\n{message_text}\n\n–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–∏–∑–Ω–∞—á—Ç–µ —Å–æ–±—ñ —Ü–µ–π –¥—ñ–∞–ª–æ–≥."
                    keyboard = [
                        [InlineKeyboardButton("‚úÖ –ü—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ —Å–æ–±—ñ", callback_data=f'dialog_{user_id}')],
                        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–¥–∞—Ç–∏ —ñ–Ω—à–æ–º—É", callback_data=f'transfer_{user_id}')],
                        [InlineKeyboardButton("üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥", callback_data=f'end_chat_{user_id}')]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await context.bot.send_message(chat_id=owner_id, text=notification_text, reply_markup=reply_markup)
                    notification_sent = True
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è {owner_id}: {e}")

            if not notification_sent:
                await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤)"""
        user = update.effective_user
        user_id = user.id
        document = update.message.document

        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        ensure_user_exists(user)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
        if user_id in active_conversations:
            await update.message.reply_text(
                "‚ùó –£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥."
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –ø–∏—Å–∞—Ç–∏ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –¥—ñ–∞–ª–æ–∑—ñ –∞–±–æ –∑–∞–≤–µ—Ä—à—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /stop, "
                "—è–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥."
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if document.mime_type != 'application/json':
            await update.message.reply_text("‚ùå –ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ JSON —Ñ–∞–π–ª–∏.")
            return

        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file = await context.bot.get_file(document.file_id)
            file_bytes = await file.download_as_bytearray()
            file_content = file_bytes.decode('utf-8')

            # –ü–∞—Ä—Å–∏–º JSON
            order_data = json.loads(file_content)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            required_fields = ['order_id', 'items', 'total']
            if not all(field in order_data for field in required_fields):
                await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON —Ñ–∞–π–ª—É.")
                return

            if not isinstance(order_data['items'], list) or not order_data['items']:
                await update.message.reply_text("‚ùå –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –º–∞—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç.")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
            order_text = f"üõçÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Å–∞–π—Ç—É (#{order_data['order_id']}):\n"
            for item in order_data['items']:
                order_text += f"‚ñ´Ô∏è {item['service']} {item.get('plan', '')} ({item['period']}) - {item['price']} UAH\n"
            order_text += f"üí≥ –í—Å—å–æ–≥–æ: {order_data['total']} UAH"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞ (–ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞, –º–æ–∂–Ω–æ —É—Å–ª–æ–∂–Ω–∏—Ç—å)
            has_digital = any("–ü—Ä–∏–∫—Ä–∞—Å–∏" in item.get('service', '') for item in order_data['items']) # –û–±–Ω–æ–≤–ª–µ–Ω–æ
            conversation_type = 'digital_order' if has_digital else 'subscription_order'

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–∫–∞–∑–µ
            active_conversations[user_id] = {
                'type': conversation_type,
                'user_info': user,
                'assigned_owner': None,
                'order_details': order_text,
                'last_message': order_text
            }
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            save_active_conversation(user_id, conversation_type, None, order_text)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            bot_statistics['total_orders'] += 1
            save_stats()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            keyboard = [
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏", callback_data='proceed_to_payment')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            confirmation_text = f"""‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ!\n{order_text}\n–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é üëá"""
            await update.message.reply_text(confirmation_text.strip(), reply_markup=reply_markup)

        except json.JSONDecodeError:
            await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON —Ñ–∞–π–ª—É.")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –æ—Ç {user_id}: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(msg="Exception while handling an update:", exc_info=context.error)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
        tb_list = traceback.format_exception(None, context.error, context.error.__traceback__)
        tb_string = "".join(tb_list)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        error_message = f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:\n{tb_string}"
        for owner_id in [OWNER_ID_1, OWNER_ID_2]:
            try:
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                if len(error_message) > 4096:
                    error_message = error_message[:4000] + "\n... (–æ–±—Ä–µ–∑–∞–Ω–æ)"
                await context.bot.send_message(chat_id=owner_id, text=f"```\n{error_message}\n```", parse_mode='Markdown')
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é {owner_id}: {e}")

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ polling"""
        global bot_running
        with bot_lock:
            if bot_running:
                logger.warning("üõë –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫")
                return
            bot_running = True

        try:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ polling —Ä–µ–∂–∏–º–∞...")
            await self.application.start()
            await self.application.updater.start_polling(
                poll_interval=1.0,
                timeout=10,
                bootstrap_retries=-1,
                read_timeout=10,
                write_timeout=10,
                connect_timeout=10,
                pool_timeout=10
            )
            logger.info("‚úÖ Polling –∑–∞–ø—É—â–µ–Ω")
        except Conflict as e:
            logger.error(f"üö® –ö–æ–Ω—Ñ–ª–∏–∫—Ç: {e}")
            logger.warning("üïí –û–∂–∏–¥–∞–µ–º 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
            await asyncio.sleep(15)
            await self.start_polling()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ polling: {e}")
            raise

    async def stop_polling(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling"""
        global bot_running
        with bot_lock:
            if not bot_running:
                logger.warning("üõë –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É")
                return
            bot_running = False

        try:
            logger.info("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling —Ä–µ–∂–∏–º–∞...")
            await self.application.updater.stop()
            await self.application.stop()
            logger.info("‚úÖ Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ polling: {e}")

async def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
    try:
        if not WEBHOOK_URL:
            logger.error("‚ùå WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False

        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π webhook
        await bot_instance.application.bot.delete_webhook()
        logger.info("üóëÔ∏è –°—Ç–∞—Ä—ã–π webhook —É–¥–∞–ª–µ–Ω")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
        await bot_instance.application.bot.set_webhook(
            url=WEBHOOK_URL,
            max_connections=40,
            drop_pending_updates=True
        )
        logger.info(f"üåê Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")
        return False

async def start_bot():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    global bot_instance
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        init_db()
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        load_stats()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        bot_instance = TelegramBot()
        await bot_instance.initialize()

        # –ó–∞–ø—É—Å–∫
        if USE_POLLING:
            await bot_instance.start_polling()
            bot_running = True
            logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ polling —Ä–µ–∂–∏–º–µ")
        else:
            success = await setup_webhook()
            if success:
                bot_running = True
                logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ webhook —Ä–µ–∂–∏–º–µ")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å webhook")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        bot_running = False
        raise

def bot_thread():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    bot_instance.loop = loop
    try:
        loop.run_until_complete(start_bot())
        if USE_POLLING:
            loop.run_forever()
    except Conflict as e:
        logger.error(f"üö® –ö–æ–Ω—Ñ–ª–∏–∫—Ç: {e}")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ bot_thread: {e}")
    finally:
        loop.close()

# - Flask endpoints -
@flask_app.route('/', methods=['GET'])
def index():
    return jsonify({"status": "ok", "message": "SecureShop Bot is running"}), 200

@flask_app.route('/nowpayments-ipn', methods=['POST'])
def nowpayments_ipn():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ IPN –æ—Ç NOWPayments"""
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = request.json
        logger.info(f"NOWPayments IPN received: {data}")

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ IPN
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –≤ –ë–î –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è
        # data = request.json
        # logger.info(f"NOWPayments IPN received: {data}")
        # return jsonify({'status': 'ok'}), 200
        pass # –ó–∞–≥–ª—É—à–∫–∞
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ NOWPayments IPN: {e}")
    return jsonify({'status': 'ok'}), 200

@flask_app.route('/payment-success', methods=['GET'])
def payment_success():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
    return jsonify({"status": "success", "message": "Payment was successful"}), 200

@flask_app.route('/payment-cancel', methods=['GET'])
def payment_cancel():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–º–µ–Ω—ã –æ–ø–ª–∞—Ç—ã"""
    return jsonify({"status": "cancelled", "message": "Payment was cancelled"}), 200

@flask_app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    status = "healthy" if bot_running else "unhealthy"
    return jsonify({"status": status, "timestamp": datetime.now().isoformat()}), 200

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        from threading import Thread
        flask_thread = Thread(target=lambda: flask_app.run(host='0.0.0.0', port=PORT, debug=False, use_reloader=False))
        flask_thread.daemon = True
        flask_thread.start()
        logger.info(f"üåê Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        bot_t = threading.Thread(target=bot_thread)
        bot_t.daemon = True
        bot_t.start()

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        try:
            while True:
                time.sleep(PING_INTERVAL)
                logger.info("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}")

if __name__ == '__main__':
    main()
