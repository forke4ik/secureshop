# commands.py
import logging
import json
import io
from telegram import Update
from telegram.ext import ContextTypes
from config import OWNER_ID_1, OWNER_ID_2
import db

logger = logging.getLogger(__name__)

def is_owner(user_id: int) -> bool:
    return user_id in [OWNER_ID_1, OWNER_ID_2]

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info(f"üìà –í—ã–∑–æ–≤ /stats –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    owner_id = update.effective_user.id
    if not is_owner(owner_id):
        return

    try:
        total_users_db = db.get_total_users_count()
        total_orders_db = db.get_total_orders_count() # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
        total_questions_db = db.get_total_questions_count() # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
        # active_chats_db = db.get_active_conversations_count() # –£–¥–∞–ª–µ–Ω–æ
        
        stats_message = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
            f"üë§ –£—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–ë–î): {total_users_db}\n"
            f"üõí –£—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å (–ë–î): {total_orders_db}\n"
            f"‚ùì –£—Å—å–æ–≥–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—å (–ë–î): {total_questions_db}\n"
            # f"üë• –ê–∫—Ç–∏–≤–Ω–∏—Ö —á–∞—Ç—ñ–≤ (–ë–î): {active_chats_db}" # –£–¥–∞–ª–µ–Ω–æ
        )
        await update.message.reply_text(stats_message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ë–î: {e}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")

async def export_users_json(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info(f"üìÅ –í—ã–∑–æ–≤ /json –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    owner_id = update.effective_user.id
    if not is_owner(owner_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    try:
        users_data_db = db.get_all_users_data() # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ç–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –µ—Å—Ç—å
        if not users_data_db:
             await update.message.reply_text("‚ÑπÔ∏è –í –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É.")
             return

        users_data = []
        for user in users_data_db:
            users_data.append({
                'id': user['id'],
                'username': user['username'],
                'first_name': user['first_name'],
                'last_name': user['last_name'],
                'language_code': user['language_code'],
                'is_bot': user['is_bot'],
                'created_at': user['created_at'].isoformat() if user['created_at'] else None,
                'updated_at': user['updated_at'].isoformat() if user['updated_at'] else None
            })

        json_data = json.dumps(users_data, ensure_ascii=False, indent=2).encode('utf-8')
        file = io.BytesIO(json_data)
        file.seek(0)
        file.name = 'users_export.json'
        await update.message.reply_document(document=file, caption="üìä –ï–∫—Å–ø–æ—Ä—Ç —É—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É JSON")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON: {e}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É JSON.")
