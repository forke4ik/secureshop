# commands.py
import logging
import json
import io
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import OWNER_ID_1, OWNER_ID_2
import db  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å –±—É–¥–µ—Ç —Ñ–∞–π–ª db.py –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î

logger = logging.getLogger(__name__)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def is_owner(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º."""
    return user_id in [OWNER_ID_1, OWNER_ID_2]

# --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ ---

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤)."""
    logger.info(f"üìà –í—ã–∑–æ–≤ /stats –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    owner_id = update.effective_user.id
    if not is_owner(owner_id):
        return # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç –Ω–µ-–≤–ª–∞–¥–µ–ª—å—Ü–µ–≤

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        total_users_db = db.get_total_users_count()
        total_orders_db = db.get_total_orders_count()
        total_questions_db = db.get_total_questions_count()
        active_chats_db = db.get_active_conversations_count()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        stats_message = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
            f"üë§ –£—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–ë–î): {total_users_db}\n"
            f"üõí –£—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å (–ë–î): {total_orders_db}\n"
            f"‚ùì –£—Å—å–æ–≥–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—å (–ë–î): {total_questions_db}\n"
            f"üë• –ê–∫—Ç–∏–≤–Ω–∏—Ö —á–∞—Ç—ñ–≤ (–ë–î): {active_chats_db}"
        )
        await update.message.reply_text(stats_message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ë–î: {e}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")

async def export_users_json(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON —Ñ–∞–π–ª (–¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤)."""
    logger.info(f"üìÅ –í—ã–∑–æ–≤ /json –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    owner_id = update.effective_user.id
    if not is_owner(owner_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
        users_data_db = db.get_all_users_data()
        if not users_data_db:
             await update.message.reply_text("‚ÑπÔ∏è –í –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É.")
             return

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è JSON
        users_data = []
        for user in users_data_db:
            users_data.append({
                'id': user['id'],
                'username': user['username'],
                'first_name': user['first_name'],
                'last_name': user['last_name'],
                'language_code': user['language_code'],
                'is_bot': user['is_bot'],
                'created_at': user['created_at'].isoformat() if user['created_at'] else None,
                'updated_at': user['updated_at'].isoformat() if user['updated_at'] else None
            })

        # –°–æ–∑–¥–∞–µ–º JSON —Ñ–∞–π–ª
        json_data = json.dumps(users_data, ensure_ascii=False, indent=2).encode('utf-8')
        file = io.BytesIO(json_data)
        file.seek(0)
        file.name = 'users_export.json'
        await update.message.reply_document(document=file, caption="üìä –ï–∫—Å–ø–æ—Ä—Ç —É—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É JSON")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON: {e}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É JSON.")

async def show_active_chats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ (–¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤)."""
    logger.info(f"üë• –í—ã–∑–æ–≤ /chats –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    owner_id = update.effective_user.id
    if not is_owner(owner_id):
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –∏–∑ –ë–î
        active_chats = db.get_all_active_conversations()
        if not active_chats:
            await update.message.reply_text("‚ÑπÔ∏è –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —á–∞—Ç—ñ–≤.")
            return

        message = "üë• –ê–∫—Ç–∏–≤–Ω—ñ —á–∞—Ç–∏:\n"
        for chat in active_chats:
            user_info = chat.get('user_info', {})
            user_name = user_info.get('first_name', '–ù–µ–≤—ñ–¥–æ–º–∏–π')
            username = user_info.get('username', '')
            user_display = f"@{username}" if username else user_name
            assigned_owner_id = chat.get('assigned_owner')
            owner_display = "–ù—ñ—Ö—Ç–æ" if not assigned_owner_id else ("–í–ª–∞—Å–Ω–∏–∫ 1" if assigned_owner_id == OWNER_ID_1 else "–í–ª–∞—Å–Ω–∏–∫ 2")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –≤–ª–∞–¥–µ–ª–µ—Ü —Ç–µ–º, –∫—Ç–æ –≤–µ–¥–µ—Ç –¥–∏–∞–ª–æ–≥
            is_current_owner = assigned_owner_id == owner_id
            
            message += f"‚ñ´Ô∏è {user_display} (ID: {chat['user_id']}) - {chat['type']} - –í–µ–¥–µ: {owner_display}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –Ω–µ –≤–µ–¥–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–ª–∞–¥–µ–ª–µ—Ü
            if not is_current_owner and assigned_owner_id is not None:
                 keyboard = [[InlineKeyboardButton("‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏", callback_data=f'continue_chat_{chat["user_id"]}')]]
                 reply_markup = InlineKeyboardMarkup(keyboard)
                 # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
                 await update.message.reply_text(
                     f"–ü–µ—Ä–µ–π—Ç–∏ –¥–æ —á–∞—Ç—É –∑ {user_display} (ID: {chat['user_id']})?",
                     reply_markup=reply_markup
                 )
            elif assigned_owner_id is None:
                # –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–∑—è—Ç—å"
                keyboard = [[InlineKeyboardButton("‚úÖ –í–∑—è—Ç–∏", callback_data=f'take_question_{chat["user_id"]}' if chat['type'] == 'question' else f'take_order_{chat["user_id"]}')]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text(
                     f"–í–∑—è—Ç–∏ —á–∞—Ç –∑ {user_display} (ID: {chat['user_id']})?",
                     reply_markup=reply_markup
                )
            # –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –≤–µ–¥–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–ª–∞–¥–µ–ª–µ—Ü, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ –∫–Ω–æ–ø–∫–∏
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
        # await update.message.reply_text(message.strip())
        # (–ö–Ω–æ–ø–∫–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—ã—à–µ)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤.")

async def show_questions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤)."""
    logger.info(f"‚ùì –í—ã–∑–æ–≤ /questions –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    owner_id = update.effective_user.id
    if not is_owner(owner_id):
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –ë–î
        active_questions = db.get_active_questions()
        if not active_questions:
            await update.message.reply_text("‚ÑπÔ∏è –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Ç–∞–Ω—å.")
            return

        message = "‚ùì –ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:\n"
        for question in active_questions:
            user_info = question.get('user_info', {})
            user_name = user_info.get('first_name', '–ù–µ–≤—ñ–¥–æ–º–∏–π')
            username = user_info.get('username', '')
            user_display = f"@{username}" if username else user_name
            assigned_owner_id = question.get('assigned_owner')
            owner_display = "–ù—ñ—Ö—Ç–æ" if not assigned_owner_id else ("–í–ª–∞—Å–Ω–∏–∫ 1" if assigned_owner_id == OWNER_ID_1 else "–í–ª–∞—Å–Ω–∏–∫ 2")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –≤–ª–∞–¥–µ–ª–µ—Ü —Ç–µ–º, –∫—Ç–æ –≤–µ–¥–µ—Ç –≤–æ–ø—Ä–æ—Å
            is_current_owner = assigned_owner_id == owner_id
            
            message += f"‚ñ´Ô∏è {user_display} (ID: {question['user_id']}) - –í–µ–¥–µ: {owner_display}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –∏–ª–∏ "–í–∑—è—Ç—å"
            if not is_current_owner and assigned_owner_id is not None:
                 keyboard = [[InlineKeyboardButton("‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏", callback_data=f'continue_chat_{question["user_id"]}')]]
                 reply_markup = InlineKeyboardMarkup(keyboard)
                 await update.message.reply_text(
                     f"–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ {user_display} (ID: {question['user_id']})?",
                     reply_markup=reply_markup
                 )
            elif assigned_owner_id is None:
                keyboard = [[InlineKeyboardButton("‚úÖ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f'take_question_{question["user_id"]}')]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text(
                     f"–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ {user_display} (ID: {question['user_id']})?",
                     reply_markup=reply_markup
                )
            # –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –≤–µ–¥–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–ª–∞–¥–µ–ª–µ—Ü, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ –∫–Ω–æ–ø–∫–∏
            
        # await update.message.reply_text(message.strip())
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")

async def show_conversation_history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤)."""
    logger.info(f"üìú –í—ã–∑–æ–≤ /history –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    owner_id = update.effective_user.id
    if not is_owner(owner_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    if not context.args:
        await update.message.reply_text("‚ÑπÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /history <user_id>")
        return

    try:
        user_id = int(context.args[0])
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ë–î
        history = db.get_conversation_history(user_id)
        if not history:
            await update.message.reply_text(f"‚ÑπÔ∏è –ù–µ–º–∞—î —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = db.get_user_info(user_id)
        if not user_info:
            user_info = {'first_name': '–ù–µ–≤—ñ–¥–æ–º–∏–π', 'username': 'N/A'}
            
        message = (
            f"üìú –Ü—Å—Ç–æ—Ä—ñ—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º:\n"
            f"üë§ –Ü–º'—è: {user_info['first_name']}\n"
            f"üÜî ID: {user_id}\n"
            f"ü™™ Username: @{user_info['username'] if user_info['username'] else '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}\n\n"
            f"üì® –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n"
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
        for msg in reversed(history): # reversed —á—Ç–æ–±—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –≤–Ω–∏–∑—É
            sender = "üë§ –ö–ª—ñ—î–Ω—Ç" if msg['is_from_user'] else "üë®‚Äçüíº –ú–∞–≥–∞–∑–∏–Ω"
            timestamp = msg['created_at'].strftime('%d.%m.%Y %H:%M')
            message += f"{sender} [{timestamp}]:\n{msg['message']}\n\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é (–≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑–±–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏)
        if len(message) <= 4096:
            await update.message.reply_text(message)
        else:
            parts = [message[i:i+4096] for i in range(0, len(message), 4096)]
            for part in parts:
                await update.message.reply_text(part)
                
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ú–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏.")

async def clear_active_conversations_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –∏–∑ –ë–î (–¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤)."""
    logger.info(f"üßπ –í—ã–∑–æ–≤ /clear –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    owner_id = update.effective_user.id
    if not is_owner(owner_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    try:
        deleted_count = db.clear_all_active_conversations()
        # –¢–∞–∫–∂–µ –Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ main.py, –µ—Å–ª–∏ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
        # –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ callback –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ main.py
        await update.message.reply_text(f"‚úÖ –£—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –¥—ñ–∞–ª–æ–≥–∏ –æ—á–∏—â–µ–Ω–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö. –í–∏–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å—ñ–≤: {deleted_count}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤.")

# --- –ö–æ–º–∞–Ω–¥—ã –æ–±—â–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è ---

# –ï—Å–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –Ω–µ-–≤–ª–∞–¥–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏, –æ–Ω–∏ —Ç–æ–∂–µ –±—É–¥—É—Ç –∑–¥–µ—Å—å.
# –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –±—ã —É –∫–æ–º–∞–Ω–¥—ã /start –±—ã–ª–∞ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞, –µ—ë –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –≤—ã–Ω–µ—Å—Ç–∏.
# –ù–æ –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ /start, /help, /order, /question, /channel, /stop, /pay, /dialog
# –ª—É—á—à–µ –æ—Å—Ç–∞–≤–∏—Ç—å –≤ main.py –∏–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª—è—Ö –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã.
